 @inject IStringLocalizer<Resource> lang
<MudItem>
    <MudSelect T="string" Dense="true" Label="@lang["Business Branch"]" MultiSelection="true" SelectedValues="selected_business" SelectedValuesChanged="@OnSelectedValuesBusiness">
    @foreach (var option in gv.current_login_user.role.business_branch_roles.Where(r=>r.is_delete == false))
    {
        <MudSelectItem T="string" Value="@option.business_branch?.business_branch_name_en.ToString()"  >@option.business_branch?.business_branch_name_en</MudSelectItem>
    }
    </MudSelect>
</MudItem>
 
    @code {

        [CascadingParameter] public GlobalVariableModel gv { get; set; }
        [Parameter] public HashSet<string> selected_business { get; set; } = new HashSet<string>();
        [Parameter] public EventCallback<HashSet<string>> selected_businessChanged { get; set; }

        [Parameter] public EventCallback<List<string>> business_id { get; set; }

        void OnSelectedValuesBusiness(HashSet<string> selected)
        {
            List<string> values = new List<string>(); 
            selected_business = selected;
            values.Clear();
            foreach (var x in selected_business.ToList())
            {
                values.Add(gv.current_login_user.role.business_branch_roles.Where(r=>r.business_branch?.business_branch_name_en==x).FirstOrDefault().business_branch_id.ToString()); 
            }  
            selected_businessChanged.InvokeAsync(selected_business);
            business_id.InvokeAsync(values);
        }

    }
