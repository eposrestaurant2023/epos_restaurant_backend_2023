@inject IStringLocalizer<Resource> lang
<div class="uk-margin-small">
    <label class="uk-form-label" for="@id">@lang[label]</label>
    <div class="uk-form-controls">
        <select id="@id" value="@selected_value" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="0">@lang[empty_text]</option>
            }
            <option value="-7">@lang["Next week"]</option>
            <option value="-14">@lang["Next 14 Days"]</option>
            <option value="1">1 @lang["Month"]"</option>
            <option value="2">2 @lang["Months"]</option>
            <option value="3">3 @lang["Months"]</option>
            <option value="4">4 @lang["Months"]</option>
            <option value="5">5 @lang["Months"]</option>
            <option value="6">6 @lang["Months"]</option>
            <option value="7">7 @lang["Months"]</option>
            <option value="8">8 @lang["Months"]</option>
            <option value="9">9 @lang["Months"]</option>
            <option value="10">10 @lang["Months"]</option>
            <option value="11">11 @lang["Months"]</option>
            <option value="12">12 @lang["Months"]</option>
        </select>
        @ChildContent
    </div>
</div>

@code{

    [Parameter] public List<OutletModel> outlets { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Quick Select Date";
    [Parameter] public bool show_empty { get; set; } = true;
    [Parameter] public string empty_text { get; set; } = "Select Date";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }

    [Parameter] public DateTime date { get; set; } = DateTime.Now;
    [Parameter] public EventCallback<DateTime> dateChanged { get; set; }



    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {

        selected_value = Convert.ToInt32(n);
        DateTime date;
        if (selected_value < 0)
        {
            date = DateTime.Now.AddDays(selected_value * -1);
        }
        else if (selected_value == 0)
        {
            date = DateTime.Now;
        }
        else
        {
            date = DateTime.Now.AddMonths(selected_value).AddDays(-1);
        }
        await dateChanged.InvokeAsync(date);

    }

}
