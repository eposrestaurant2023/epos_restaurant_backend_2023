@inject IStringLocalizer<Resource> lang
@foreach (var d in module_views)
{
    if (sub_title != "")
    {
        if (d.permission_option != "")
        {
            <PageFilterItem roles="@($"{gv.GetRole(role_prefix + d.permission_option)}")" OnClick="@(()=>ViewClick(d))">@(string.Format(lang[d.title],lang[sub_title]))</PageFilterItem>
        }   
        else
        {
            <PageFilterItem roles="@($"{gv.GetRole(d.permission_option)}")" OnClick="@(()=>ViewClick(d))">@(string.Format(lang[d.title],lang[sub_title]))</PageFilterItem>
        }

    }
    else
    {
        <PageFilterItem roles="@($"{gv.GetRole(d.permission_option)}")" OnClick="@(()=>ViewClick(d))">@lang[d.title]</PageFilterItem>
    }

}
@code{
    [Parameter] public List<ModuleViewModel> module_views { get; set; }
    [CascadingParameter] public GlobalVariableModel gv { get; set; }

    [Parameter] public EventCallback<ModuleViewModel> OnClick { get; set; }

    [Parameter] public string sub_title { get; set; } = "";
    [Parameter] public string role_prefix { get; set; } = "";

    async Task ViewClick(ModuleViewModel m)
    {
        await OnClick.InvokeAsync(m);
    }

}