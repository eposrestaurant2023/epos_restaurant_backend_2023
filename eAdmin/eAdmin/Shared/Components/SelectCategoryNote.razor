@inject IStringLocalizer<Resource> lang
<div class="uk-margin-small">
    <label class="uk-form-label" for="@id">@lang[label]</label>
    <div class="uk-form-controls">
        <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="0">@lang[empty_text]</option>
            }
            @foreach (var p in gv.category_notes.Where(r => r.status))
            {
                <option value="@p.id">@p.category_note_name_en</option>
            }
        </select>
        @ChildContent
    </div>
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Category Note";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Category Note";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }

    [Parameter] public CategoryNoteModel category_note { get; set; }
    [Parameter] public EventCallback<CategoryNoteModel> category_noteChanged { get; set; }


    public int SelectedValue
    {
        get
        {
            return category_note == null ? selected_value : category_note.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = Int32.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == 0)
        {
            await category_noteChanged.InvokeAsync(new CategoryNoteModel());
        }
        else
        {
            await category_noteChanged.InvokeAsync(gv.category_notes.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
