@inject IJSRuntime js

<MatDialog IsOpen="ShowCamara" CanBeClosed="false" RefBack="@newref">
    <ModalBody>
        <div style="text-transform: uppercase; font-weight: 600;"><Icon icon="photo_camera" /><span>Capture Image</span></div>
        <hr />
        <div id="video" style="width: 100% !important; display: @(showImageCapture ?"none":"normal")"></div>
        <Com is_visible="showImageCapture">
            <img src="@CapturedImageUrl" />
        </Com>
    </ModalBody>
    <ModalFooter is_action_form="false">
        <UkFlex class_name="uk-flex-center">
            <Button icon="photo_camera" type="button" OnClick="OnCapturedImage" is_visible="!showImageCapture" custom_class="uk-margin-small-right">Take Photo</Button>
            <Button icon="photo_camera" type="button" OnClick="@(() => showImageCapture = false)" is_visible="showImageCapture" custom_class="uk-margin-small-right">Retake Photo</Button>
            <Button icon="done" type="button" OnClick="OnSave" is_visible="showImageCapture" custom_class="uk-margin-small-right">Accept</Button>
            <Button icon="reply" OnClick="OnCloseCamara" class_name="danger">Cancel</Button>
        </UkFlex>
    </ModalFooter>
</MatDialog>
@code{
    string CapturedImageUrl = "";
    bool showImageCapture;
    ForwardRef newref;
    [Parameter] public string guid { get; set; } = "id_capturing_image";
    [Parameter] public bool ShowCamara { get; set; } = true;
    [Parameter] public EventCallback<bool> ShowCamaraChanged { get; set; }
    [Parameter] public EventCallback<string> SaveCapturedImage { get; set; }
    [Parameter] public EventCallback OpenCamera { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await PhotoCamara();
    }
    async Task PhotoCamara()
    {
        await js.InvokeVoidAsync("PhotoCamara", "video");

    }

    async Task OnCloseCamara()
    {
        await js.InvokeVoidAsync("ClosePhotoCamara", "video");
        await ShowCamaraChanged.InvokeAsync(false);
        ShowCamara = false;
    }
    async Task OnCapturedImage()
    {
        CapturedImageUrl = await js.InvokeAsync<string>("CapturePhoto");
        showImageCapture = true;
    }

    async Task OnSave() {
        await SaveCapturedImage.InvokeAsync(CapturedImageUrl);
        await OnCloseCamara();
    }


}