@inherits PageCore;
<Loading is_loading="@(is_saving || is_loading  )" />
<UIGridCenter>
    @if (!is_loading)
    {
        @if (IsComment && !IsReadonly)
        {
            <AuthorizeView Roles="@RoleAdd">
                <EditForm Context="no" Model="@history" OnValidSubmit="@OnSaveClick" @attributes="@formAttributes">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <TextArea @bind-Value="@description" PlaceHolder="@lang["Comment"]" ClassName="textarea-comment" Row="5"/>
                    <hr />
                    <div class="uk-text-right">
                        @if (is_saving)
                        {
                            <Button>
                                <Spinner/>
                            </Button>
                        }
                        else
                        {
                            <Button OnClick="@OnSaveClick">@lang["Add Comment"]</Button>
                        }

                    </div>
                </EditForm>
            </AuthorizeView>
        }
        @if (histories.Count() > 0)
        {
            <div class="wrp-comment">
                @foreach (var h in histories)
                {
                    <div class="comment-box-n-control @(h.module=="comment"?"comment-bg":"comment-system")">
                        @if (h.is_editing)
                        {
                            <EditForm Model="@h" @attributes="@formAttributes" Context="x">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <textarea @bind="@h.description" class="uk-textarea uk-width-1-1 uk-resize-vertical" />
                                <div class="uk-margin-small-bottom"></div>
                                <Button OnClick="@(() => OnUpdateClick(h))" disabled="@h.is_saving">@lang["Save"]</Button>
                                <Button OnClick="@(() => OnCancelClick(h))" disabled="@h.is_saving" class_name="default">@lang["Cancel"]</Button>
                            </EditForm>
                        }
                        else
                        {
                    <Grid ClassName="uk-grid-small">
                        <div class="uk-width-expand">
                            <div class="description">@h.description</div>
                        </div>
                        <div class="uk-width-auto">
                            <div class="wrp-comment-tt">@h.created_date.ToString(gv.date_time_format)</div> 
                            <div class="uk-flex uk-flex-inline uk-flex-middle">
                                <div>
                                    <Image ImageUrl="@http.ImageUrl(h.user?.photo)" PopupImageUrl="@http.ImageUrl(h.user?.photo)" IsLightBox="true" IsBackgroundImage="true" Width="30px" Height="30px" />
                                </div>
                                <div>
                                    <span class="wrp-comment-tt"><strong style="color:#4677cc;">@lang["by"] @h.created_by</strong> </span>
                                    <div style="text-align: right; margin-right: 10px;">
                                        <div class="uk-flex">
                                            <div>
                                                <Icon icon="edit" is_visible="@(h.module=="comment" && !IsReadonly)" OnClick="@(() => EditComment(h))" roles="@RoleEdit" />
                                                <Icon icon="delete" is_visible="@(h.module=="comment" &&  !IsReadonly)" OnClick="@(() => OnDeleteClick(h))" roles="@RoleDelete" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </Grid>
                        }
                    </div>
                }
            </div>
            <ComTotalPager TotalRecord="@TotalRecord" PerPage="@(FilterState.pager.per_page)" CurrentPage="@FilterState.pager.current_page" SelectedPage="@PageChange" IsVisible="@(totalPage > 1)" />
        }
        else
        {
            <ComEmptyTemplate padding_top_bottom="25px" empty="@lang["No comment yet."]"/>
        }

        <Spacing Number="30" />

    }
</UIGridCenter>
@code{
    [Parameter] public EventCallback<HistoryModel> OnSave { get; set; }
    [Parameter] public EventCallback<HistoryModel> OnUpdate { get; set; }
    [Parameter] public EventCallback<HistoryModel> OnDelete { get; set; }
    [Parameter] public string RoleAdd { get; set; }
    [Parameter] public string RoleEdit { get; set; }
    [Parameter] public string RoleDelete { get; set; }
    [Parameter] public bool IsReadonly { get; set; } = false;
    [Parameter] public HistoryModel history { get; set; }

    [Parameter] public string ApiFilter { get; set; }

    public StateModel FilterState { get; set; } = new StateModel();

    int TotalRecord, totalPage;

    [Parameter] public bool IsComment { get; set; } = true;

    List<HistoryModel> histories = new List<HistoryModel>();

    [Required]
    string description = "";
    string old_description = "";

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;

        FilterState.pager.per_page = 10;

        await LoadData();
        is_loading = false;

    }

    public async Task LoadData()
    {
        is_loading = true;

        int skip = FilterState.pager.per_page * (FilterState.pager.current_page - 1);
        var resp = await http.ApiGetOData($"History?$expand=user&$count=true&$top={FilterState.pager.per_page}&$skip={(skip < 0?0:skip)}&$orderby={FilterState.pager.order_by} desc&$filter=is_deleted eq false and {ApiFilter}");
        if (resp.IsSuccess)
        {
            histories = JsonSerializer.Deserialize<List<HistoryModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
            if (gv.CheckPaging(FilterState.pager, TotalRecord) && TotalRecord > 0)
            {
                FilterState.pager.current_page = 1;
                await LoadData();
            }
            totalPage = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(TotalRecord) / Convert.ToDecimal(FilterState.pager.per_page)));
        }

        is_loading = false;

    }

    async Task OnSaveClick()
    {
        if (!string.IsNullOrWhiteSpace(description))
        {
            HistoryModel h = JsonSerializer.Deserialize<HistoryModel>(JsonSerializer.Serialize(history));
            is_saving = true;
            h.title = lang["New Comment"];
            h.module = lang["Comment"];
            h.description = description;

            var resp = await http.ApiPost("History/Save", h);
            if (resp.IsSuccess)
            {
                h = JsonSerializer.Deserialize<HistoryModel>(resp.Content);
                await OnSave.InvokeAsync(h);
                await LoadData();
                toast.Add(lang["Add comment successfully."], MatToastType.Success);
            }

            description = "";
            is_saving = false;

        }
    }
    async Task OnUpdateClick(HistoryModel h)
    {
        if (!string.IsNullOrWhiteSpace(h.description))
        {
            h.is_saving = true;
            if (!string.IsNullOrWhiteSpace(h.description))
            {
                var resp = await http.ApiPost("History/Save", h);
                if (resp.IsSuccess)
                {
                    await OnUpdate.InvokeAsync(h);
                    toast.Add(lang["Update comment successfully."], MatToastType.Success);
                }
                else
                {
                    toast.Add($"Fail save comment. {resp.Content}", MatToastType.Warning);
                }
            }
            h.is_editing = false;
            h.is_saving = false;
        }
    }

    async Task OnDeleteClick(HistoryModel h)
    {
        h.is_loading = true;
        h.is_deleting = true;
        is_saving = true;
        if (await js.Confirm(lang["Delete Comment"], lang["Are you Sure want to delete this comment?"]))
        {
            h.is_deleted = true;
            var resp = await http.ApiPost($"History/delete/{h.id}");
            if (resp.IsSuccess)
            {
                if (histories.Count() == 1 && FilterState.pager.current_page > 0)
                {
                    FilterState.pager.current_page = FilterState.pager.current_page - 1;
                }
                await LoadData();
                await OnDelete.InvokeAsync(h);
                toast.Add(lang["Delete comment successfully."], MatToastType.Success);
            }

        }
        h.is_loading = false;
        h.is_deleting = false;
        is_saving = false;
    }
    void OnCancelClick(HistoryModel h)
    {
        h.description = old_description;
        h.is_editing = false;
    }

    void EditComment(HistoryModel h)
    {
        old_description = h.description;
        h.is_editing = true;
    }


    async Task PageChange(int current_page)
    {
        FilterState.pager.current_page = current_page;
        await LoadData();
    }

}