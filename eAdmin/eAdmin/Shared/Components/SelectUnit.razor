
@if(!string.IsNullOrEmpty(label)){
    <div class="uk-margin-small">
        <label class="uk-form-label" for="@id">@label</label>
        <div class="uk-form-controls">
            <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width: @width;">
                @if (show_empty)
                {
                    <option value="0">@empty_text</option>
                }
               
                @foreach (var p in units)
                {
                    <option value="@p.id">@p.unit_name</option>
                }
               
            </select>
            @ChildContent
        </div>
    </div>
}
else
{
<select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width: auto; min-width:80px;">
    @if (show_empty)
    {
        <option value="0">@empty_text</option>
    }
    
    @foreach (var p in units)
    {
        <option value="@p.id">@p.unit_name</option>
    }
    
</select>
@ChildContent
}
@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;
     
    [Parameter] public string empty_text { get; set; } = "Select Unit";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }
    [Parameter] public string unit_name { get; set; } = "";
    [Parameter] public EventCallback<string> unit_nameChanged { get; set; }

    [Parameter] public UnitModel unit { get; set; }
    [Parameter] public EventCallback<UnitModel> unitChanged { get; set; }

    [Parameter] public int unit_category_id { get; set; }



    public List<UnitModel> units { get {



            if (unit_category_id > 0)
            {
                return gv.units.Where(r => (r.status && !r.is_deleted) && r.unit_category_id == unit_category_id).ToList();
            }
            return gv.units.Where(r => (r.status && !r.is_deleted)).ToList();
        } }



    public int SelectedValue
    {
        get
        {
            if(show_empty)
                return unit == null ? 0 : unit.id;
            else
                return unit == null ? selected_value : unit.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = Int32.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);

        if (selected_value == 0)
        {
            await unitChanged.InvokeAsync(new UnitModel());
            await unit_nameChanged.InvokeAsync("");
        }
        else
        {
            await unitChanged.InvokeAsync(gv.units.Where(r => r.id == selected_value).FirstOrDefault());
            await unit_nameChanged.InvokeAsync(gv.units.Where(r => r.id == selected_value).FirstOrDefault().unit_name);
        }

    }

}
