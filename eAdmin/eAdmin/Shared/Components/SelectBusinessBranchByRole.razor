@inject IStringLocalizer<Resource> lang
    <div class="uk-form-horizontal">
        <div class="uk-margin-small">
            <label class="uk-form-label" for="@id"><Icon icon="@icon" is_visible="@(!string.IsNullOrEmpty(icon))" size="16px" /> @lang[label]</label>
            <div class="uk-form-controls">
                <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
                    @if (show_empty)
                    {
                        <option value="@Guid.Empty">@lang[empty_text]</option>
                    }
                    @foreach (var p in gv.business_branch_by_role)
                    {
                        <option value="@p.id">@p.business_branch_name_en</option>
                    }
                </select>
                @ChildContent
            </div>
        </div>
    </div>
    @code{
        [CascadingParameter] public GlobalVariableModel gv { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        private string _label;
        [Parameter]
        public string label
        {
            get
            {

                if (String.IsNullOrEmpty(_label))
                {
                    _label = lang["Business Branch"];
                }
                return _label;
            }
            set { _label = value; }
        }

        private string _empty_text;
        [Parameter]
        public string empty_text
        {
            get
            {
                if (string.IsNullOrEmpty(_empty_text))
                {
                    _empty_text = lang["Select Business Branch"];
                }
                return _empty_text;
            }
            set { _empty_text = value; }
        }
        [Parameter] public string icon { get; set; }
        [Parameter] public bool show_empty { get; set; } = false;

        [Parameter] public string width { get; set; } = "100%";
        [Parameter] public Guid selected_value { get; set; } = new Guid();
        [Parameter] public EventCallback<Guid> selected_valueChanged { get; set; }
        [Parameter] public BusinessBranchModel business_branch { get; set; }
        [Parameter] public EventCallback<BusinessBranchModel> business_branchChanged { get; set; }

        public Guid business_branch_id { get; set; }

        public Guid SelectedValue
        {
            get
            {
                if (gv.business_branch_by_role.Count() == 1)
                {
                    return gv.business_branch_by_role.FirstOrDefault().id;
                }
                return business_branch == null ? selected_value : business_branch.id;

            }
        }

        Guid id = Guid.NewGuid();

        private async Task SelectedValueChange(string n)
        {
            selected_value = Guid.Parse(n);
            await selected_valueChanged.InvokeAsync(selected_value);
            if (string.IsNullOrEmpty(selected_value.ToString()))
            {
                await business_branchChanged.InvokeAsync(new BusinessBranchModel());
            }
            else
            {
                await business_branchChanged.InvokeAsync(gv.bussiness_branches.Where(r => r.id == selected_value).FirstOrDefault());
            }

        }

    }
