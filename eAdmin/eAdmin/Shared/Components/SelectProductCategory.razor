@inject IStringLocalizer<Resource> lang
<div class="uk-margin-small">
    <label class="uk-form-label" for="@id">
        @if (line_icon != "")
        {
            <LineIcon IconName="@line_icon" />
        }
        else if (icon != "")
        {

            <Icon icon="@icon" />
        }
        @lang[label]
    </label>
    <div class="uk-form-controls">
        @if (is_readonly)
        {
            <select id="@id" value="@SelectedValue" class="uk-select uk-form-small @width" disabled>
                @if (show_empty)
                {
                    <option value="0">@lang[empty_text]</option>
                }

                @foreach (var p in gv.product_categories.Where(r => r.is_deleted == false && r.is_ingredient_category == is_ingredient_category && r.product_group_id == (product_group_id == 0 ? r.product_group_id : product_group_id)))
                {
                    <option value="@p.id">@(gv.current_language.language_id == "km-KH"? p.product_category_kh: p.product_category_en)</option>
                }

            </select>
        }
        else
        {
            <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((String)ui.Value))" class="uk-select uk-form-small @width">
                @if (show_empty)
                {
                    <option value="0">@lang[empty_text]</option>
                }

                @foreach (var p in gv.product_categories.Where(r => r.is_deleted == false && r.is_ingredient_category == is_ingredient_category && r.product_group_id == (product_group_id == 0 ? r.product_group_id : product_group_id)))
                {
                  <option value="@p.id">@(gv.current_language.language_id == "km-KH"? p.product_category_kh: p.product_category_en)</option>
                }
            </select>
        }

        @ChildContent
    </div>
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public string line_icon { get; set; } = "";
    [Parameter] public string icon { get; set; } = "";
    [Parameter] public bool is_ingredient_category { get; set; } = false;
    [Parameter] public int selected_value { get; set; }
    [Parameter] public ProductCategoryModel product_category { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public bool is_readonly { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Product Category";
    [Parameter] public int empty_value { get; set; }
    [Parameter] public int product_group_id { get; set; }
    [Parameter] public string label { get; set; } = "Product Category";
    [Parameter] public string width { get; set; } = "";

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }
    [Parameter] public EventCallback<ProductCategoryModel> product_categoryChanged { get; set; }


    Guid id = Guid.NewGuid();

    public int SelectedValue
    {
        get
        {
            return product_category == null ? selected_value : product_category.id;
        }
    }

    private async Task SelectedValueChange(string n)
    {
        selected_value = Int32.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == 0)
        {
            await product_categoryChanged.InvokeAsync(new ProductCategoryModel());
        }
        else
        {
            await product_categoryChanged.InvokeAsync(gv.product_categories.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }
}
