<ComModal @bind-IsOpened="@IsOpened" Close_Click="@OnCloseClick" ModalWidth="100%" isFullModal="full_modal" Title="@Title" is_ModelFullscreen="true">
        <div uk-grid>
            <div class="uk-width-1-6">
                <div>
                    <ul class="list-category">
                        @foreach (var r in Reports)
                        {
                        <AuthorizeView roles="@gv.GetRole(r.option_name)">
                            @if (r.id == model.id)
                            {
                            <li class="selected sub-report-item">
                                <div><Icon icon="keyboard_arrow_right" className="uk-margin-right-small" />@r.report_title</div>
                            </li>
                            }
                            else
                            {
                            <li @onclick="@(()=>PreviewReport_Click(r))" class="sub-report-item">
                                <div><Icon icon="keyboard_arrow_right" className="uk-margin-right-small" />@r.report_title</div>
                            </li>
                            }
                        </AuthorizeView>
                        }
                    </ul>
                </div>
            </div>
            <div class="uk-width-5-6 uk-padding-remove">
                <div class="modal-content">
                    @if (is_loading)
                    {
                        <Spinner />
                    }
                    else
                    {
                        <iframe  style="overflow:hidden;height:100%;width:100%" height="100%" width="100%" src="@url"  />
                    }
                </div>
            </div>
        </div>

    </ComModal>

@code {
        [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public List<PermissionOptionModel> Reports {
        get {
            return gv.permission_options.Where(r => r.parent_id == parent_id).OrderBy(r=>r.sort_order).ToList();
        }
    }
    [Parameter] public PermissionOptionModel model { get; set; } = new PermissionOptionModel();
    [Parameter] public Boolean IsOpened { get; set; } = false;
    [Parameter] public EventCallback<Boolean> IsOpenedChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }
    [Parameter] public string Title { get; set; } = "Report";
    [Parameter] public string report_parameters { get; set; } = "";


    [Parameter] public int report_id { get; set; } = 0;
    [Parameter] public bool is_print { get; set; } = false;



    public int parent_id { get
        {
            return Convert.ToInt32( gv.permission_options.Where(r => r.id == report_id).FirstOrDefault().parent_id);

        }
    }



    bool is_loading = false;
    string url = "";



    protected override async Task OnParametersSetAsync()
    {
        if (report_id > 0)
        {
            await PreviewReport_Click(gv.permission_options.Where(r=>r.id==report_id).FirstOrDefault());

        }
        else
        {
            await PreviewReport_Click(gv.permission_options.Where(r =>r.parent_id==parent_id).OrderBy(r=>r.sort_order).FirstOrDefault());
        }

    }

    async Task PreviewReport_Click(PermissionOptionModel report) {
        model = report;
        Title = "Report" + " - " + report.report_title;
        if (report != null)
        {
            is_loading = true;
            await Task.Delay(500);
            if (report_parameters == "")
            {
                url = $"{gv.report_url}/Pages/ReportViewer.aspx?/{gv.report_folder}/{report.option_name}&rs:Command=Render&rs:Embed=true";
            }else
            {
                url = $"{gv.report_url}/Pages/ReportViewer.aspx?/{gv.report_folder}/{report.option_name}&rs:Command=Render&rs:Embed=true&{report_parameters}";
            }

            is_loading = false;
        }

    }

    void OnCloseClick() {
        IsOpened = false;
        IsOpenedChanged.InvokeAsync(IsOpened);
        OnClose.InvokeAsync();
    }



}