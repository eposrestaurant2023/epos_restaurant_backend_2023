@inject IStringLocalizer<Resource> lang
@if (is_inline)
{
    @if (is_loading)
    {
        <Spinner />
    }
    else
    {
        <iframe style="overflow:hidden;height:100%;width:100%" src="@url" />
    }
}
else
{
    <MudGrid>
        <MudItem xs="12" md="3">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudPaper Elevation="4" Class="pa-2">

                    <MudList Clickable="true">


                        @foreach (var r in Reports)
                        {
                            <AuthorizeView roles="@gv.GetRole(r.option_name)">


                                @if (r.id == model.id)
                                {


                                    <MudListItem Text="@r.report_title" Icon="@Icons.Material.Filled.KeyboardArrowRight" />
                                    <MudDivider />
                                }
                                else
                                {
                                    <MudListItem Text="@r.report_title" Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="@(() => PreviewReport_Click(r))" />
                                    <MudDivider />

                                }
                            </AuthorizeView>
                        }
                    </MudList>


                </MudPaper>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudToolBar>
                    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="MudBlazor.Color.Inherit" OnClick="@(()=>IsMenuReportOpened=!IsMenuReportOpened)" />
                    <MudText Typo="Typo.h5">@Title</MudText>
                </MudToolBar>
                <MudDrawer @bind-Open="@IsMenuReportOpened" Elevation="1" Variant="@DrawerVariant.Temporary">
                    <MudDrawerHeader>
                        <MudText Typo="Typo.h6">@lang["Reports"]</MudText>
                    </MudDrawerHeader>
                    <MudList Clickable="true">


                        @foreach (var r in Reports)
                        {
                            <AuthorizeView roles="@gv.GetRole(r.option_name)">


                                @if (r.id == model.id)
                                {


                                    <MudListItem Text="@r.report_title" Icon="@Icons.Material.Filled.KeyboardArrowRight" />
                                    <MudDivider />
                                }
                                else
                                {
                                    <MudListItem Text="@r.report_title" Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="@(() => PreviewReport_Click(r))" />
                                    <MudDivider />

                                }
                            </AuthorizeView>
                        }
                    </MudList>
                </MudDrawer>
            </MudHidden>
        </MudItem>
        <MudItem xs="12" md="9">
            <MudPaper Height="100vh">
                @if (is_loading)
                {
                    <Spinner />
                }
                else
                {
                    <iframe style="overflow:hidden;height:100%;width:100%" height="100%" width="100%" src="@url" />
                }
            </MudPaper>
        </MudItem>

    </MudGrid>
 

}


@code {
    [Parameter] public GlobalVariableModel gv { get; set; }
    public List<PermissionOptionModel> Reports
    {
        get
        {
            return gv.permission_options.Where(r => r.parent_id == parent_id).OrderBy(r => r.sort_order).ToList();
        }
    }

    [Parameter] public PermissionOptionModel model { get; set; } = new PermissionOptionModel();
    [Parameter] public Boolean IsOpened { get; set; } = false;
    [Parameter] public EventCallback<Boolean> IsOpenedChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }
    [Parameter] public string Title { get; set; } = "Report";
    [Parameter] public string report_parameters { get; set; } = "";
    [Parameter] public int parent_id { get; set; } = 0;
    [Parameter] public bool is_inline { get; set; } = false;
    [Parameter] public int report_id { get; set; } = 0;
    [Parameter] public bool is_print { get; set; } = false;

    bool is_loading = false, IsMenuReportOpened=false;
    string url = "";
    int old_report_id = 0;
    bool is_open_menu = true;


    protected override async Task OnParametersSetAsync()
    {
        if (report_id > 0)
        {
            if (old_report_id != report_id)
            {
                old_report_id = report_id;
                await PreviewReport_Click(gv.permission_options.Where(r => r.id == report_id).FirstOrDefault());
            }
        }
        else
        {
            await PreviewReport_Click(gv.permission_options.Where(r => r.parent_id == parent_id).OrderBy(r => r.sort_order).FirstOrDefault());
        }

    }

    async Task PreviewReport_Click(PermissionOptionModel report)
    {
        model = report;
        Title = lang["Report"] + " - " + report.report_title;
        if (report != null)
        {
            is_loading = true;
            await Task.Delay(500);
            if (report_parameters == "")
            {
                url = $"{gv.report_url}/Pages/ReportViewer.aspx?/{gv.report_folder}/{report.option_name}&rs:Command=Render&rs:Embed=true&printed_by={gv.current_login_user.username}&report_url={model.option_name}";
            }
            else
            {
                url = $"{gv.report_url}/Pages/ReportViewer.aspx?/{gv.report_folder}/{report.option_name}&rs:Command=Render&rs:Embed=true&{report_parameters}&printed_by={gv.current_login_user.username}&report_url={model.option_name}";
            }

            IsMenuReportOpened = false;
            is_loading = false;

        }

    }

    void OnCloseClick()
    {
        IsOpened = false;
        IsOpenedChanged.InvokeAsync(IsOpened);
        OnClose.InvokeAsync();
    }



}