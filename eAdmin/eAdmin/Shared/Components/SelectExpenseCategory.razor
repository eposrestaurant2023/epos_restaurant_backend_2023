@using eShareModel;
@inject IStringLocalizer<Resource> lang
<div class="uk-margin-small">
    <label class="uk-form-label" for="@id"><Icon icon="@icon" is_visible="@(!string.IsNullOrEmpty(icon))" size="16px" /> @lang[label]</label>
    <div class="uk-form-controls">
        <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="@Guid.Empty">@lang[empty_text]</option>
            }
            @foreach (var p in gv.expeneses_categories.Where(r=>r.is_deleted == false))
            {
                <option value="@p.id">@p.expense_category_name</option>
            }

        </select>
        @ChildContent
    </div>
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Expense Category";
    [Parameter] public Guid business_branch_id { get; set; } = Guid.Empty;
    [Parameter] public string icon { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select expense category";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public Guid selected_value { get; set; }
    [Parameter] public EventCallback<Guid> selected_valueChanged { get; set; }

    [Parameter] public ExpenseCategoryModel expensecategory { get; set; }
    [Parameter] public EventCallback<ExpenseCategoryModel> expensecategoryChanged { get; set; }


    public Guid SelectedValue
    {
        get
        {
            return expensecategory == null ? selected_value : expensecategory.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = Guid.Parse(n);

        await selected_valueChanged.InvokeAsync(selected_value);

        if (selected_value == Guid.Empty)
        {
            await expensecategoryChanged.InvokeAsync(new ExpenseCategoryModel());
        }
        else
        {
            await expensecategoryChanged.InvokeAsync(gv.expeneses_categories.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
