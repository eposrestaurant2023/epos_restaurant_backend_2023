@typeparam TItem
@inject IStringLocalizer<Resource> lang
<div class="clear"></div>
<div class="uk-position-relative">
    <Com is_visible="@(ShowPagination && ShowPaging)">
        <ComTotalPager TotalRecord="@TotalItem" PerPage="@PerPage" CurrentPage="@CurrentPage" SelectedPage="@PageChange" IsVisible="@(totalPage > 1 && (PagerLocation == "Both" || PagerLocation == "Top"))" />
    </Com>
    <div class="uk-overflow-auto table-scroll">
        <table class="uk-table @CustomClass view_table set-verticle-middle @ClassName @loadingClass ">
            <thead>
                <tr>
                    @if (ShowCounter)
                    {
                        <ThCenter>Nº</ThCenter>
                    }
                    @TableHeader
                </tr>
            </thead>
            @if (Items == null || Items.Count == 0)
            {
                <tbody>
                    <tr>
                        <td colspan="10000">
                            <div class="uk-text-center">
                                <Icon icon="search" />
                                <br />
                                <p>@EmptyText</p>
                            </div>
                        </td>
                    </tr>
                </tbody>

            }
            else
            {
                <tbody>
                    @foreach (var item in (Items.Select((data, i) => new { Index = i, Data = data })).ToList())
                    {
                        <tr>
                            <Com is_visible="@ShowCounter">
                                <TdCenter>@(PerPage*(CurrentPage -1) + item.Index+1)</TdCenter>
                            </Com>
                            @RowTemplate(item.Data)
                        </tr>
                    }
                </tbody>
                <tfoot class="@FooterClassName">
                    @TableFooter
                </tfoot>


            }
        </table>
    </div>
    <Com is_visible="@(ShowPaging &&  Items.Count > 0)">
        <div uk-grid class="uk-grid-small wrp-pagging uk-margin-top @ClassHiddePagging">
            <Column ClassName="uk-width-auto@xl uk-width-auto@l uk-width-auto@m uk-width-1-1@s uk-text-center@s">
                <div uk-grid class="uk-grid-small">
                    <Com is_visible="@ShowPager">
                        <Column ClassName="uk-width-auto">
                            <ComPagerPerPage OnChange="@PagerChange" PerPage="@PerPage" />
                        </Column>
                    </Com>
                    @if (ShowTotalCount)
                    {
                        <Column ClassName="uk-width-auto wrp-page-size-info">
                            <PagerInfo TotalItem="TotalItem" CurrentPage="CurrentPage" PerPage="PerPage" />
                        </Column>
                    }
                </div>
            </Column>
            <Column ClassName="uk-width-expand@xl uk-width-expand@l uk-width-expand@m uk-width-1-1@s uk-text-center@s wrp-pagging-info">
                <Com is_visible="@(ShowPagination)">
                    <ComTotalPager TotalRecord="@TotalItem" PerPage="@PerPage" CurrentPage="@CurrentPage" SelectedPage="@PageChange" IsVisible="@(totalPage > 1 && (PagerLocation == "Both" || PagerLocation == "Bottom"))" />
                </Com>
            </Column>
        </div>
    </Com>
    @if (isLoading)
    {
        <div class="table_loading">
            <Spinner />
        </div>
    }
</div>
@code {
    [Parameter]    public RenderFragment TableHeader { get; set; }
    [Parameter]    public RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter]    public RenderFragment TableFooter { get; set; }
    [Parameter]    public IReadOnlyList<TItem> Items { get; set; }
    [Parameter]    public EventCallback<int> OnPageChange { get; set; }
    [Parameter]    public EventCallback<int> OnPagerChange { get; set; }
    [Parameter]    public bool ShowWhenEmptyItem { get; set; } = false;
    [Parameter]    public int CurrentPage { get; set; }
    [Parameter]    public bool ShowCounter { get; set; }
   
    [Parameter]    public string EmptyIcon { get; set; } = "search";

     private string _EmptyText;
     [Parameter]
        public string EmptyText
        {
            get
        {

            if (String.IsNullOrEmpty(_EmptyText))
            {
                _EmptyText = lang["There's no record in the system"];
            }
            return _EmptyText;
        }
        set { _EmptyText = value; }
    }
    

    [Parameter]    public string IconSize { get; set; } = "1";
    [Parameter]    public bool EmptyShowTable { get; set; }
    [Parameter]    public bool isLoading { get; set; } = false;
    [Parameter]    public bool ShowPager { get; set; } = false;
    [Parameter]    public bool ShowPaging { get; set; } = true;
    [Parameter]    public int PerPage { get; set; } = 0;
    [Parameter]    public string ClassName { get; set; } = "uk-table-small uk-table-striped uk-table-hover";
    [Parameter]    public string ScrollClass { get; set; } = "";
    [Parameter]    public string CustomClass { get; set; } = "";
    [Parameter]    public string ClassHiddePagging { get; set; } = "";
    [Parameter]    public string FooterClassName { get; set; } = "";
    [Parameter]    public int TotalItem { get; set; }
    [Parameter]    public bool ShowPagination { get; set; } = true;
    [Parameter]    public bool ShowTotalCount { get; set; } = true;

    int totalPage;
    [Parameter]    public string PagerLocation { get; set; } = "Bottom";
    public string loadingClass { get; set; } = "";
    protected override void OnParametersSet()
    {
        if (ShowPagination)
        {
            if (PerPage > 0)
            {
                totalPage = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(TotalItem) / Convert.ToDecimal(PerPage)));
            }
        }
        if (isLoading)
        {
            loadingClass = "is_loading";
        }
        else
        {
            loadingClass = "";
        }

        @if (Items != null)
        {
            if (Items.Count == 0)
            {
                ClassName = "uk-table-small uk-table-divider";
            }

        }
        else if (Items == null)
        {
            ClassName = "uk-table-small uk-table-divider";
        }
        else
        {
            ClassName = "uk-table-small uk-table-divider uk-table-hover";

        }
    }

    async Task PageChange(int page)
    {
        isLoading = true;
        await OnPageChange.InvokeAsync(page);
        isLoading = false;
    }

    async Task PagerChange(int per_page)
    {
        isLoading = true;
        await OnPagerChange.InvokeAsync(per_page);
        StateHasChanged();
        isLoading = false;
    }
    public int GetLastRecordNumber()
    {
        if (TotalItem < CurrentPage * PerPage)
        {
            return TotalItem;
        }
        return CurrentPage * PerPage;
    }
}
