@inject IHttpService http;
@inject ISnackbar toast;
@inject IStringLocalizer<Resource> lang

<Com is_visible="IsVisible">
    @if (is_loading && IsIconButton)
    {
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <Button class_name="uk-button uk-button-primary"><Spinner /></Button>
            </MudHidden>
            }
            else
            {
            if (IsIconButton)
            {
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <Button icon="attach_file" title="Attach File" OnClick="@(()=>IsOpened=true)">(@files.Where(r => r.is_deleted == false).Count())</Button>
            </MudHidden>

            <MudDrawer Width="350px" Open="@IsOpened" OpenChanged="@DrawerOpened" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
                <MudDrawerHeader Class="d-flex align-center">
                    <MudText Typo="Typo.h6">@lang["Attach Files"]</MudText>
                </MudDrawerHeader>
                <MudDivider />
                <div style="padding: 10px 20px; text-align: left;">
                    <ComAttachFile RoleAdd="@RoleAdd"
                                   RoleEdit="@RoleEdit"
                                   RoleDelete="@RoleDelete"
                                   AttachFiles="@files"
                                   file="@File"
                                   OnUploadAttachFile="@UploadAttachFile_Click"
                                   OnDeleteAttachFile="@DeleteAttachFile_Click"
                                   IsVisible="@IsVisible"
                                   IsReadOnly="@IsReadOnly" />
                </div>

            </MudDrawer>
            }
            else
            {

             <MoreButtonItem icon="attach_file" OnClick="@OnOpenAttachFile">@lang["Attach Files"] (@files.Where(r => r.is_deleted == false).Count())</MoreButtonItem>


            }


            }



    </Com>



@code{

    [Parameter] public string RoleAdd { get; set; }
    [Parameter] public string RoleEdit { get; set; }
    [Parameter] public string RoleDelete { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsIconButton { get; set; } = true;
    [Parameter] public bool IsOpened { get; set; }
    [Parameter] public EventCallback<bool> IsOpenedChanged { get; set; }
    [Parameter] public string IdToggle { get; set; } = "attach-file";
    [Parameter] public AttachFilesModel File { get; set; }
    [Parameter] public EventCallback<AttachFilesModel> OnUplopadFile { get; set; }
    [Parameter] public EventCallback<AttachFilesModel> OnDeleteFile { get; set; }
    [Parameter] public EventCallback OnOpenAttachFile { get; set; }
    [Parameter] public string ApiFilter { get; set; } = "";
    List<AttachFilesModel> files = new List<AttachFilesModel>();




    public string api_url
    {
        get
        {
            var url = $"AttachFiles?$filter=is_deleted eq false";
            if (!string.IsNullOrEmpty(ApiFilter))
            {
                url = $"{url} and {ApiFilter}";
            }
            return url;
        }
    }

    bool is_loading;

    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        await Task.Delay(1000);
        var x = api_url;
        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            files = JsonSerializer.Deserialize<List<AttachFilesModel>>(resp.Content.ToString());
        }
        else
        {
            toast.Add(lang["Load data fail. Please try again."], MudBlazor.Severity.Warning);

        }

        is_loading = false;

    }



    public void DeleteAttachFile_Click(AttachFilesModel file)
    {
        if (file != null)
        {
            OnDeleteFile.InvokeAsync(file);
        }
        StateHasChanged();
    }


    public void UploadAttachFile_Click(AttachFilesModel file)
    {

        if (file != null)
        {
            files.Add(file);
            OnUplopadFile.InvokeAsync(file);
        }
    }

    async Task DrawerOpened(bool is_opened)
    {
        await IsOpenedChanged.InvokeAsync(is_opened);
    }

}