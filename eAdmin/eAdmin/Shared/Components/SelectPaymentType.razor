@inject IStringLocalizer<Resource> lang
@if (!is_inline)
{
    @if (is_horizontal)
    {
        <div class="@(is_horizontal ? "uk-form-horizontal" : "")">
            <div class="uk-margin-small">
                <label class="uk-form-label" for="@id">@lang[label]</label>
                <div class="uk-form-controls">
                    <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
                        @if (show_empty)
                        {
                            <option value="0">@empty_text</option>
                        }
                        @foreach (var p in gv.payment_types.Where(r => r.status && !r.is_deleted && r.payment_type_group != "On Account" && r.payment_type_group != "FOC"))
                        {
                            <option value="@p.id">@p.payment_type_name_en</option>
                        }
                    </select>
                    @ChildContent
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="uk-margin-small">
            <label class="uk-form-label" for="@id">@lang[label]</label>
            <div class="uk-form-controls">
                <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
                    @if (show_empty)
                    {
                        <option value="0">@empty_text</option>
                    }
                    @foreach (var p in gv.payment_types.Where(r => r.status && !r.is_deleted && r.payment_type_group != "On Account" && r.payment_type_group != "FOC"))
                    {
                        <option value="@p.id">@p.payment_type_name_en</option>
                    }
                </select>
                @ChildContent
            </div>
        </div>
    }
}
else
{
    @if (!is_read_only)
    {
        <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="0">@empty_text</option>
            }
            @foreach (var p in gv.payment_types.Where(r => r.status && !r.is_deleted))
            {
                <option value="@p.id">@p.payment_type_name_en</option>
            }
        </select>
    }
    else
    {
        <select id="@id" value="@SelectedValue" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="0">@empty_text</option>
            }
            @foreach (var p in gv.payment_types.Where(r => r.status && !r.is_deleted))
            {
                <option value="@p.id">@p.payment_type_name_en</option>
            }
        </select>
    }
    @ChildContent

}
@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Payment Type";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public bool is_horizontal { get; set; } = true;
    [Parameter] public bool is_inline { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Payment Type";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }

    [Parameter] public PaymentTypeModel payment_type { get; set; }
    [Parameter] public EventCallback<PaymentTypeModel> payment_typeChanged { get; set; }


    public int SelectedValue
    {
        get
        {

            return payment_type == null ? selected_value : payment_type.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = Int32.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == 0)
        {
            await payment_typeChanged.InvokeAsync(new PaymentTypeModel());
        }
        else
        {
            await payment_typeChanged.InvokeAsync(gv.payment_types.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
