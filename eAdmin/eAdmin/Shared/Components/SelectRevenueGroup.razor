@inject IStringLocalizer<Resource> lang
<div class="uk-margin-small">
    @if (!string.IsNullOrEmpty(label))
    {
        <label class="uk-form-label" for="@id"><Icon icon="@icon" is_visible="@(!string.IsNullOrEmpty(icon))" size="16px" /> @lang[label]</label>
    }

    <div class="@(!string.IsNullOrEmpty(label) ? "uk-form-controls" : "")">

        <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
            @if (show_empty)
            {
                <option value="">@lang[empty_text]</option>
            }
            @foreach (var p in gv.revenue_groups.Where(r => r.is_deleted == false).OrderBy(r => r.sort_order))
            {
                <option value="@p.revenue_group_name_en">@p.revenue_group_name_en</option>
            }

        </select>
        @ChildContent
    </div>
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Revenue Group";
    [Parameter] public string icon { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Revenue Group";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public string selected_value { get; set; } = "";
    [Parameter] public EventCallback<string> selected_valueChanged { get; set; }

    [Parameter] public RevenueGroupModel revenue_group { get; set; }
    [Parameter] public EventCallback<RevenueGroupModel> revenue_groupChanged { get; set; }

    public string SelectedValue
    {
        get
        {
            return revenue_group == null ? (selected_value ?? "") : revenue_group.revenue_group_name_en;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = n;
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == "")
        {
            await revenue_groupChanged.InvokeAsync(new RevenueGroupModel());
        }
        else
        {
            if (gv.revenue_groups.Where(r => r.revenue_group_name_en == selected_value).FirstOrDefault() != null)
            {
                await revenue_groupChanged.InvokeAsync(gv.revenue_groups.Where(r => r.revenue_group_name_en == selected_value).FirstOrDefault());
            }

        }

    }

}
