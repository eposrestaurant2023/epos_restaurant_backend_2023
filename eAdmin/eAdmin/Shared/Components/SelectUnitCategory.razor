<div class="uk-margin-small">
    <label class="uk-form-label" for="@id"><Icon icon="@icon" is_visible="@(!string.IsNullOrEmpty(icon))" size="16px" /> @label</label>
    <div class="uk-form-controls">
        @if(!is_laoding){
            <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
                @if (show_empty)
                {
                    <option value="0">@empty_text</option>
                }
                @foreach (var p in gv.unit_categories)
                {
                    <option value="@p.id">@p.category_name</option>
                }
            </select>
            @ChildContent
        }
        else
        {
            <Spinner/>
        }
        
    </div>
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Unit Category";
    [Parameter] public string icon { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Unit Category";
    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; }
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }
    [Parameter] public UnitCategoryModel unit_category { get; set; }
    [Parameter] public EventCallback<UnitCategoryModel> unit_categoryChanged { get; set; }

    public bool is_laoding = false;
    Guid id = Guid.NewGuid();
    public int SelectedValue
    {
        get
        {
            if(selected_value > 0)
                return unit_category == null ? gv.unit_categories.Find(r=>r.id == selected_value).id : selected_value;
            else
                return unit_category == null ? gv.unit_categories.Where(r=>r.is_built_in).FirstOrDefault().id : unit_category.id;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        is_laoding = true;
        if (unit_category == null)
        {
            await selected_valueChanged.InvokeAsync(SelectedValue);
        }
        is_laoding = false;
    }


    private async Task SelectedValueChange(string n)
    {
        selected_value = int.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
        if (string.IsNullOrEmpty(selected_value.ToString()))
        {
            await unit_categoryChanged.InvokeAsync(new UnitCategoryModel());
        }
        else
        {
            await unit_categoryChanged.InvokeAsync(gv.unit_categories.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
