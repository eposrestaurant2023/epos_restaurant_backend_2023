@inject IStringLocalizer<Resource> lang
@if (!string.IsNullOrEmpty(label))
{
    <div class="uk-margin-small">
        <label class="uk-form-label" for="@id">@lang[label]</label>
        <div class="uk-form-controls">
            <select id="@id" value="@unit_name" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width: @width;">
                @if (show_empty)
                {
                    <option value="">@lang[empty_text]</option>
                }

                @foreach (var p in gv.units.Where(r => (r.status && !r.is_deleted) && r.unit_category_id == unit_category_id))
                {
                    <option value="@p.unit_name">@p.unit_name</option>
                }

            </select>
            @ChildContent
        </div>
    </div>
}
else
{
    <select id="@id" value="@unit_name" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width: auto; min-width:80px;">
        @if (show_empty)
        {
            <option value="">@lang[empty_text]</option>
        }

        @foreach (var p in gv.units.Where(r => (r.status && !r.is_deleted) && r.unit_category_id == unit_category_id))
        {
            <option value="@p.unit_name">@p.unit_name</option>
        }

    </select>
    @ChildContent
}
@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; }
    [Parameter] public bool show_empty { get; set; } = false;

    [Parameter] public string empty_text { get; set; } = "Select Unit";

    [Parameter] public string width { get; set; } = "100%";


    [Parameter] public string unit_name { get; set; } = "";
    [Parameter] public EventCallback<string> unit_nameChanged { get; set; }
    [Parameter] public decimal multiplier { get; set; } = 1;
    [Parameter] public EventCallback<decimal> multiplierChanged { get; set; }


    [Parameter] public int unit_category_id { get; set; }




    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        unit_name = n;
        await unit_nameChanged.InvokeAsync(unit_name);
        if (unit_name != "")
        {
            UnitModel u = gv.units.Where(r => r.unit_category_id == unit_category_id && r.unit_name.ToLower().Trim() == n.Trim().ToLower()).FirstOrDefault();
            await multiplierChanged.InvokeAsync(u.multiplier);
        }
        else
        {
            await multiplierChanged.InvokeAsync(1);
        }


    }

}
