@inherits PageCore

<div class="search-add-typeahead">
    <Grid ClassName="uk-grid-small">
        <div class="uk-width-auto">
            <div class="search-add-icon">
                <Icon icon="search" size="25px" icon_color="#99afc5" title="@(lang["Search"] + "/" + lang["Add Product"])" />
            </div>
        </div>
        <div class="uk-width-expand uk-padding-remove">
            <BlazoredTypeahead SearchMethod="SearchModifier" @bind-Value="@selected" Placeholder="@lang["placeholder"]" class="uk-form-small" ShowDropDownOnFocus="true">
                <SelectedTemplate>
                    @(gv.current_language.language_id == "km-KH"? context.product_name_kh: context.product_name_en)
                </SelectedTemplate>
                
                <ResultTemplate>
                    @if (!context.is_new)
                    {
                        <div>
                            <span> @(gv.current_language.language_id == "km-KH"? context.product_name_kh: context.product_name_en)</span>
                            <LabelIngredient is_visible="@context.is_ingredient_product" />
                            <LabelMenuProduct is_visible="@context.is_menu_product" />
                        </div>


                    }
                    else
                    {
                            <span>@lang["Add"]</span>
                            <span>@context.product_name_en</span>
                    }

                </ResultTemplate>
            </BlazoredTypeahead>
        </div>

    </Grid>
</div>
@code{

    [Parameter] public string label { get; set; } = "Product";
    [Parameter] public string status { get; set; } = "";
    [Parameter] public string placeholder { get; set; } = "Select Product";
    [Parameter] public ProductModel product { get; set; } = null;
    [Parameter] public EventCallback<ProductModel> productChanged { get; set; }
    [Parameter] public int? product_id { get; set; }
    [Parameter] public bool is_search_all_product { get; set; } = false;
    [Parameter] public EventCallback<int> product_idChanged { get; set; }
    [Parameter] public string key { get; set; }
    List<ProductModel> result = new List<ProductModel>();
    public async Task<IEnumerable<ProductModel>> SearchModifier(string searchText)
    {
        string api_url = $"product?$expand=unit,product_portions($select=id,unit_id,portion_name;$filter=is_deleted eq false)&keyword={searchText}&$orderby=product_name_en asc&$top=20";

        state.filters.Clear();

        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });

        if (status == "Active")
        {
            state.filters.Add(new FilterModel() { key = "status", value1 = "true" });
        }
        else if (status == "Inactive")
        {
            state.filters.Add(new FilterModel() { key = "status", value1 = "false" });
        }
        if (!is_search_all_product)
        {
            state.filters.Add(new FilterModel() { key = "is_ingredient_product", value1 = "true" });
        }


        api_url = api_url + GetFilter(state.filters);
        var res = await http.ApiGetOData(api_url);
        if (res.IsSuccess)
        {
            result = JsonSerializer.Deserialize<List<ProductModel>>(res.Content.ToString());
            if (!result.Any() || result.Where(r => r.product_name_en.ToLower() != searchText.ToLower()).Any())
            {
                result.Add(new ProductModel() { product_name_en = searchText, is_new = true });
            }
            return result;

        }
        return new List<ProductModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (product != null)
        {
            if (product.id == 0)
            {
                selected = null;
            }
            else
            {
                selected = product;
            }
        }
        await SearchModifier("");
    }



    private ProductModel _selected;
    public ProductModel selected
    {
        get
        {
            _selected = product;
            return _selected;
        }
        set
        {
            if (value.id == 0)
            {
                value.is_ingredient_product = true;
            }
            _selected = value;

            productChanged.InvokeAsync(value);
            if (value != null)
            {
                product_idChanged.InvokeAsync(value.id);
            }
            else
            {
                product_idChanged.InvokeAsync(0);
            }
        }
    }
}