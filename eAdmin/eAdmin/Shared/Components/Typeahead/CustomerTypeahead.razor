@inherits PageCore;
<BlazoredTypeahead SearchMethod="SearchCustomer" @bind-Value="@selected_customer" Placeholder="@placeholder" class="uk-form-small" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <Grid ClassName="uk-grid-small">
            <Column ClassName="uk-width-auto">
                <Image ImageUrl="@(http.ImageUrl(context.photo))" PopupImageUrl="@(http.ImageUrl(context.photo))" IsLightBox="true" IsBackgroundImage="true" Width="30px" Height="30px" />
            </Column>
            <Column ClassName="uk-width-expand color_text">
                @context.customer_name_en
            </Column>
        </Grid>
    </SelectedTemplate>
    <ResultTemplate>
        <Grid ClassName="uk-grid-small uk-grid-divider">
            <Column ClassName="uk-width-auto">
                <Image ImageUrl="@(http.ImageUrl(context.photo))" PopupImageUrl="@(http.ImageUrl(context.photo))" IsLightBox="true" IsBackgroundImage="true" Width="30px" Height="30px" />
            </Column>
            <Column ClassName="uk-width-expand Color_#ff">
                @context.customer_name_en
            </Column>
        </Grid>
    </ResultTemplate>
</BlazoredTypeahead>


@code{

    [Parameter] public string label { get; set; } = "Customer";
    [Parameter] public string status { get; set; } = "";
    [Parameter] public string placeholder { get; set; } = "Select Customer";
    [Parameter] public CustomerModel customer { get; set; }
    [Parameter] public EventCallback<CustomerModel> customerChanged { get; set; }
    [Parameter] public int? customer_id { get; set; }
    [Parameter] public EventCallback<Guid> customer_idChanged { get; set; }

 

    public async Task<IEnumerable<CustomerModel>> SearchCustomer(string searchText)
    {
        string api_url = $"customer?keyword={searchText}&$orderby=customer_name_en asc&$top=10";
        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });

        if (status == "Active")
        {
            state.filters.Add(new FilterModel() { key = "status", value1 = "true" });
        }
        else if (status == "Inactive")
        {
            state.filters.Add(new FilterModel() { key = "status", value1 = "false" });
        }

        api_url = api_url + GetFilter(state.filters);
        var res = await http.ApiGetOData(api_url);
        if (res.IsSuccess)
        {
            var result = JsonSerializer.Deserialize<List<CustomerModel>>(res.Content.ToString());
            return result;
        }
        return new List<CustomerModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        if (customer != null)
        {
            if (customer.id == Guid.Empty)
            {
                selected_customer = null;
            }
            else
            {
                selected_customer = customer;
            }
        }
        await SearchCustomer("");
    }

    private CustomerModel _selected_customer;
    public CustomerModel selected_customer
    {
        get
        {
            _selected_customer = customer;
            return _selected_customer;
        }
        set
        {
            _selected_customer = value;
            customerChanged.InvokeAsync(value);
            if (value != null)
            {

                customer_idChanged.InvokeAsync(value.id);
     
            }
            else
            {
                customer_idChanged.InvokeAsync(Guid.Empty);
            }

            
        }
    }
}
