@inject IStringLocalizer<Resource> lang
@if (!is_inline)
{
    <div class="@(is_horizontal?"uk-form-horizontal":"")">
        <div class="uk-margin-small">
            <label class="uk-form-label" for="@id"><Icon icon="@icon" is_visible="@(!string.IsNullOrEmpty(icon))" size="16px" /> @lang[label]</label>
            <div class="uk-form-controls">
                @if (is_read_only)
                {
                    <input style="width:@width" type="datetime-local" id="@id" value="@str_value" placeholder="@placeholder" @onchange="@((ui) => ValueChange((string)ui.Value))" readonly="readonly" pattern="yyyy-MM-dd hh:mm:ss tt" class="uk-input uk-form-small  @ClassName" />
                }
                else
                {
                    <input style="width:@width" type="datetime-local" id="@id" value="@str_value" placeholder="@placeholder" @onchange="@((ui) => ValueChange((string)ui.Value))" pattern="yyyy-MM-dd hh:mm:ss tt" class="uk-input uk-form-small  @ClassName" />
                }
            </div>
        </div>
    </div>
}
else
{
    @if (is_read_only)
    {
        <input style="width:@width" type="datetime-local" id="@id" value="@str_value" placeholder="@placeholder" @onchange="@((ui) => ValueChange((string)ui.Value))" readonly="readonly" pattern="yyyy-MM-dd hh:mm:ss tt" class="uk-input uk-form-small @ClassName" />
    }
    else
    {
        <input style="width:@width" type="datetime-local" id="@id" value="@str_value" placeholder="@placeholder" @onchange="@((ui) => ValueChange((string)ui.Value))" pattern="yyyy-MM-dd hh:mm:ss tt" class="uk-input uk-form-small  @ClassName" />
    }
}

@code{

    [Parameter] public DateTime value { get; set; }
    [Parameter] public string placeholder { get; set; } = "";
    [Parameter] public string label { get; set; } = "";
    [Parameter] public string icon { get; set; } = "";
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public bool is_inline { get; set; } = false;
    [Parameter] public bool is_horizontal { get; set; } = true;
    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public string ClassName { get; set; } = "";
    [Parameter]
    public EventCallback<DateTime> valueChanged { get; set; }

    Guid id = Guid.NewGuid();

    public string str_value
    {
        get
        {
            return string.Format("{0:yyyy-MM-dd hh:mm:ss tt}", value);
        }
    }


    protected override void OnInitialized()
    {

        if (placeholder == "")
        {
            placeholder = label;
        }
    }


    private async Task ValueChange(string _value)
    {
        if (string.IsNullOrEmpty(_value))
        {
            value = DateTime.Now;
        }
        else
        {
            value = DateTime.Parse(_value);
        }


        await valueChanged.InvokeAsync(value);
    }
}


