@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop;
@inject IStringLocalizer<Resource> lang

@inject Microsoft.JSInterop.IJSRuntime js;

<EditForm Model="@dummy" OnSubmit="Search" @attributes="@(is_fullwidth?searchFormAttributesFullwidth:searchFormAttributes)">
    <div class="control-addon @(show_advance_filter?"control-addon-right":"") control-addon-left">
        <span uk-search-icon></span>
        <input class="uk-search-input" @bind="@search_text" type="search" placeholder="@placeholder" @ref="txt_search" @bind:event="oninput" />
        @if (show_advance_filter)
        {
            <span class="input-addon-right">
                <Icon icon="tune" OnClick="@(()=>IsOpened=true)" />
            </span>
        }

    </div>
</EditForm>
@if (show_advance_filter)
{

<MudDrawer Width="300px" @bind-Open="@IsOpened" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader Class="d-flex align-center">
        <MudText Typo="Typo.h6">@lang["Filter"]</MudText>
    </MudDrawerHeader>
    <MudDivider />
    <div style="padding: 10px 20px; text-align: left;">
        @ChildContent
    </div>
    <div class="filter-footer uk-flex uk-flex-right">
        <button class="btn-search-filter" type="submit" @onclick="@OnSearch"><LineIcon IconName="la-filter" />@lang["Search"]</button>
    </div>
</MudDrawer>
}

@code{
        [Parameter] public string place_holder { get; set; } = "";
    public string dummy { get; set; } = "";
    [Parameter] public string Keyword { get; set; }
    [Parameter] public EventCallback<string> KeywordChanged { get; set; }

    [Parameter] public string search_text { get; set; } = "";
    [Parameter] public string FrmClass { get; set; } = "";
    [Parameter] public string advance_filter_id { get; set; } = "advance_filter" + string.Format("{0:yyyy_MM_dd_HH_mm_ss}", DateTime.Now);
    [Parameter] public bool show_advance_filter { get; set; } = true;
    [Parameter] public bool is_fullwidth { get; set; } = false;


    [Parameter] public EventCallback OnFillterClick { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    bool IsOpened = false;

    private ElementReference txt_search;


    public Dictionary<string, object> searchFormAttributes { get; set; } = new Dictionary<string, object>()
{
                { "class", "uk-search uk-search-default"}, {"style","width:auto" }
    };


    public Dictionary<string, object> searchFormAttributesFullwidth { get; set; } = new Dictionary<string, object>()
{
                { "class", "uk-search uk-search-default"}, {"style","width:100%" }
    };


    public string placeholder
    {
        get
        {

            return string.IsNullOrEmpty(place_holder) ? lang["Search"] + "..." : place_holder;

        }
    }

    async Task Search()
    {

        await KeywordChanged.InvokeAsync(search_text);
    }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("JsFunctions.focusElement", txt_search);
        }
    }

    async Task OnSearch()
    {
        IsOpened = false;
        await OnFillterClick.InvokeAsync();
    }

}
