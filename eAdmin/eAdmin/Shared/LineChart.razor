@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using Microsoft.JSInterop
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@inject IJSRuntime JsRuntime
@if (_lineConfig != null)
{
    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="@Width" Height="@Height" />
}

@code
{
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    LineDataset<DoubleWrapper> _LineDataSet;
    [Parameter] public Int32? Width { get; set; } = 600;
    [Parameter] public Int32? Height { get; set; } = 200;
    [Parameter] public LineChartModel Data { get; set; } = new LineChartModel();


    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                MaintainAspectRatio = false,
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                },
                Legend = new Legend
                {
                    Position =ChartJs.Blazor.ChartJS.Common.Enums.Position.Top,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = false,
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _lineConfig.Data.Labels = Data.label.ToList();

        await Task.Delay(500);

        foreach (var d in Data.data)
        {
            _LineDataSet = new LineDataset<DoubleWrapper>
            {
                BackgroundColor = d.color,
                BorderColor = d.color,
                Label = d.label,
                BorderWidth = 3,
                PointRadius = 4,
                PointBorderWidth = 0,
                SteppedLine = SteppedLine.False

            };
            _LineDataSet.AddRange(d.data.Wrap());
            _lineConfig.Data.Datasets.Add(_LineDataSet);
        }

    }

}