@page "/productcategory/new"
@page "/productcategory/edit/{id:int}"

@inherits PageCore
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="@(id > 0? lang["Edit Product Category & Group"] : lang["New Product Category & Group"])"></Title>
    <PageContainer roles="@gv.GetRole("product_category_group")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @(id > 0? lang["Edit Product Category & Group"] : lang["New Product Category & Group"])
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">

            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@Save_Click"  @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="@lang["Product Group"]">
                        <TextInput @bind-text="@model.product_group_code" label="@lang["Product Group Code"]" is_read_only="@model.is_built_in" />
                        <TextInput @bind-text="@model.product_group_en" label="@lang["Product Group Name En"]" is_read_only="@model.is_built_in">
                            <ValidationMessage For="@(() => model.product_group_en )" />
                        </TextInput>
                        <TextInput @bind-text="@model.product_group_en" label="@lang["Product Group Name Kh"]" is_read_only="@model.is_built_in" />
                        <SelectStatus @bind-selected_value="@model.status" />

                    </UIContainerBox>
                    <UIContainerBox Title="@lang["Product Category"]" is_show_add_button="true" OnAddClick="@(()=>AddProductCategory())">
                        <div class="uk-overflow-auto">
                            <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover  ">
                                <tr>
                                    <ThAuto>@lang["Category Name En"]</ThAuto>
                                    <ThAuto>@lang["Category Name Kh"]</ThAuto>
                                    <th>@lang["Tax 1 Rate"]</th>
                                    <th>@lang["Tax 2 Rate"]</th>
                                    <th>@lang["Tax 3 Rate"]</th>
                                    <ThCenter>@lang["Status"]</ThCenter>
                                </tr>
                                <ViewEmptyTemplate is_view="model.product_categories.Any()" colspan="4">
                                    @foreach (var s in model.product_categories.Where(r => r.is_deleted == false).ToList())
                                    {
                                        <tr>
                                            <td><TextInput label="" placeholder="@lang["Product Category Name En"]" @bind-text="@s.product_category_en" /></td>
                                            <td><TextInput label="" placeholder="@lang["Product Category Name Kh"]" @bind-text="@s.product_category_kh" /></td>
                                            <td><SelectRatePercentage @bind-selected_value="@s.tax_1_rate" is_inline="true" width="90px"/></td>
                                            <td><SelectRatePercentage @bind-selected_value="@s.tax_2_rate" is_inline="true" width="90px"/></td>
                                            <td><SelectRatePercentage @bind-selected_value="@s.tax_3_rate" is_inline="true" width="90px"/></td>
                                            <td class="uk-text-center">
                                                <div>
                                                    <LabelActive OnClick="@(()=>ChangeProductCategoryStatus(s))" is_visible="@s.status" />
                                                    <LabelInActive OnClick="@(()=>ChangeProductCategoryStatus(s))" is_visible="@(!s.status)" />
                                                    <Icon icon="delete" OnClick="@(()=>DeleteProductCategory(s))" />
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </ViewEmptyTemplate>
                            </table>
                        </div>
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="productcategory"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
  
}

@code{
    [Parameter] public int id { get; set; }
    ProductGroupModel model = new ProductGroupModel();

    List<ProductCategoryModel> product_category = new List<ProductCategoryModel>();
    string ControllerApi = "ProductGroup";

    public string api_url
    {
        get
        {
            string query = ControllerApi;
            query = query + $"({id})?";
            query = query + "$expand=product_categories($select=id,product_category_en,product_category_kh,status,tax_1_rate,tax_2_rate,tax_3_rate;$expand=products($select=id;$top=1);$filter=is_deleted eq false)";

            return query;

        }
    }



    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }



    async Task LoadData()
    {

        is_loading_data = true;
        if (id > 0)
        {
            var resp = await http.ApiGet(api_url);
            if (resp.IsSuccess)
            {

                model = JsonSerializer.Deserialize<ProductGroupModel>(resp.Content.ToString());

            }
        }

        is_loading_data = false;

    }


    void OnclickProductCategory(ProductCategoryModel st)
    {
        model.product_categories.Add(st);
    }

    async Task Save_Click(EditContext editContext)
    {
        ProductGroupModel d = model;
        if (!is_saving)
        {
            is_saving = true;

            Object obj = new Object();
            ProductGroupModel save_product_group = JsonSerializer.Deserialize<ProductGroupModel>(JsonSerializer.Serialize(d));
            if (save_product_group.status == false)
            {
                if (save_product_group.product_categories.FirstOrDefault().products.Any())
                {
                    toast.Add(lang["Cannot change status to inactive."], MatBlazor.MatToastType.Warning);
                    is_saving = false;
                    return;
                }
            }


            save_product_group.product_categories.ForEach(r => r.products = null);
            var res = await http.ApiPost($"{ControllerApi}/save", save_product_group);
            if (res.IsSuccess)
            {
                obj = JsonSerializer.Deserialize<ProductGroupModel>(res.Content.ToString());

                toast.Add("Saving successfully", MatToastType.Success);
                nav.NavigateTo($"productcategory");
            }
            else
            {
                is_saving = false;
                toast.Add(res.Content.ToString(), MatToastType.Warning);
            }

            is_saving = false;
        }
    }


    void AddProductCategory()
    {
        model.product_categories.Add(new ProductCategoryModel()
        {
            product_category_en = "Category " + (model.product_categories.Count()+1),
            product_category_kh = "Category " + (model.product_categories.Count() + 1),

        }) ;

    }

    void DeleteProductCategory(ProductCategoryModel s)
    {
        if(s.id == 0)
        {
            model.product_categories.Remove(s);
        }
        else
        {
            if (s.products.Any())
            {
                toast.Add(lang["This category was assigned to product."], MatBlazor.MatToastType.Warning);
            }
            else
            {
                s.is_deleted = true;
            }

        }
    }

    void ChangeProductCategoryStatus(ProductCategoryModel s)
    {
        if (s.id == 0)
        {
            s.status = !s.status;
        }
        else
        {
            if (s.products.Any())
            {
                toast.Add(lang["This category was assigned to product."], MatBlazor.MatToastType.Warning);
            }
            else
            {
                s.status = !s.status;
            }
        }
    }
}
