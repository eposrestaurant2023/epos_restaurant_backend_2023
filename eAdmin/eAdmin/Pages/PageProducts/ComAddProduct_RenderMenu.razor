@inject IHttpService http;
@inject IStringLocalizer<Resource> lang
<div>

    @if (current_menu_id > 0)
    {
        <h3 class="title">@menu_path(current_menu_id)</h3>
    }

    @if (menus.Any())
    {


        <div class="ribbons-wrapper uk-grid-small" uk-grid>

            @if (current_menu_id > 0)
            {
                <div class="uk-width-1-4" style="position: relative;">
                    <div class="box cp" style="background: #ececec;text-align:center;" @onclick="@(()=>OnBack())">
                        <div class="pos_icon_back">
                            <Icon icon="reply " icon_color="#333333" size="43px" />
                            <div>Back</div>
                        </div>
                    </div>
                </div>
            }


            @foreach (var m in GetMenus)
            {
                <div style="position:relative;" class="uk-width-1-4">
                    <div class="icon_edit">
                        <Icon icon="edit" icon_color="@m.text_color" @onclick="@(() => EditMenu(m))" />
                        @if (!IsMenuSelected(m))
                        {
                            <button type="button">
                                <Icon icon="check_box_outline_blank" icon_color="@m.text_color" @onclick="@(() => OnSelectMenu(m))" />
                            </button>
                        }
                        else
                        {
                            <button type="button">
                                <Icon icon="check_box" icon_color="@m.text_color" @onclick="@(() => OnUnSelectMenu(m))" />
                            </button>
                        }
                    </div>
                   @if (!IsMenuSelected(m))
                   {

                   
                        <div @onclick="@(() => MenuClick(m))" class="box cp" style="background:@m.background_color;color:@m.text_color;">
                            <div>
                                <div style="text-align: center; align-items: center; padding-top: 47px;">@m.menu_name_en (@menus.Where(r => r.parent_id == m.id).Count().ToString("00"))</div>
                            </div>
                        </div>
                  }else { 
                        <div @onclick="@(() => MenuClick(m))" class="box cp" style="background:@m.background_color;color:@m.text_color; border:1px solid #cf564d;">
                            <div>
                                <div style="text-align: center; align-items: center; padding-top: 47px;">@m.menu_name_en (@menus.Where(r => r.parent_id == m.id).Count().ToString("00"))</div>
                            </div>
                        </div>
                 }
                </div>
            }

            @if (current_menu_id > 0)
            {


                <div class="uk-width-1-4" style="position: relative;">
                    <div class="box cp" style="background: #ececec;text-align:center;" @onclick="@(()=>AddSubMenu())">
                        <div class="pos_icon_back">
                            <Icon icon="add" icon_color="#333333" size="43px" />
                            <div>Add</div>
                        </div>
                    </div>
                </div>
            }
        </div>

    }
    else
    {
        <ComEmptyTemplate empty="@lang["There is no root menu."]" padding_top_bottom="25px" />
    }
    <hr />

    <Button OnClick="@AddRootMenu" class_name="uk-button uk-button-default button-large ">Add New Root Menu</Button>

</div>

@if (show_add_menu)
{
    <ComAddMenu is_opened="@show_add_menu" menu="@menu" OnCancel="@(()=>show_add_menu=false)" menuChanged="@SaveMenu" />

}

@code {
    [Parameter] public Guid business_branch_id { get; set; }
    List<MenuModel> menus = new List<MenuModel>();
    [Parameter] public EventCallback<MenuModel> OnMenuSelected { get; set; }

    [Parameter] public List<ProductMenuModel> selected_menus { get; set; } 

    bool is_loading;

    public int current_menu_id { get; set; }
    public int parent_menu_id { get; set; }


    MenuModel menu = new MenuModel();

    public List<MenuModel> GetMenus
    {
        get
        {
            if (current_menu_id == 0)
            {
                return menus.Where(r => r.parent_id == null && r.is_deleted == false).ToList();
            }
            else
            {
                return menus.Where(r => r.parent_id == current_menu_id && r.is_deleted == false).ToList();
            }
        }
    }


    bool show_add_menu;


    public string menu_path(int menu_id)
    {

        if (menu_id > 0)
        {
            List<string> str_menu_names = new List<string>();
            int id = menu_id;
            while (id > 0)
            {
                var d = menus.Where(r => r.id == id).FirstOrDefault();
                str_menu_names.Add(d.menu_name_en);

                if (d.parent_id == null)
                {
                    id = 0;
                }else
                {
                    id = Convert.ToInt32(d.parent_id);
                }

            }

            if (str_menu_names.Count() > 0)
            {
                string path = ""; ;
                str_menu_names.Reverse();
                foreach (var m in str_menu_names)
                {
                    path = path +  m + " / ";
                }
                if (path.Length > 0)
                {
                    return path.Substring(0, path.Trim().Length - 1);
                }

            }
        }
        return "";
    }


    bool IsMenuSelected(MenuModel m)
    {
        return selected_menus.Where(r => r.menu_id == m.id && r.is_deleted == false).Any();
    }


    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        var resp = await http.ApiGetOData($"Menu?$filter=business_branch_id eq {business_branch_id} and is_deleted eq false");
        if (resp.IsSuccess)
        {
            menus = JsonSerializer.Deserialize<List<MenuModel>>(resp.Content.ToString());
            SetMenuActive();
        }
        is_loading = false;
    }

    void SetMenuActive()
    {
        foreach (var m in selected_menus)
        {
            menus.Where(r => r.id == m.id).ToList().ForEach(r => r.is_selected = true);
        }
    }

    async Task OnSelectMenu(MenuModel m)
    {
        m.is_selected = true;
        await OnMenuSelected.InvokeAsync(m);

    }
    async Task OnUnSelectMenu(MenuModel m)
    {
        m.is_selected = false;
        await OnMenuSelected.InvokeAsync(m);

    }


    void OnBack()
    {
        current_menu_id = parent_menu_id;
        if (current_menu_id > 0)
        {
            var d = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
            if (d.parent_id == null)
            {
                parent_menu_id = 0;
            }
            else
            {
                parent_menu_id = Convert.ToInt32(d.parent_id);
            }
        }
    }

    void AddRootMenu()
    {
        menu = new MenuModel();
        menu.parent = null;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;
    }
    void AddSubMenu()
    {
        menu = new MenuModel();
        menu.parent = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        menu.parent_id = menu.parent.id;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;

    }

    void SaveMenu(MenuModel m)
    {
        if (menu.id ==0)
        {
            menu = m;
            menus.Add(m);

        }else
        {
            menu = m;
        }
        menu.menu_path = menu_path(m.id);
        show_add_menu = false;
    }

    void EditMenu(MenuModel m)
    {

        menu = m;
        menu.parent = menus.Where(r => r.id == m.parent_id).FirstOrDefault();
        show_add_menu = true;
    }
    void MenuClick(MenuModel m)
    {
        current_menu_id = m.id;
        if (m.parent_id == null)
        {
            parent_menu_id = 0;
        }
        else
        {
            parent_menu_id = Convert.ToInt32(m.parent_id);
        }
    }

}
