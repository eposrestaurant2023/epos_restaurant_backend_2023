@page "/productcategory"
@inject IJSRuntime js
@inherits PageCore;
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Product Category & Group"></Title>
    <PageContainer roles="@gv.GetRole("product_category_group")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Product Category & Group"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <LinkButton url="productcategory/new" icon="add" background="uk-button-primary" Class_Name="button-create button-large">@lang["New Category & Group"]</LinkButton>
            </HeaderRight>
        </PageHeader>
            <PageBody>
                <UIGridCenter>
                    <Tab>
                        <TabHeader>
                            <TabHeaderItem OnClick="@(()=> { is_view_deleted = true; })">@lang["All Product Groups"]</TabHeaderItem>
                            <TabHeaderItem OnClick="@(()=> { is_view_deleted = false; })">@lang["Deleted Product Groups"]</TabHeaderItem>
                        </TabHeader>
                    </Tab>
                    @foreach (var d in models.Where(r => r.is_deleted == is_view_deleted).ToList())
                    {
                        <div class="container-layout">
                            <div class="title-header">
                                <div class="uk-panel">
                                    <div class="uk-float-left">
                                        <span>
                                            @d.product_group_en
                                        </span>
                                    </div>
                                    <Column ClassName="uk-float-right">
                                        <div>
                                            @if (!is_view_deleted)
                                            {
                                                <LabelActive OnClick="@(()=>Activebutton(d))" is_visible="@d.status" is_loading="@d.is_change_status" ClassName="cp" />
                                                <LabelInActive OnClick="@(()=>Activebutton(d))" is_visible="@(!d.status)" is_loading="@d.is_change_status" ClassName="cp" />
                                                <span style="margin-right:5px;">
                                                    <Icon icon="delete" OnClick="@(()=>click_delete(d))" />
                                                </span>
                                                <span>
                                                    <a href="@($"productcategory/edit/{d.id}")">
                                                        <Icon icon="edit" />
                                                    </a>
                                                </span>
                                            }
                                            else
                                            {
                                                <LabelDeleted/>
                                                <Icon icon="refresh" icon_color="" OnClick="@(()=>RestoreGroupClick(d))"/>
                                            }

                                        </div>
                                    </Column>
                                </div>
                            </div>

                            <hr />
                            <div>
                                <Tab>
                                    <TabHeader>
                                        <TabHeaderItem OnClick="@(()=> { d.is_view_deleted_category = false; })">@lang["All Product Categories"]</TabHeaderItem>
                                        <TabHeaderItem OnClick="@(()=> { d.is_view_deleted_category = true; })">@lang["Deleted Product Categories"]</TabHeaderItem>
                                    </TabHeader>
                                    <div>
                                        <table class="uk-table cus_hearder_table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                            <tr>
                                                <Th>@lang["Product Category Name En"]</Th>
                                                <Th>@lang["Product Category Name Kh"]</Th>
                                                <ThCenter>@lang["Status"]</ThCenter>
                                            </tr>

                                            @foreach (var s in d.product_categories.Where(r=>r.is_deleted == d.is_view_deleted_category))
                                            {
                                                <tr>
                                                    <td>@s.product_category_en</td>
                                                    <td>@s.product_category_kh </td>
                                                    <TdCenter>
                                                        @if (!s.is_deleted)
                                                        {
                                                            <LabelActive is_visible="@s.status" is_loading="@s.is_change_status" />
                                                            <LabelInActive is_visible="@(!s.status)" is_loading="@s.is_change_status" />
                                                        }
                                                        else
                                                        {
                                                            <LabelDeleted/>
                                                            <Icon icon="refresh" icon_color="" OnClick="@(()=>RestoreCategoryClick(s.id))" />
                                                        }

                                                    </TdCenter>
                                                </tr>
                                            }
                                        </table>
                                    </div>
                                </Tab>
                                
                            </div>
                        </div>
                    }
                </UIGridCenter>
            </PageBody>
    </PageContainer>
}

@code{
    List<ProductGroupModel> models = new List<ProductGroupModel>();
    List<ProductCategoryModel> product_category = new List<ProductCategoryModel>();
    string ControllerApi = "ProductGroup";
    bool is_view_deleted = false;


    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }



    async Task LoadData(string api_url = "")
    {

        is_loading_data = true;

        if (string.IsNullOrEmpty(api_url))
        {

            api_url = $"{ControllerApi}?$expand=product_categories&$filter=is_built_in eq false";
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {

            models = JsonSerializer.Deserialize<List<ProductGroupModel>>(resp.Content.ToString());

        }
        is_loading_data = false;

    }


    async Task Activebutton(ProductGroupModel b)
    {

        b.is_change_status = true;
        await Task.Delay(1000);
        b.status = !b.status;

        var resp = await http.ApiPost($"{ControllerApi}/Save", b);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
        }

        b.is_change_status = false;

    }
    async Task click_delete(ProductGroupModel d)
    {
        d.is_loading = true;
        if (await js.Confirm("Product Group", "Are you sure you want to delete this this record?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(ControllerApi + "/delete", d.id);

            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add("Delete Product Group successfully", MatToastType.Success);
            }
            else
            {
                toast.Add("Delete Product Group fail", MatBlazor.MatToastType.Warning);
            }


        }
        d.is_loading = false;
    }

    async Task RestoreGroupClick(ProductGroupModel _g)
    {
        is_loading = true;
        if (await js.Confirm(lang["Restore Product Group"], lang["Are you sure you want to restore this this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(ControllerApi + "/delete", _g);

            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Restore Product Group successfully"], MatToastType.Success);
            }
            else
            {
                toast.Add(lang["Restore Product Group fail"], MatBlazor.MatToastType.Warning);
            }


        }
        is_loading = false;
    }

    async Task RestoreCategoryClick(int id)
    {
        is_loading = true;
        if (await js.Confirm(lang["Restore Product Category"], lang["Are you sure you want to restore this this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("productcategory/delete/" + id);

            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Restore Product Category successfully"], MatToastType.Success);
            }
            else
            {
                toast.Add(lang["Restore Product Category fail"], MatBlazor.MatToastType.Warning);
            }


        }
        is_loading = false;
    }

}
