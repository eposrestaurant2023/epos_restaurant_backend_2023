@inject IStringLocalizer<Resource> lang
@inject IHttpService http
<UIContainerBox Title="@(!is_production_product? lang["Inventory / Ingredient Product"]:lang["Inventory / Production Product"])">
    @if (is_loading)
    {
        <Spinner/>
    }
    else
    {
    <ComInputCheckBox @bind-value="@is_inventory_product" label="@lang["Is Inventory Product"]" is_read_only="@(model.is_product_has_inventory_transaction)" />
    @if (gv.project_has_advance_inventory)
    {
        <Com is_visible="@(!is_ingredient)">
            <ComInputCheckBox @bind-value="@model.is_ingredient_product" label="@lang["Is Ingredient"]" />

        </Com>
    }
    @if (!is_ingredient)
    {
        
        <ComInputCheckBox @bind-value="@model.is_production_product" label="@lang["Is Use in Production"]" />
    }

    <Com is_visible="@(model.is_inventory_product)">
        @if (model.stock_location_products != null && model.stock_location_products.Any())
        {
            <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                <thead>
                    <tr>
                        <ThAuto>@lang["Stock Location"]</ThAuto>
                        @if (model.id > 0)
                        {
                            <ThCenter>@lang["QTY on Hand"]</ThCenter>
                        }
                        <ThCenter>@lang["QTY"]</ThCenter>
                        <ThCenter>@lang["Min QTY"]</ThCenter>
                        <ThCenter>@lang["Max QTY"]</ThCenter>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var p in model.stock_location_products.OrderByDescending(r => r.stock_location_id).ToList())
                    {
                        if (gv.stock_location_by_role.Where(r => r.id == p.stock_location_id).Any())
                        {
                            <tr>
                                <td>
                                    <div>
                                        @gv.stock_locations.Where(r => r.id == p.stock_location_id).FirstOrDefault().stock_location_name
                                        <Label Text="@gv.stock_locations.Where(r => r.id == p.stock_location_id).FirstOrDefault().business_branch?.business_branch_name_en" />
                                    </div>
                                </td>
                                @if (model.id > 0)
                                {
                                    <TdCenter>@p.quantity.ToString(gv.quantity_format)</TdCenter>
                                }

                                <td>
                                    @if (model.is_product_has_inventory_transaction)
                                    {
                                        <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" text="@p.initial_quantity" text_format="@gv.quantity_format" width="100px" is_read_only="true" />
                                    }
                                    else
                                    {
                                        <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.initial_quantity" text_format="@gv.quantity_format" width="100px" />
                                    }

                                </td>
                                <td>
                                    <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.min_quantity" text_format="@gv.quantity_format" width="100px" />
                                </td>
                                <td>
                                    <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.max_quantity" text_format="@gv.quantity_format" width="100px" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td>@lang["Total Quantity"]</td>
                        @if (model.id > 0)
                        {
                            <td class="uk-text-center">@model.stock_location_products.Sum(r => r.quantity).ToString(gv.quantity_format)</td>
                        }
                        <td class="uk-text-center">@model.stock_location_products.Sum(r => r.initial_quantity).ToString(gv.quantity_format)</td>
                        <td colspan="2"></td>
                    </tr>
                </tfoot>
            </table>
        }

        <div class="defualt-stock-location">
            <div class="uk-text-bold uk-margin-small-bottom">@lang["Defualt Stock Location"]</div>
            <Tab>
                <TabHeader>
                    @foreach (var b in gv.business_branch_by_role)
                    {

                        if (gv.business_branch_has_inventory(b.id.ToString()))
                        {
                            <TabHeaderItem>@b.business_branch_name_en</TabHeaderItem>
                        }
                    }
                </TabHeader>
                <TabBody>
                    @foreach (var b in gv.business_branch_by_role)
                    {
                        if (gv.business_branch_has_inventory(b.id.ToString()))
                        {
                            <TabItem>
                                <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                    <tr>
                                        <ThAuto>Station</ThAuto>
                                        <th>Stock location</th>
                                    </tr>
                                    @if (model.default_stock_location_products != null ? model.default_stock_location_products.Where(r => r.business_branch_id == b.id).Any() : false)
                                    {
                                        @foreach (var d in model.default_stock_location_products.Where(r => r.business_branch_id == b.id).OrderBy(r => r.station.station_name_en).ToList())
                                        {
                                            @if (d.station != null)
                                            {
                                                <tr>
                                                    <td>@d.station?.station_name_en</td>
                                                    <td>
                                                        <SelectStockLocation label="" show_empty="true" @bind-selected_value="@d.stock_location_id" business_branch_id="@b.id" empty_text="Select Defualt Stock Location" width="260px" />
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="3">
                                                <div class="uk-text-center">
                                                    <Icon icon="search" />
                                                    <br />
                                                    <p>There is no station</p>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </TabItem>
                        }
                    }
                </TabBody>
            </Tab>

        </div>

    </Com>
    }
</UIContainerBox>
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public ProductModel model { get; set; }

    [Parameter] public EventCallback<ProductModel> modelChanged { get; set; }
    [Parameter] public bool is_ingredient { get; set; } = false;
    [Parameter] public bool is_production_product { get; set; } = false;

    List<StockLocationProductModel> stock_locatin_products = new List<StockLocationProductModel>();

    bool is_loading;

    private bool _is_inventory_product;

    public bool is_inventory_product
    {
        get
        {
            _is_inventory_product = model.is_inventory_product;
            if (is_production_product)
            {
                _is_inventory_product = is_production_product;
            }
            return _is_inventory_product;
        }
        set
        {
            if (value)
            {
                if (!model.stock_location_products.Any())
                {
                    foreach (var d in gv.stock_locations)
                    {
                        model.stock_location_products.Add(new StockLocationProductModel() { stock_location_id = d.id, stock_location = d });
                    }
                }

            }
            else
            {
                if (model.id == 0)
                {
                    model.stock_location_products.Clear();

                }
                else
                {
                    model.stock_location_products.RemoveAll(r => r.id == 0);

                }
            }
            GenerateDefaultStockLocation(value);
            model.is_inventory_product = value;
            _is_inventory_product = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {

       await  LoadData();
        if (is_production_product)
        {

            is_inventory_product = true;
            //if (!model.stock_location_products.Any())
            //{
            //    foreach (var d in gv.stock_locations)
            //    {
            //        model.stock_location_products.Add(new StockLocationProductModel() { stock_location_id = d.id, stock_location = d });
            //    }
            //}



        }

    }

    void GenerateDefaultStockLocation(bool is_checked)
    {

        if (is_checked)
        {
            if (model.default_stock_location_products.Count() == 0)
            {
                foreach (var o in gv.outlets)
                {
                    foreach (var s in o.stations)
                    {
                        var st = gv.stock_locations.Where(r => r.business_branch_id == o.business_branch_id);
                        if (st.Count() > 0)
                        {
                            StockLocationModel default_st = new StockLocationModel();

                            if (st.Where(r => r.is_default).Any())
                            {
                                default_st = st.Where(r => r.is_default).FirstOrDefault();
                            }
                            else
                            {
                                default_st = st.FirstOrDefault();
                            }

                            DefaultStockLocationProductModel d = new DefaultStockLocationProductModel();
                            d.station_id = s.id;
                            d.station = s;
                            d.business_branch_id = o.business_branch_id;
                            d.stock_location_id = default_st.id;

                            model.default_stock_location_products.Add(d);
                        }
                    }
                }
            }
        }
        else
        {
            model.default_stock_location_products.Clear();
        }

    }

    async Task OnSelectVendor(VendorModel v)
    {
        model.vendor_id = v.id;
        await modelChanged.InvokeAsync(model);
    }


    async Task LoadData()
    {

        if (model.id > 0)
        {
            is_loading = true;
            string api_url = $"StockLocationProduct?$expand=stock_location&$filter=is_deleted eq false and product_id eq {model.id}";
            var resp = await http.ApiGetOData(api_url);
            if (resp.IsSuccess)
            {
                stock_locatin_products = JsonSerializer.Deserialize<List<StockLocationProductModel>>(resp.Content.ToString());
                model.stock_location_products = stock_locatin_products;
                await modelChanged.InvokeAsync(model);
            }
            is_loading = false;
        }
    }


}
