@inject IStringLocalizer<Resource> lang
<UIContainerBox Title="@lang["Inventory / Ingredient Product"]">
    <ComInputCheckBox @bind-value="@is_inventory_product" label="@lang["Is Inventory Product"]" is_read_only="@(model.is_product_has_inventory_transaction)"/>
    <Com is_visible="@(is_show_ingredient)">
        <ComInputCheckBox @bind-value="@model.is_ingredient_product" label="@lang["Is Ingredient"]" />
    </Com>
     
    <Com is_visible="@(model.is_inventory_product)"> 
        @if(model.stock_location_products != null && model.stock_location_products.Any()){
        <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
            <thead>
                <tr>
                    <ThAuto>@lang["Stock Location"]</ThAuto>
                    @if (model.id > 0)
                    {
                        <ThCenter>@lang["QTY on Hand"]</ThCenter>
                    }
                    <ThCenter>@lang["QTY"]</ThCenter>
                    <ThCenter>@lang["Min QTY"]</ThCenter>
                    <ThCenter>@lang["Max QTY"]</ThCenter>
                </tr>
            </thead>
            <tbody>

                @foreach (var p in model.stock_location_products)
                {
                    <tr>
                        <td>
                            <div>
                                @gv.stock_locations.Where(r => r.id == p.stock_location_id).FirstOrDefault().stock_location_name
                                <Label Text="@gv.stock_locations.Where(r=>r.id==p.stock_location_id).FirstOrDefault().business_branch?.business_branch_name_en" />
                            </div>
                        </td>
                        @if (model.id > 0)
                        {
                            <TdCenter>@p.quantity.ToString(gv.quantity_format)</TdCenter>
                        }  
                            
                        <td>
                            @if (model.is_product_has_inventory_transaction)
                            {
                                <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" text="@p.initial_quantity" text_format="@gv.quantity_format" width="100px" is_read_only="true" />
                            }
                            else
                            {
                                <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.initial_quantity" text_format="@gv.quantity_format" width="100px" />
                            }

                        </td>
                        <td>
                            <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.min_quantity" text_format="@gv.quantity_format" width="100px" />
                        </td>
                        <td>
                            <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.max_quantity" text_format="@gv.quantity_format" width="100px" />
                        </td>
                    </tr>

                }
            </tbody>
            <tfoot>
                <tr>
                    <td>@lang["Total Quantity"]</td>
                    @if (model.id > 0)
                    {
                        <td class="uk-text-center">@model.stock_location_products.Sum(r => r.quantity).ToString(gv.quantity_format)</td>
                    }
                    <td class="uk-text-center">@model.stock_location_products.Sum(r => r.initial_quantity).ToString(gv.quantity_format)</td>

                    <td colspan="2"></td>
                </tr>
            </tfoot>
        </table>
        }
    </Com>
</UIContainerBox>
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public ProductModel model { get; set; }
    [Parameter] public EventCallback<ProductModel> modelChanged { get; set; }
    [Parameter] public bool is_show_ingredient { get; set; } = true;


    private bool _is_inventory_product;

    public bool is_inventory_product
    {
        get {
            _is_inventory_product = model.is_inventory_product;
            return _is_inventory_product; }
        set {
            if (value)
            {
                if ( !model.stock_location_products.Any())
                {

                    foreach (var d in gv.stock_locations)
                    {
                        model.stock_location_products.Add(new StockLocationProductModel() { stock_location_id = d.id });
                    }
                }

            }else
            {
                if (model.id == 0 )
                {
                    model.stock_location_products.Clear();
                }
                else {
                    model.stock_location_products.RemoveAll(r => r.id == 0);
                }
            }

            model.is_inventory_product = value;
            _is_inventory_product = value; }
    }



    async Task OnSelectVendor(VendorModel v)
    {
        model.vendor_id = v.id;
        await modelChanged.InvokeAsync(model);
    }
}
