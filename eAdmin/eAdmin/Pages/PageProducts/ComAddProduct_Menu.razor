<UIContainerBox Title="Menus">
    @if (gv.bussiness_branches.Count() == 1)
    {
        <ComAddProduct_RenderMenu business_branch_id="@gv.bussiness_branches.FirstOrDefault().id" OnMenuSelected="@OnMenuSelected"    selected_menus="@model.product_menus" />
    }
    else
    {
        <Tab>
            <TabHeader>
                @foreach (var b in gv.bussiness_branches)
                {
                    <TabHeaderItem>@b.business_branch_name_en</TabHeaderItem>
                }
            </TabHeader>
            <TabBody>
                @foreach (var b in gv.bussiness_branches)
                {
                <TabItem>
                    <h4>Selected Menu</h4>
                    <div class="box_select_menu">
                        @if (model.product_menus.Any())
                        {
                         foreach (var m in model.product_menus.Where(r => r.is_deleted == false && r.menu.business_branch_id == b.id))
                        {
                            <div class="uk-flex uk-flex-inline uk-flex-between" style="width:100%;margin-bottom:10px;">
                                <div> 
                                     <Icon icon="check_box"/>
                                   
                                     <span>@m.menu?.menu_path</span>
                                </div>
                               
                                <div><Icon icon="delete" OnClick="@(() => OnDeleteMenu(m))"/></div>
                            </div>
                            }
                        }else
                        {
                            <ComEmptyTemplate empty="There is no selected menu." padding_top_bottom="20px"/>
                        }
                    </div>
                    <ComAddProduct_RenderMenu business_branch_id="@b.id" OnMenuSelected="@OnMenuSelected"   selected_menus="@model.product_menus" />


                </TabItem>
                }
            </TabBody>
        </Tab>

    }



</UIContainerBox>
@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }

    [Parameter] public ProductModel model { get; set; }
    [Parameter] public EventCallback<ProductModel> modelChanged { get; set; }



    async Task OnMenuSelected(MenuModel m)
    {
        if (m.is_selected)
        {
            model.product_menus.Add(new ProductMenuModel() { menu = m, menu_id = m.id });
        }else
        {
            var d = model.product_menus.Where(r => r.menu_id == m.id);
            if (d.Any())
            {
                OnDeleteMenu(d.FirstOrDefault());
            }

        }


        await modelChanged.InvokeAsync(model);


    }


    void OnDeleteMenu(ProductMenuModel m)
    {
        if(m.id == 0)
        {
            model.product_menus.Remove(m);
        }else
        {
            m.is_deleted = true;
        }
    }

}
