@page "/modifier/new"
@page "/modifier/edit/{id}"
@page "/modifier/clone/{clone_id}"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="@lang[title]"></Title>
    <PageContainer roles="@gv.GetRole($"{(!string.IsNullOrEmpty(id) ? "modifier_edit" : "modifier_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang[title]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true" />
        </PageHeader>
        <EditForm Model="@modifier" OnValidSubmit="@Save_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox>
                        <TextInput label="@lang["Name En"]" @bind-text="@modifier.modifier_name">
                            <ValidationMessage For="@(()=>modifier.modifier_name)" />
                        </TextInput>
                        <SelectStatus @bind-selected_value="@modifier.status" />
                    </UIContainerBox>
                </UIGridCenter>
                <UIGridCenter>
                    <UIContainerBox Title="@lang["Ingredient"]">
                        <eAdmin.Pages.PageProducts.PageModifiers.ComAddIngredient model="@modifier"/>
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter> 
                    <ComSavingFormButton is_loading="@is_saving" is_show_save_new="true" OnSaveNew="@(()=>is_save_and_new = true)" is_show_cancel_action="true" OnCancel="@OnCancel"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="@lang["Modifier"]">@error_text</Error>
}

@code{
    [Parameter] public string clone_id { get; set; }
    [Parameter] public string id { get; set; }
    string controller_api = "Modifier";
    ModifierModel modifier = new ModifierModel();

    bool is_save_and_new = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    async Task LoadData()
    {
        is_loading = true;
        if (!string.IsNullOrEmpty(clone_id) || !string.IsNullOrEmpty(id))
        {
            var resp = await http.ApiGet($"{controller_api}({(!string.IsNullOrEmpty(id) ? Guid.Parse(id) : clone_id)})?$expand=modifier_ingredients($expand=ingredient,unit)");
            if (resp.IsSuccess)
            {
                modifier = JsonSerializer.Deserialize<ModifierModel>(resp.Content.ToString());
            }
            if (!string.IsNullOrEmpty(clone_id))
            {
                title = $"{lang["Clone"]} : {modifier.modifier_name}";
                modifier.id = Guid.Empty;
                modifier.is_deleted = false;
                modifier.status = true;
                modifier.created_date = DateTime.Now;

            }
            else
            {
                title = $"{lang["Edit"]} : {modifier.modifier_name}";
            }
        }
        else
        {
            title = lang["Add New Modifier"];
            modifier = new ModifierModel();
        }
        is_loading = false;
    }

    async Task Save_Click()
    {
        is_saving = true;
        ModifierModel save_model = JsonSerializer.Deserialize<ModifierModel>(JsonSerializer.Serialize(modifier));
        if (!string.IsNullOrEmpty(clone_id))
        {
            save_model.id = Guid.Empty;
            save_model.created_date = DateTime.Now;
            save_model.created_by = gv.current_login_user.full_name;
        }

        //save_model.product_modifiers.Where(r => r.product_id > 0).ToList().ForEach(r=>r.product = null);
        // insert new product ingredient
        save_model.modifier_ingredients.Where(r => r.ingredient_id == 0).ToList().ForEach(r => r.ingredient.unit = null);
        save_model.modifier_ingredients.Where(r=>r.ingredient_id > 0).ToList().ForEach(r => r.ingredient = null);

        save_model.modifier_ingredients.ForEach(r => r.modifier = null);
        save_model.modifier_ingredients.ForEach(r => r.unit = null); 
        var resp = await http.ApiPost("Modifier/Save", save_model);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);
            save_model = JsonSerializer.Deserialize<ModifierModel>(resp.Content.ToString());
            if (is_save_and_new)
            {
                modifier = new ModifierModel();
                modifier.modifier_ingredients = new List<ModifierIngredientModel>();
                nav.NavigateTo("modifier/new");
                await LoadData();
            }
            else
            {
                nav.NavigateTo("modifier/" + save_model.id);
            }
        }
        else {
            toast.Add(lang["Save data fail"], MudBlazor.Severity.Warning);
        }
        is_saving = false;
    }

    void OnCancel() {
        if (!string.IsNullOrEmpty(id))
        {
            nav.NavigateTo("modifier/" + id);
        }else
        {
            nav.NavigateTo("modifier");
        }

    }
}
