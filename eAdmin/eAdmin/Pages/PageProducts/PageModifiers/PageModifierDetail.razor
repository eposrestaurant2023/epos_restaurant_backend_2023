@page "/modifier/{id:int}"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="Modifier Detail"></Title>
    <PageContainer roles="@gv.GetRole("modifier_view")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @modifier.modifier_name
                        <LabelDeleted is_visible="@modifier.is_deleted" />
                        <LabelActive is_visible="@(!modifier.is_deleted && modifier.status)" is_loading="@modifier.is_change_status" />
                        <LabelInActive is_visible="@(!modifier.is_deleted && !modifier.status)" is_loading="@modifier.is_change_status" />
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <Button roles="@gv.GetRole("modifier_edit")" icon="edit" title="Edit" OnClick="@(()=>nav.NavigateTo($"modifier/edit/{modifier.id}"))" is_visible="@(!modifier.is_deleted)" />
                <ComAttachFileButton RoleAdd="@gv.GetRole("modifier_add")"
                                     RoleEdit="@gv.GetRole("modifier_edit")"
                                     RoleDelete="@gv.GetRole("modifier_delete")"
                                     ApiFilter="@($"modifier_id eq {id} ")"
                                     File="@(new AttachFilesModel() { modifier_id =  id })"
                                     IsVisible="@(!modifier.is_deleted)" />
                <AddButton url="modifier/new" roles="@gv.GetRole("modifier_add")">New Modifier</AddButton>
                <MoreButton is_loading="@(modifier.is_loading ||modifier.is_change_status || modifier.is_deleting || modifier.is_restoring)">
                    <MoreButtonItem roles="@gv.GetRole("modifier_add")" icon="file_copy" url="@($"modifier/clone/{modifier.id}")">Clone</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_edit")" icon="highlight_off" is_visible="@(!modifier.is_deleted && modifier.status)" OnClick="@(()=>OnChangeStatus(modifier))">Inactive</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_edit")" icon="check" is_visible="@(!modifier.is_deleted && !modifier.status)" OnClick="@(()=>OnChangeStatus(modifier))">Active</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_delete")" icon="delete" is_visible="@(!modifier.is_deleted)" OnClick="@(()=>OnDelete(modifier))">Delete</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_restore")" icon="refresh" is_visible="@(modifier.is_deleted)" OnClick="@(()=>OnRestore(modifier))">Restore</MoreButtonItem>
                </MoreButton>
                <RefreshButton OnClick="@LoadData" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Tab>
                <TabHeader>
                    <TabHeaderItem>Overview</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_sale_history=true)">Sale History</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_comment_tab=true)">Comment</TabHeaderItem>
                </TabHeader>
                <TabBody>
                    <TabItem>
                        <UIGridCenter>
                            <UIContainerBox Title="Information">
                                <table>
                                    <tr>
                                        <th>Modifier Name</th>
                                        <td>@modifier.modifier_name</td>
                                    </tr>
                                </table>
                            </UIContainerBox>
                        </UIGridCenter>
                        <UIGridCenter>
                            <ComModifierIngredient_Detail modifier="@modifier" />
                        </UIGridCenter>
                        <UIGridCenter>
                            <ComProductModifier_Detail modifier="@modifier"/>
                        </UIGridCenter>
                    </TabItem>
                    @*============comment===========*@
                    <TabItem>
                        @if (show_sale_history)
                        {
                            <ComSale is_receipt_list="true" />
                        }
                    </TabItem>
                    <TabItem>
                        @if (show_comment_tab)
                        {
                            <UIGridCenter>
                                <UIContainerBox Title="Comment and History">
                                    <ComHistory RoleAdd="@gv.GetRole("modifier_add")"
                                                RoleDelete="@gv.GetRole("modifier_delete")"
                                                RoleEdit="@gv.GetRole("modifier_edit")"
                                                ApiFilter="@($"modifier_id eq {id}")"
                                                history="@(new HistoryModel() { modifier_id = id})" />
                                </UIContainerBox>
                            </UIGridCenter>
                        }
                    </TabItem>
                </TabBody>
            </Tab>
        </PageBody>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="Product">@error_text</Error>
}

@code{
    [Parameter] public int id { get; set; }
    string controller_api = "Modifier";
    ModifierModel modifier = new ModifierModel();
    List<ProductModifierModel> product_modifiers = new List<ProductModifierModel>();

    bool is_save_and_new = false;
    bool show_sale_history = false;
    bool show_comment_tab = false;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadModifierProduct();
    }

    async Task LoadData()
    {
        is_loading = true;

        var resp = await http.ApiGet($"{controller_api}({id})?$expand=modifier_ingredients($expand=ingredient,unit),product_modifiers($expand=parent($expand=product($expand=product_category)))");
        if (resp.IsSuccess)
        {
            modifier = JsonSerializer.Deserialize<ModifierModel>(resp.Content.ToString());
        }
        is_loading = false;
    }

    async Task LoadModifierProduct()
    {
        is_loading = true;

        var resp = await http.ApiGetOData($"ProductModifier?$filter=modifier_id eq {id}");
        if (resp.IsSuccess)
        {
            product_modifiers = JsonSerializer.Deserialize<List<ProductModifierModel>>(resp.Content.ToString());
        }
        is_loading = false;
    }

    async Task OnChangeStatus(ModifierModel u)
    {
        u.is_loading = true;
        var resp = await http.ApiPost(controller_api + "/status/" + u.id);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            await LoadData();
        }
        else
        {
            toast.Add(resp.Content.ToString(), MatToastType.Danger);
        }
        u.is_loading = false;
    }

    async Task OnRestore(ModifierModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Restore modifier", "Are you sure you want to restore " + p.modifier_name + "?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add("Restore modifier successfully", MatToastType.Success);
            }
            else
            {
                toast.Add(resp.Content.ToString(), MatToastType.Warning);
            }
        }
        p.is_loading = false;
    }

    async Task OnDelete(ModifierModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Delete modifier", "Are you sure you want to delete " + p.modifier_name + "?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add("Delete modifier successfully", MatToastType.Success);
        }
        p.is_loading = false;
    }
}
