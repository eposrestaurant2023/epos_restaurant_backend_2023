@page "/modifier/{id}"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="Modifier Detail"></Title>
    <PageContainer roles="@gv.GetRole("modifier_view")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @modifier.modifier_name
                        <LabelDeleted is_visible="@modifier.is_deleted" />
                        <LabelActive is_visible="@(!modifier.is_deleted && modifier.status)" is_loading="@modifier.is_change_status" />
                        <LabelInActive is_visible="@(!modifier.is_deleted && !modifier.status)" is_loading="@modifier.is_change_status" />
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <Button roles="@gv.GetRole("modifier_edit")" icon="edit" title="Edit" OnClick="@(()=>nav.NavigateTo($"modifier/edit/{modifier.id}"))" is_visible="@(!modifier.is_deleted)" />
                </MudHidden>
                <ComAttachFileButton RoleAdd="@gv.GetRole("modifier_add")"
                                     RoleEdit="@gv.GetRole("modifier_edit")"
                                     RoleDelete="@gv.GetRole("modifier_delete")"
                                     ApiFilter="@($"modifier_id eq {id} ")"
                                     File="@(new AttachFilesModel() { modifier_id =  new Guid(id) })"
                                     IsVisible="@(!modifier.is_deleted)" @bind-IsOpened="@is_open_attach_file" />
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <AddButton url="modifier/new" roles="@gv.GetRole("modifier_add")">@lang["New Modifier"]</AddButton>
                    </MudHidden>
                    <RefreshButton OnClick="@LoadData" />
                    <MoreButton is_loading="@(modifier.is_loading ||modifier.is_change_status || modifier.is_deleting || modifier.is_restoring)">
                        <MudHidden Breakpoint="Breakpoint.MdAndUp">
                            <MoreButtonItem roles="@gv.GetRole("modifier_add")" icon="add" url="modifier/new">@lang["New Modifier"]</MoreButtonItem>
                            <MoreButtonItem roles="@gv.GetRole("modifier_edit")" icon="edit" OnClick="@(()=>nav.NavigateTo($"modifier/edit/{modifier.id}"))">@lang["Edit"]</MoreButtonItem>
                        </MudHidden>
                            <MoreButtonItem roles="@gv.GetRole("modifier_add")" icon="file_copy" url="@($"modifier/clone/{modifier.id}")">@lang["Clone"]</MoreButtonItem>
                            <MoreButtonItem roles="@gv.GetRole("modifier_edit")" icon="highlight_off" is_visible="@(!modifier.is_deleted && modifier.status)" OnClick="@(()=>OnChangeStatus(modifier))">@lang["Inactive"]</MoreButtonItem>
                            <MoreButtonItem roles="@gv.GetRole("modifier_edit")" icon="check" is_visible="@(!modifier.is_deleted && !modifier.status)" OnClick="@(()=>OnChangeStatus(modifier))">@lang["Active"]</MoreButtonItem>
                            <MoreButtonItem roles="@gv.GetRole("modifier_delete")" icon="delete" is_visible="@(!modifier.is_deleted)" OnClick="@(()=>OnDelete(modifier))">@lang["Delete"]</MoreButtonItem>
                            <MoreButtonItem roles="@gv.GetRole("modifier_restore")" icon="refresh" is_visible="@(modifier.is_deleted)" OnClick="@(()=>OnRestore(modifier))">@lang["Restore"]</MoreButtonItem>
                            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                                <MudDivider />
                                <ComAttachFileButton RoleAdd="@gv.GetRole("modifier_add")"
                                                     RoleEdit="@gv.GetRole("modifier_edit")"
                                                     RoleDelete="@gv.GetRole("modifier_delete")"
                                                     ApiFilter="@($"modifier_id eq {id} ")"
                                                     File="@(new AttachFilesModel() { modifier_id =  new Guid(id) })"
                                                     IsVisible="@(!modifier.is_deleted)"
                                                     IsIconButton="false"
                                                     OnOpenAttachFile="@(()=>is_open_attach_file=!is_open_attach_file)" />

                            </MudHidden>
                    </MoreButton>

            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Tab>
                <TabHeader>
                    <TabHeaderItem>@lang["Overview"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_associate_product=true)">@lang["Associate Product"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_sale_history=true)">@lang["Sale History"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_comment_tab=true)">@lang["Comment and History"]</TabHeaderItem>
                </TabHeader>
                <TabBody>
                    <TabItem>
                        <UIGridCenter>
                            <UIContainerBox Title="@lang["General Information"]">
                                <table>
                                    <tr>
                                        <th>@lang["Name"]</th>
                                        <td>@modifier.modifier_name</td>
                                    </tr>
                                </table>
                            </UIContainerBox>
                        </UIGridCenter>
                        <UIGridCenter>
                            <ComModifierDetails_Ingredient modifier="@modifier" />
                        </UIGridCenter>

                        <div class="spacing30"></div>
                        <div class="invoice_footer_description">
                            <div>
                                @lang["Created by"] @modifier.created_by @lang["on"] @modifier.created_date.ToString(gv.date_time_format)
                            </div>

                            @if (modifier.is_deleted)
                            {
                                <div>@lang["Deleted by"] @modifier.deleted_by @lang["on"] @modifier.deleted_date</div>
                            }
                            <div>@lang["Last modified by"] @modifier.last_modified_by @lang["on"] @modifier.last_modified_date</div>
                        </div>
                    </TabItem>
                    <TabItem>
                        @if (show_associate_product)
                        {
                            <ComModifierDetails_ProductModifier id="@modifier.id"/>
                        }
                    </TabItem>
                    @*============comment===========*@
                    <TabItem>
                        @if (show_sale_history)
                        {
                            <ComModifierDetails_SaleHistory product_modifier_id="@(id.ToString())"/>
                        }
                    </TabItem>
                    <TabItem>
                        @if (show_comment_tab)
                        {
                              <ComHistory RoleAdd="@gv.GetRole("modifier_add")"
                                                RoleDelete="@gv.GetRole("modifier_delete")"
                                                RoleEdit="@gv.GetRole("modifier_edit")"
                                                ApiFilter="@($"modifier_id eq {id}")"
                                                history="@(new HistoryModel() { modifier_id = new Guid(id)})" />
                        }
                    </TabItem>
                </TabBody>
            </Tab>
        </PageBody>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="Product">@error_text</Error>
}

@code{
    [Parameter] public string id { get; set; }
    string controller_api = "Modifier";
    ModifierModel modifier = new ModifierModel();
    bool is_save_and_new = false;
    bool show_sale_history = false;
    bool show_comment_tab = false;
    bool is_open_attach_file;
    bool show_associate_product = false;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData(); 
    }

    async Task LoadData()
    {
        is_loading = true;

        var resp = await http.ApiGet($"{controller_api}({id})?$expand=modifier_ingredients($expand=ingredient,unit)");
        if (resp.IsSuccess)
        {
            modifier = JsonSerializer.Deserialize<ModifierModel>(resp.Content.ToString());
        }
        is_loading = false;
    }
 

    async Task OnChangeStatus(ModifierModel u)
    {
        u.is_loading = true;
        var resp = await http.ApiPost(controller_api + "/status/" + u.id);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MudBlazor.Severity.Success);
            await LoadData();
        }
        else
        {
            toast.Add(resp.Content.ToString(), MudBlazor.Severity.Error);
        }
        u.is_loading = false;
    }

    async Task OnRestore(ModifierModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Restore Record"], lang["Are you sure you want to restore this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Restore record successfully"], MudBlazor.Severity.Success);
            }
            else
            {
                toast.Add(resp.Content.ToString(), MudBlazor.Severity.Warning);
            }
        }
        p.is_loading = false;
    }

    async Task OnDelete(ModifierModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Delete Record"], lang["Are you sure you want to delete this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add(lang["Delete record successfully"], MudBlazor.Severity.Success);
        }
        p.is_loading = false;
    }
}
