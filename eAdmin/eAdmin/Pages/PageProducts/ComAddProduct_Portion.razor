<UIContainerBox Title="Product Prices" Icon="monetization_on" is_show_add_button="true" OnAddClick="@AddProductPortion">
    @if (is_loading)
    {
        <Spinner />
    }
    else
    {
        @if (model.product_portions.Any())
        {
        <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover  ">
            <thead>
                <tr>
                    <ThAuto>Portion</ThAuto>
                    <th>Multplier</th>
                    <th>Cost</th>
                    @foreach (var p in price_rules)
                    {
                        <ThCenter>
                            @p.price_name
                    <br/>
                            <Button OnClick="@(() => OnSetDefault(p))">Default</Button>
                            <br/>
                            <LabelActive is_visible="@(IsPriceRuleActive(p))" OnClick="@(() => OnChangeStatus(p))"/>
                            <LabelInActive is_visible="@(!IsPriceRuleActive(p))" OnClick="@(() => OnChangeStatus(p))"/>
                            </ThCenter>
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pp in model.product_portions.Where(r => r.is_deleted == false))
                {
                <tr>
                    <td>
                        <TextInput placeholder="Portion Name" @bind-text="@pp.portion_name" />
                    
                    </td>
                    <TdCenter>
                        <NumberInput placeholder="Multipler" @bind-text="@pp.multiplier" />
                    </TdCenter>
                    <TdCenter>
                        <NumberInput placeholder="Cost" @bind-text="@pp.cost" />
                    </TdCenter>
                    @foreach (var p in price_rules)
                    {

                        <TdCenter>
                            
                            <NumberInput  
                                placeholder="@p.price_name" 
                                @bind-text="@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().price" 
                                is_read_only="@(!@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().status)" 
                                class_name="@(@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().is_default ? "default-price uk-text-center" : "uk-text-center")"
                            />
                        </TdCenter>
                    }
                    <td>
                        <Button class_name="danger" icon="delete" OnClick="@(() => DeletePortion(pp))" is_visible="@(model.product_portions.Where(r => r.is_deleted == false).Count() > 1)" />
                    </td>
                </tr>

                }

            </tbody>
        </table>
        }else
        {
            <p>There is no product portions</p>
        }
        }


</UIContainerBox>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public ProductModel model { get; set; }

    List<PriceRuleModel> price_rules = new List<PriceRuleModel>();


    bool is_loading;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await Task.Delay(100);
        price_rules = JsonSerializer.Deserialize<List<PriceRuleModel>>(JsonSerializer.Serialize(gv.price_rules));

        if (model.id == 0)
        {

            model.product_portions.Add(new ProductPortionModel(price_rules) { portion_name = "Normal" });

        }else
        {
            var data = model.product_portions.SelectMany(r => r.product_prices).Where(r => r.is_deleted == false && r.is_default);
            if (data.Any())
            {
                int default_price_rule_id = data.FirstOrDefault().price_rule_id;
                price_rules.Where(r => r.id == default_price_rule_id).FirstOrDefault().is_default = true;
            }

        }
        is_loading = false;
    }

    void OnSetDefault(PriceRuleModel p)
    {

        foreach (var pp in model.product_portions)
        {
            pp.product_prices.ForEach(r => r.is_default = r.price_rule_id == p.id ? true : false);
        }

        price_rules.Where(r => r.id == p.id).FirstOrDefault().is_default = true;

        model.product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.is_deleted == false && r.price_rule_id == p.id ).ToList().ForEach(r => r.status = true);

    }

    void OnChangeStatus(PriceRuleModel p)
    {


        model.product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.is_deleted == false && r.price_rule_id==p.id && r.is_default==false ).ToList().ForEach(r => r.status = !r.status);

    }

    void AddProductPortion()
    {
        model.product_portions.Add(new ProductPortionModel(price_rules) { portion_name = "Portion Name" });
    }


    void DeletePortion(ProductPortionModel pp)
    {
        if (pp.id == 0)
        {
            model.product_portions.Remove(pp);

        }else
        {
            pp.is_deleted = true;
        }
    }

    bool IsPriceRuleActive(PriceRuleModel p)
    {
        return model.product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.price_rule_id == p.id).FirstOrDefault().status;
    }


}
