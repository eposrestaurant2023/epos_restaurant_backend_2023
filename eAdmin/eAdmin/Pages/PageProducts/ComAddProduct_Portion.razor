@inject IStringLocalizer<Resource> lang
@inject IHttpService http;

<UIContainerBox Title="@lang["Product Prices"]" Icon="monetization_on" is_show_add_button="true" OnAddClick="@AddProductPortion">
    @if (is_loading)
    {
        <Spinner is_template_spinning="true" />
    }
    else
    {
        <ViewEmptyTemplate is_view="@(model.unit_id > 0)" empty="@lang["Please select unit category."]">
            <ViewEmptyTemplate is_view="model.product_portions.Any()">
                <div class="uk-overflow-auto">
                    <table class="uk-table  view_table set-verticle-bottom uk-table-small uk-table-striped uk-table-hover  ">
                        <thead>
                            <tr>
                                <ThAuto>@lang["Portion"]</ThAuto>
                                <ThCenter width="130px">@lang["Unit"]</ThCenter>
                                <ThRight width="90px">@lang["Cost"]</ThRight>
                                @foreach (var p in gv.price_rules)
                                {
                                    <ThRight width="90px">
                                        <div>
                                            @p.price_name
                                        </div>
                                        <div>
                                            <LabelActive is_visible="@(IsPriceRuleActive(p))" />
                                            <LabelInActive is_visible="@(!IsPriceRuleActive(p))" />
                                        </div>
                                    </ThRight>
                                }
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var pp in model.product_portions.Where(r => r.is_deleted == false))
                            {
                                <tr>
                                    <td>
                                        <TextInput placeholder="@lang["Portion Name"]" @bind-text="@pp.portion_name" width="100%" />
                                    </td>
                                    <TdCenter>

                                        <SelectUnit @bind-selected_value="@pp.unit_id" @bind-unit="@pp.unit" unit_category_id="@model.unit_category_id" is_select_unit_category="true" show_empty="true" width="100%">
                                                <ValidationMessage For="@(() => pp.unit_id)" />
                                            </SelectUnit>
 
                                    </TdCenter>
                                    <TdRight>
                                        <NumberInput placeholder="@lang["Cost"]" @bind-text="@pp.cost" width="100%" class_name="uk-text-right" />
                                    </TdRight>
                                    @foreach (var p in price_rules)
                                    {

                                        <TdRight>
                                            @if (pp.product_prices.Where(r => r.price_rule_id == p.id).Any())
                                            {
                                                <NumberInput placeholder="@p.price_name"
                                                             @bind-text="@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().price"
                                                             is_read_only="@(!@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().status)"
                                                             class_name="uk-text-right" width="100%" />
                                            }
                                        </TdRight>
                                    }
                                    <TdCenter>
                                        <Icon icon="delete" OnClick="@(() => DeletePortion(pp))" is_visible="@(model.product_portions.Where(r => r.is_deleted == false).Count() > 1)" />
                                    </TdCenter>
                                </tr>

                            }

                        </tbody>
                    </table>
                </div>
            </ViewEmptyTemplate>
        </ViewEmptyTemplate>
    }
</UIContainerBox>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public ProductModel model { get; set; }
    [Parameter] public EventCallback<ProductModel> modelChanged { get; set; }

    List<PriceRuleModel> price_rules = new List<PriceRuleModel>();

    List<ProductPortionModel> product_portions = new List<ProductPortionModel>();

    bool is_loading;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        price_rules = JsonSerializer.Deserialize<List<PriceRuleModel>>(JsonSerializer.Serialize(gv.price_rules));

        if (model.id == 0 && model.product_portions.Count() == 0)
        {

            model.product_portions.Add(new ProductPortionModel(price_rules) { portion_name = lang["Normal"], unit_id = model.unit_id, unit = model.unit });

        }
        else
        {
            var data = model.product_portions.SelectMany(r => r.product_prices).Where(r => r.is_deleted == false);
            if (data.Any())
            {
                int default_price_rule_id = data.FirstOrDefault().price_rule_id;

            }

        }

        is_loading = false;
    }



    void OnChangeStatus(PriceRuleModel p)
    {
        model.product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.is_deleted == false && r.price_rule_id == p.id).ToList().ForEach(r => r.status = !r.status);
    }

    void AddProductPortion()
    {
        model.product_portions.Add(new ProductPortionModel(price_rules) { portion_name = lang["Portion Name"], unit_id = model.unit_id, unit = model.unit });
    }


    void DeletePortion(ProductPortionModel pp)
    {
        if (pp.id == 0)
        {
            model.product_portions.Remove(pp);

        }
        else
        {
            pp.is_deleted = true;
        }
    }

    bool IsPriceRuleActive(PriceRuleModel p)
    {

        var data = model.product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.price_rule_id == p.id);

        if (data.Any())
        {
            return data.FirstOrDefault().status;
        }
        return false;

    }


    async Task LoadData()
    {

        if (model.id > 0)
        {
            
            string api_url = $"ProductPortion?$expand=product_prices,unit&$filter=is_deleted eq false and product_id eq {model.id}";
            var resp = await http.ApiGetOData(api_url);
            if (resp.IsSuccess)
            {
                product_portions = JsonSerializer.Deserialize<List<ProductPortionModel>>(resp.Content.ToString());
                model.product_portions= product_portions;
                await modelChanged.InvokeAsync(model);
            }
          
        }
    }

}
