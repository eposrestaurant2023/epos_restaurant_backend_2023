@inherits PageCore

<Loading is_loading="@(is_loading || is_loading_data)" />
<Title Value="@lang["Product Detail"]"></Title>
@if (!is_error && !is_loading)
{
    <PageContainer roles="@gv.GetRole("product_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @model.product_display_name
                        <ComProductDetail_HeaderStatus model="@model" is_menu_product="false" />
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <ButtonGroup>
                        <Button roles="@gv.GetRole("product_edit")" OnClick="@(()=>nav.NavigateTo($"product/edit/{model.id}"))" icon="edit" title="@lang["Edit"]" is_visible="@(!model.is_deleted)" />
                    </ButtonGroup>
                </MudHidden>
                <ComAttachFileButton RoleAdd="@gv.GetRole("product_add")"
                                     RoleEdit="@gv.GetRole("product_edit")"
                                     RoleDelete="@gv.GetRole("product_delete")"
                                     ApiFilter="@($"product_id eq {id} ")"
                                     File="@(new AttachFilesModel() { product_id =  id })"
                                     IsVisible="@(!model.is_deleted)" @bind-IsOpened="@is_open_attach_file" />
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <AddButton roles="@gv.GetRole("product_add")" url="product/new">@lang["New Product"]</AddButton>
                </MudHidden>
                <RefreshButton OnClick="@LoadData" />
                <MoreButton is_loading="@(model.is_loading ||model.is_change_status || model.is_deleting || model.is_restoring)">
                    <MudHidden Breakpoint="Breakpoint.MdAndUp">
                        <MoreButtonItem roles="@gv.GetRole("product_add")" icon="add" url="product/new">@lang["New Product"]</MoreButtonItem>
                        <MoreButtonItem roles="@gv.GetRole("product_edit")" icon="edit" is_visible="@(!model.is_deleted)" OnClick="@(()=>nav.NavigateTo($"product/edit/{model.id}"))">@lang["Edit"]</MoreButtonItem>
                    </MudHidden>
                    <MoreButtonItem roles="@gv.GetRole("product_add")" icon="file_copy" url="@($"product/clone/{model.id}")">@lang["Clone"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("product_edit")" icon="block" OnClick="@OnBlockProductClick">@lang["Block"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("product_edit")" icon="highlight_off" is_visible="@(!model.is_deleted && model.status)" OnClick="OnChangeStatus">@lang["Inactive"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("product_edit")" icon="check" is_visible="@(!model.is_deleted && !model.status)" OnClick="OnChangeStatus">@lang["Active"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("product_delete")" icon="delete" is_visible="@(!model.is_deleted)" OnClick="@OnDelete">@lang["Delete"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("product_edit")" icon="refresh" is_visible="@(model.is_deleted)" OnClick="@OnRestore">@lang["Restore"]</MoreButtonItem>
                    <MudHidden Breakpoint="Breakpoint.MdAndUp">
                        <MudDivider />
                        <ComAttachFileButton RoleAdd="@gv.GetRole("product_add")"
                                             RoleEdit="@gv.GetRole("product_edit")"
                                             RoleDelete="@gv.GetRole("product_delete")"
                                             ApiFilter="@($"product_id eq {id} ")"
                                             File="@(new AttachFilesModel() { product_id =  id })"
                                             IsVisible="@(!model.is_deleted)"
                                             IsIconButton="false"
                                             OnOpenAttachFile="@(()=>is_open_attach_file=!is_open_attach_file)" />
                    </MudHidden>
                </MoreButton>
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <MudTabs PanelClass="pa-6">
                <MudTabPanel Text="@lang["General Information"]">
                    <ComProductDetail_ProductInformation model="@model" />
                </MudTabPanel>
                @if (!model.is_composite_product && !model.is_ingredient_product && gv.project_has_advance_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_recipe_tab=true)" Text="@lang["Recipe"]">
                        <Com is_visible="@show_recipe_tab">
                            <ComProductDetail_ProductPortionIngredient product_id="@model.id" is_product_deleted="@model.is_deleted" />
                        </Com>
                    </MudTabPanel>
                }
                @if (model.is_composite_product && gv.project_has_advance_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_composite_product_tab=true)" Text="@lang["Composite Items"]">
                        <Com is_visible="@show_composite_product_tab">
                            <ComProductDetail_ProductPortionCompositeItems product_id="@model.id" is_product_deleted="@model.is_deleted" />
                        </Com>
                    </MudTabPanel>
                }
                @if (model.is_ingredient_product)
                {
                    <MudTabPanel OnClick="@(()=>show_association_products = true)" Text="@lang["Associate Products & Modifiers"]">
                        @if (show_association_products)
                        {
                            <ComIngredientProductDetail_AssociationProductsAndModifiers ingredient_id="@model.id" />
                        }
                    </MudTabPanel>
                }
                <MudTabPanel OnClick="@(()=>show_sale_history = true)" Text="@lang["Sale History"]">
                    @if (show_sale_history)
                    {
                        <ComProductDetail_SaleHistory product_id="@id" />
                    }
                </MudTabPanel>
                @if (gv.project_has_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_purchase_history = true)" Text="@lang["Purchase History"]">
                        @if (show_purchase_history)
                        {
                            <ComProductDetail_POHistory product_id="@id" />
                        }
                    </MudTabPanel>
                }
                @if (gv.project_has_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_stock_stransfer = true)" Text="@lang["Stock Transfer"]">
                        @if (show_stock_stransfer)
                        {
                            <ComProductDetail_StockTransferHistory product_id="@id" />
                        }
                    </MudTabPanel>
                }
                @if (gv.project_has_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_stock_take = true)" Text="@lang["Stock Take"]">
                        @if (show_stock_take)
                        {
                            <ComProductDetail_StockTakeHistory product_id="@id" />
                        }
                    </MudTabPanel>
                }
                @if (gv.project_has_advance_inventory)
                {
                    <MudTabPanel OnClick="@(()=>show_production = true)" Text="@lang["Production"]">
                        @if (show_production)
                        {
                            <ComProductDetail_ProductionHistory product_id="@id" />
                        }
                    </MudTabPanel>
                }
                @if (model.is_inventory_product && (gv.project_has_inventory))
                {
                    <MudTabPanel OnClick="@(()=>show_inventory_strasation = true)" Text="@lang["Inventory Transaction"]">
                        @if (show_inventory_strasation)
                        {
                            <ComProductDetail_InventoryTransactionHistory product_id="@id" />
                        }
                    </MudTabPanel>
                }
                <MudTabPanel OnClick="@(()=>show_comment_tab=true)" Text="@lang["Comment and History"]">
                    @if (show_comment_tab)
                    {
                        <ComHistory RoleAdd="@gv.GetRole("product_add")"
                                    RoleDelete="@gv.GetRole("product_delete")"
                                    RoleEdit="@gv.GetRole("product_add")"
                                    ApiFilter="@($"product_id eq {id}")"
                                    history="@(new HistoryModel() { product_id = id})" />

                    }
                </MudTabPanel>

            </MudTabs>
        </PageBody>
    </PageContainer>
    @if (is_open_block_product)
    {
<EditFormContext model="@model" Save_Click="@onSaveBlockClick" Cancel_Click="@(() => is_open_block_product = false)" modal_width="800px" is_opened="@is_open_block_product" title="@block_title" is_submitting="@is_saving">
    @foreach (var bb in gv.bussiness_branches)
    {
    <div> 
            <ComInputCheckBox label="@bb.business_branch_name_en"  value="@(business_branch_ids.Where(r=>r.ToUpper() ==bb.id.ToString().ToUpper()).Any())" valueChanged="@((v)=>OnValueChanged(v,bb.id.ToString()))"/>
       
    </div>
    }
</EditFormContext>
    }
}
@if (is_error)
{
    <Error title="Product Detail">
        @error_text
    </Error>
}
@code{
        [Parameter] public int id { get; set; }
    public ProductModel model { get; set; }
    public BlockBusinessBranchId bbIds = new BlockBusinessBranchId();

    bool show_production, show_comment_tab, show_recipe_tab, show_composite_product_tab, show_purchase_history, show_sale_history, show_stock_stransfer, show_stock_take, show_inventory_strasation, show_association_products;
    bool is_open_attach_file, is_open_block_product;
    string block_title = "Block Product";
    public string api_url
    {
        get
        {
            string url = $"Product({id})";
            url = url + "?$expand=kitchen_group,vendor($select=id,vendor_name,vendor_code),product_category($select=product_category_en;$expand=product_group($select=product_group_en)),unit($select=unit_name)";
            return url;
        }
    }

    string[] business_branch_ids  ;


    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        block_title = lang["Block Product"];
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading = true;
        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<ProductModel>(resp.Content.ToString());
            business_branch_ids = (model.block_to_business_branch_ids ?? "").Split(',');
            bbIds.id = model.block_to_business_branch_ids ?? "";
        }
        else
        {
            is_error = true;
            error_text = lang["Page not found."];
        }
        is_loading = false;

    }

    async Task OnDelete()
    {
        model.is_deleting = true;
        if (await js.Confirm(lang["Delete Product"], lang["Are you sure you want to delete this product?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add(lang["Delete product successfully"], MudBlazor.Severity.Success);
                model.is_deleted = true;
            }
        }
        model.is_deleting = false;
    }
    async Task OnRestore()
    {

        model.is_restoring = true;
        if (await js.Confirm(lang["Delete Product"], lang["Are you sure you want to retore this product?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add(lang["Restore product successfully"], MudBlazor.Severity.Success);
                model.is_deleted = false;
            }
        }
        model.is_restoring = false;
    }

    async Task OnChangeStatus()
    {
        model.is_change_status = true;
        var resp = await http.ApiPost("Product/ChangeStatus/" + id);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MudBlazor.Severity.Success);
            model.status = !model.status;
        }
        model.is_change_status = false;
    }

    async Task OnBlockProductClick()
    {

        if (gv.bussiness_branches.Count() > 1)
        {

            is_open_block_product = true;
        }
        else
        {
            bbIds = new BlockBusinessBranchId();
            bbIds.id = "";
            bbIds.id = (model.block_to_business_branch_ids ?? "") != "" ? "" : gv.bussiness_branches.FirstOrDefault().id.ToString();
            await _onSave(bbIds, false);
        }
    }
    async Task _onSave(BlockBusinessBranchId bbIds, bool is_modal)
    {
        is_saving = true;
        var resp = await http.ApiPost("Product/BlockProduct?id=" + id, bbIds);
        if (resp.IsSuccess)
        {
            toast.Add(lang["successfully"], MudBlazor.Severity.Success);
            model.block_to_business_branch_ids = bbIds.id;
            business_branch_ids = (model.block_to_business_branch_ids ?? "").Split(',');
            if (is_modal)
            {
                is_open_block_product = false;
            }
        }
        is_saving = false;
    }

    async Task onSaveBlockClick()
    {

        bbIds = new BlockBusinessBranchId();
        bbIds.id = "";

        business_branch_ids.ToList().Where(r=>r!="").ToList().ForEach((r) =>
        {
            bbIds.id += (r+",");
        });
        if (bbIds.id != "")
        {
            bbIds.id = bbIds.id.Substring(0, bbIds.id.Length - 1);
        }

        await _onSave(bbIds,true);

    }

    void OnValueChanged(bool value, string _id)
    {
        if (!value)
        {
            business_branch_ids = business_branch_ids.Where(r => r.ToLower() != _id.ToLower()).ToArray();
        }
        else
        {
            //
            business_branch_ids = business_branch_ids.Append(_id).ToArray();
        }
    }

    public class BlockBusinessBranchId
    {
        public string id { get; set; }
    }


}
