@page "/modifiergroup/{id:int}"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="@lang["Modifier Group Detail"]"></Title>
    <PageContainer roles="@gv.GetRole("modifier_group_view")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @modifier_group.modifier_group_name_en
                        <LabelDeleted is_visible="@modifier_group.is_deleted" />
                        <LabelActive is_visible="@(!modifier_group.is_deleted && modifier_group.status)" is_loading="@modifier_group.is_change_status" />
                        <LabelInActive is_visible="@(!modifier_group.is_deleted && !modifier_group.status)" is_loading="@modifier_group.is_change_status" />
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <Button roles="@gv.GetRole("modifier_group_edit")" icon="edit" title="@lang["Edit"]" OnClick="@(()=>nav.NavigateTo($"modifiergroup/edit/{modifier_group.id}"))" is_visible="@(!modifier_group.is_deleted)" />
                <ComAttachFileButton RoleAdd="@gv.GetRole("modifier_group_add")"
                                     RoleEdit="@gv.GetRole("modifier_group_edit")"
                                     RoleDelete="@gv.GetRole("modifier_group_delete")"
                                     ApiFilter="@($"modifier_group_id eq {id} ")"
                                     File="@(new AttachFilesModel() { modifier_group_id =  id })"
                                     IsVisible="@(!modifier_group.is_deleted)" />
                <AddButton url="modifiergroup/new" roles="@gv.GetRole("modifier_group_add")">@lang["New Modifier"]</AddButton>
                <MoreButton is_loading="@(modifier_group.is_loading ||modifier_group.is_change_status || modifier_group.is_deleting || modifier_group.is_restoring)">
                    <MoreButtonItem roles="@gv.GetRole("modifier_group_add")" icon="file_copy" url="@($"modifiergroup/clone/{modifier_group.id}")">Clone</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_group_edit")" icon="highlight_off" is_visible="@(!modifier_group.is_deleted && modifier_group.status)" OnClick="@(()=>OnChangeStatus(modifier_group))">@lang["Inactive"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_group_edit")" icon="check" is_visible="@(!modifier_group.is_deleted && !modifier_group.status)" OnClick="@(()=>OnChangeStatus(modifier_group))">@lang["Active"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_group_delete")" icon="delete" is_visible="@(!modifier_group.is_deleted)" OnClick="@(()=>OnDelete(modifier_group))">@lang["Deleted"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("modifier_group_restore")" icon="refresh" is_visible="@(modifier_group.is_deleted)" OnClick="@(()=>OnRestore(modifier_group))">@lang["Restore"]</MoreButtonItem>
                </MoreButton>
                <RefreshButton OnClick="@LoadData" />
            </HeaderRight>
        </PageHeader>
            <PageBody>
                <Tab>
                    <TabHeader>
                        <TabHeaderItem>@lang["Overview"]</TabHeaderItem>
                        <TabHeaderItem OnClick="@(()=>show_comment_tab=true)">@lang["Comment"]</TabHeaderItem>
                    </TabHeader>
                    <TabBody>
                        <TabItem>
                            <UIGridCenter>
                                <UIContainerBox Title="@lang["Information"]">
                                    <table>
                                        <tr>
                                            <th>@lang["Name En"]</th>
                                            <td>@modifier_group.modifier_group_name_en</td>
                                        </tr>
                                        @if (!string.IsNullOrEmpty(modifier_group.modifier_group_name_kh))
                                        {
                                            <tr>
                                                <th>@lang["Name Kh"]</th>
                                                <td>@modifier_group.modifier_group_name_kh</td>
                                            </tr>
                                        }
                                    </table>
                                </UIContainerBox>
                            </UIGridCenter>
                            <UIGridCenter>
                                @*===========modifier group item=========*@
                                <ComModifierGroupDetail_Modifier modifier_group="@modifier_group"/>
                            </UIGridCenter>
                            <UIGridCenter>
                                @*===========modifier group product category=========*@
                                @*<ComModifierGroup_ProductCategory modifier_group_id="@id" product_groups="@product_groups" />*@
                            </UIGridCenter>
                        </TabItem>
                        @*============comment===========*@
                    <TabItem>
                        @if (show_comment_tab)
                        {
                            <UIGridCenter>
                                <UIContainerBox Title="@lang["Comment and History"]">
                                    <ComHistory RoleAdd="@gv.GetRole("modifier_group_add")"
                                                RoleDelete="@gv.GetRole("modifier_group_delete")"
                                                RoleEdit="@gv.GetRole("modifier_group_edit")"
                                                ApiFilter="@($"modifier_group_id eq {id}")"
                                                history="@(new HistoryModel() { modifier_group_id = id})" />
                                </UIContainerBox>
                            </UIGridCenter>
                        }
                    </TabItem>
                    </TabBody>
                </Tab>
                
            </PageBody>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="@lang["Modifier Group"]">@error_text</Error>
}

@code{
    [Parameter] public int id { get; set; }
    string controller_api = "ModifierGroup";
    ModifierGroupModel modifier_group = new ModifierGroupModel();
    List<ProductGroupModel> product_groups = new List<ProductGroupModel>();

    bool is_save_and_new = false;
    bool show_comment_tab = false;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadProductGroup();
    }

    async Task LoadData()
    {
        is_loading = true;

        var resp = await http.ApiGet($"{controller_api}({id})?$expand=modifier_group_items($expand=children($expand=modifier);$filter=is_deleted eq false),modifier_group_product_categories($filter=is_deleted eq false)");
        if (resp.IsSuccess)
        {
            modifier_group = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
        }
        is_loading = false;
    }

    async Task LoadProductGroup()
    {
        var resp = await http.ApiGetOData("ProductGroup?$expand=product_categories($expand=modifier_group_product_categories($filter=is_deleted eq false);$filter=is_deleted eq false and status eq true)&$filter=is_deleted eq false and status eq true and id gt 1 ");
        if (resp.IsSuccess)
        {
            product_groups = JsonSerializer.Deserialize<List<ProductGroupModel>>(resp.Content.ToString());
        }
    }

    async Task OnChangeStatus(ModifierGroupModel u)
    {
        u.is_loading = true;
        var resp = await http.ApiPost(controller_api + "/status/" + u.id);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MatToastType.Success);
            await LoadData();
        }
        else
        {
            toast.Add(resp.Content.ToString(), MatToastType.Danger);

        }
        u.is_loading = false;
    }

    async Task OnRestore(ModifierGroupModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Restore modifier group"], "Are you sure you want to restore " + p.modifier_group_name_en + "?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Restore modifier group successfully"], MatToastType.Success);
            }
            else
            {
                toast.Add(resp.Content.ToString(), MatToastType.Warning);
            }
        }
        p.is_loading = false;
    }

    async Task OnDelete(ModifierGroupModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Delete modifier group"], lang["Are you sure you want to delete this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add(lang["Delete modifier group successfully"], MatToastType.Success);
        }
        p.is_loading = false;
    }
}
