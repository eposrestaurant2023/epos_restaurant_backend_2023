@inject IStringLocalizer<Resource> lang
<UIContainerBox Title="@lang["Modifier Section"]">
    @if (modifer_group.modifier_group_items.Where(r => r.is_section == true && r.is_deleted == false).Any())
    {
        foreach (var s in modifer_group.modifier_group_items.Where(r => r.is_section == true && r.is_deleted == false ))
        {
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Class="mb-4" Text="@s.section_name">
                    <UIBox Title="@s.section_name" is_show_delete_button="true" OnDeleteClick="@(()=>DeleteModifierSection(s))">
                        <TextInput @bind-text="@s.section_name" label="@lang["Section Name"]" />
                        <NumberInputInt @bind-text="@s.sort_order" label="@lang["Sort Order"]" />
                        <ComInputCheckBox @bind-value="@s.is_required" label="@lang["Is Required"]" />
                        <ComInputCheckBox @bind-value="@s.is_multiple_select" label="@lang["Allow Multiple Select"]" />
                        <hr />
                        <ModifierTypeahead modifier="@modifier" modifierChanged="@((val)=>OnSelectModifier(s, val))" />
                        <hr />
                        <table class="uk-table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                            <tr>
                                <ThAuto>@lang["Modifier Name"]</ThAuto>
                                <ThRight>@lang["Price"]</ThRight>
                                <ThCenter>@lang["Sort Order"]</ThCenter>
                                <ThCenter></ThCenter>
                            </tr>
                            <ViewEmptyTemplate is_view="@s.children.Where(r => r.is_deleted == false).Any()" colspan="4">
                                @foreach (var m in s.children.Where(r => r.is_deleted == false))
                                {
                                    <tr>
                                        <td>
                                            @if (m.modifier.id == Guid.Empty)
                                            {
                                                <TextInput @bind-text="@m.modifier.modifier_name" label="" placeholder="@lang["Modifier Name"]" />
                                            }
                                            {
                                                @m.modifier?.modifier_name
                                            }

                                        </td>
                                        <TdRight>
                                            <NumberInput @bind-text="@m.price" label="" placeholder="@lang["Price"]" width="100px" class_name="uk-text-right" />
                                        </TdRight>
                                        <TdCenter>
                                            <NumberInputInt @bind-text="@m.sort_order" label="" placeholder="@lang["Sort Order"]" width="80px" class_name="uk-text-center" />
                                        </TdCenter>
                                        <TdCenter>
                                            <Icon icon="delete" OnClick="@(()=>DeleteModifier(m))" />
                                        </TdCenter>
                                    </tr>
                                }
                            </ViewEmptyTemplate>
                        </table>
                    </UIBox>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
        <hr />
        <div class="uk-text-right">
            <Button OnClick="@AddSection">@lang["Add Section"]</Button>
        </div>
    }
    else
    {
        <ComEmptyTemplate empty="@lang["Please click button below to add section."]" icon="create_new_folder">
            <div class="uk-text-center">
                <Button OnClick="@AddSection">@lang["Add Section"]</Button>
            </div>
        </ComEmptyTemplate>
    }
</UIContainerBox>

    @code{
        [Parameter] public ModifierGroupModel modifer_group { get; set; }

        private ModifierModel _modifier;

        public ModifierModel modifier
        {
            get { return _modifier; }
            set
            {

                _modifier = value;
            }
        }

        int index_section_name = 0;
        void OnSelectModifier(ModifierGroupItemModel parent, ModifierModel child)
        {
            int sort_number = parent.children.Any() ? parent.children.Where(r => r.is_deleted == false).LastOrDefault().sort_order : 0;

            sort_number++;
            if (!parent.children.Where(r => r.is_deleted == false && r.modifier.modifier_name.Trim().ToLower() == child.modifier_name.ToLower().Trim()).Any())
            {
                parent.children.Add(new ModifierGroupItemModel() { modifier = child, modifier_id = child.id, sort_order = sort_number });
            }
            modifier = null;
        }



        void DeleteModifier(ModifierGroupItemModel m)
        {
            if (m.id == Guid.Empty)
            {
                modifer_group.modifier_group_items.ForEach(r=>r.children.Remove(m));
            }
            else
            {
                m.is_deleted = true;
            }
        }

        void AddSection()
        {
            index_section_name++;
            modifer_group.modifier_group_items.Add(new ModifierGroupItemModel()
            {
                section_name = "Section Name " + index_section_name.ToString(),
                is_section = true
            });
        }

        void DeleteModifierSection(ModifierGroupItemModel m)
        {
            if (m.modifier_group_id == Guid.Empty)
            {
                modifer_group.modifier_group_items.Remove(m);
            }
            else
            {
                m.is_deleted = true;
            }
        }

    }
