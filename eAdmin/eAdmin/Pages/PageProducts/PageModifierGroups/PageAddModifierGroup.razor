@page "/modifiergroup/new"
@page "/modifiergroup/edit/{id}"
@page "/modifiergroup/clone/{clone_id}"
@inherits PageCore

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="@lang[title]"></Title>
    <PageContainer roles="@gv.GetRole($"{(id != Guid.Empty.ToString() ? "modifier_group_edit" : "modifier_group_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang[title]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true" />
        </PageHeader>
        <EditForm Model="@modifier_group" OnValidSubmit="@Save_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox>
                        <TextInput label="@lang["Name En"]" @bind-text="@modifier_group.modifier_group_name_en">
                            <ValidationMessage For="@(()=>modifier_group.modifier_group_name_en)" />
                        </TextInput>
                        <TextInput label="@lang["Name Kh"]" @bind-text="@modifier_group.modifier_group_name_kh" />
                        <SelectStatus @bind-selected_value="@modifier_group.status" />
                    </UIContainerBox>
                </UIGridCenter>
                <UIGridCenter>
                    <ComAddModifier modifer_group="@modifier_group" />
                </UIGridCenter>

                <UIGridCenter >
                    <ComAddModifierGroupProductCategory  modifier_group="@modifier_group" />
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter> 
                    <ComSavingFormButton is_loading="@is_saving" is_show_save_new="true" OnSaveNew="@(()=>is_save_and_new = true)" is_show_cancel_action="true" OnCancel="@OnCancel"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="@lang["Modifier Group"]">@error_text</Error>
}

@code{
    [Parameter] public string clone_id { get; set; }
    [Parameter] public string id { get; set; }
    string controller_api = "ModifierGroup";
    ModifierGroupModel modifier_group = new ModifierGroupModel();

    bool is_save_and_new = false;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
    }

    async Task LoadData()
    {
        is_loading = true;
        if (!string.IsNullOrEmpty(clone_id) || !string.IsNullOrEmpty(id))
        {
            if (!string.IsNullOrEmpty(id))
            {
                var resp = await http.ApiGet($"{controller_api}({(id != Guid.Empty.ToString() ? id : clone_id)})?$expand=modifier_group_items($expand=children($expand=modifier;$orderby=sort_order desc);$filter=is_deleted eq false),modifier_group_product_categories($filter=is_deleted eq false)");
                if (resp.IsSuccess)
                {
                    modifier_group = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
                }
                title = $"Edit : {modifier_group.modifier_group_name_en}";
            }
            else
            {
                var resp = await http.ApiPost($"{controller_api}/clone/{clone_id}");
                if (resp.IsSuccess)
                {
                    modifier_group = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
                    title = $"Clone : {modifier_group.modifier_group_name_en}";
                }
            }
        }
        else
        {
            title = "Add New Modifier Group";
            modifier_group = new ModifierGroupModel();
        }
        is_loading = false;
    }

    async Task Save_Click()
    {
        is_saving = true;


        // where don't add group item
        if (!modifier_group.modifier_group_items.Where(r=>r.is_deleted == false).Any())
        {
            toast.Add(lang["Please add modifier section"], MudBlazor.Severity.Warning);
            is_saving = false;
            return;
        }
        else
        {
            // where didn't add modifier into section
            foreach (var i in modifier_group.modifier_group_items.Where(r => r.is_deleted == false))
            {
                if (!i.children.Where(r=>r.is_deleted == false).Any())
                {
                    toast.Add($"{lang["Please add modifier to"]} {i.section_name}.", MudBlazor.Severity.Warning);
                    is_saving = false;
                    return;
                }
            }

        }

        // where section name empty
        if (modifier_group.modifier_group_items.Where(r=>r.is_deleted == false && string.IsNullOrEmpty(r.section_name)).Any())
        {
            toast.Add(lang["Section name cannot empty."], MudBlazor.Severity.Warning);
            is_saving = false;
            return;
        }
        // where modifier no name
        foreach (var child in modifier_group.modifier_group_items.SelectMany(r=>r.children).ToList())
        {
            if (string.IsNullOrEmpty(child.modifier.modifier_name))
            {
                toast.Add(lang["Modifier name cannot empty."], MudBlazor.Severity.Warning);
                is_saving = false;
                return;
            }
        }

        ModifierGroupModel save_model = JsonSerializer.Deserialize<ModifierGroupModel>(JsonSerializer.Serialize(modifier_group));

        save_model.modifier_group_items.SelectMany(r => r.children).Where(r=> r.modifier_id != Guid.Empty).ToList().ForEach(x => x.modifier = null);
        var resp = await http.ApiPost("ModifierGroup/Save", save_model);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);
            save_model = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
            if (is_save_and_new)
            {
                modifier_group = new ModifierGroupModel();
                modifier_group.modifier_group_items = new List<ModifierGroupItemModel>();
                modifier_group.modifier_group_product_categories = new List<ModifierGroupProductCategoryModel>();
                nav.NavigateTo("modifiergroup/new");
                await LoadData();
            }
            else
            {
                nav.NavigateTo("modifiergroup/" + save_model.id);
            }
        }
        else {
            toast.Add(lang["Save data fail."], MudBlazor.Severity.Warning);
        }
        is_saving = false;
    }

    void OnCancel() {
        if (id != Guid.Empty.ToString())
        {
            nav.NavigateTo("modifiergroup/" + id);
        }else
        {
            nav.NavigateTo("modifiergroup");
        }

    }
}
