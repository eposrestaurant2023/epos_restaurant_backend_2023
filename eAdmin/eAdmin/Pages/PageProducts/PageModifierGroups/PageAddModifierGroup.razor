@page "/modifiergroup/new"
@page "/modifiergroup/edit/{id:int}"
@page "/modifiergroup/clone/{clone_id:int}"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading && !is_error)
{
    <Title Value="@title"></Title>
    <PageContainer roles="@gv.GetRole($"{(id > 0 ? "modifier_group_edit" : "modifier_group_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @title
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true" />
        </PageHeader>
        <EditForm Model="@modifier_group" OnValidSubmit="@Save_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox>
                        <TextInput label="Name En" @bind-text="@modifier_group.modifier_group_name_en">
                            <ValidationMessage For="@(()=>modifier_group.modifier_group_name_en)" />
                        </TextInput>
                        <TextInput label="Name Kh" @bind-text="@modifier_group.modifier_group_name_kh" />
                        <SelectStatus @bind-selected_value="@modifier_group.status" />
                    </UIContainerBox>
                </UIGridCenter>
                <UIGridCenter>
                    <ComAddModifier modifer_group="@modifier_group" />
                </UIGridCenter>

                <UIGridCenter >
                    <ComAddModifierGroupProductCategory  modifier_group="@modifier_group" />
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter> 
                    <ComSavingFormButton is_loading="@is_saving" is_show_save_new="true" OnSaveNew="@(()=>is_save_and_new = true)" is_show_cancel_action="true" OnCancel="@OnCancel"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}
else
{
    <Spinner />
}
@if (is_error)
{
    <Error title="Product">@error_text</Error>
}

@code{
    [Parameter] public int clone_id { get; set; }
    [Parameter] public int id { get; set; }
    string controller_api = "ModifierGroup";
    ModifierGroupModel modifier_group = new ModifierGroupModel();

    bool is_save_and_new = false;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();

    }

    async Task LoadData()
    {
        is_loading = true;
        if (clone_id > 0 || id > 0)
        {
            if (clone_id > 0)
            {
                var resp = await http.ApiPost(controller_api + $"/clone/{clone_id}");
                if (resp.IsSuccess)
                {
                    modifier_group = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
                    title = $"Clone : {modifier_group.modifier_group_name_en}";
                }
            }
            else
            {
                var resp = await http.ApiGet($"{controller_api}({id})?$expand=modifier_group_items($expand=modifier,parent,children($expand=modifier);$filter=is_deleted eq false),modifier_group_product_categories($filter=is_deleted eq false)");
                if (resp.IsSuccess)
                {
                    modifier_group = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
                    title = $"Edit : {modifier_group.modifier_group_name_en}";
                }
            }
        }
        else
        {
            title = "Add New Modifier Group";
            modifier_group = new ModifierGroupModel();
        }
        is_loading = false;
    }

    async Task Save_Click()
    {
        Console.WriteLine(JsonSerializer.Serialize(modifier_group.modifier_group_product_categories));
        is_saving = true;

        // where don't add group item
        if (!modifier_group.modifier_group_items.Where(r=>r.is_deleted == false).Any())
        {
            toast.Add("Please add modifier section", MatBlazor.MatToastType.Warning);
            is_saving = false;
            return;
        }
        else
        {
            // where didn't add modifier into section
            foreach (var i in modifier_group.modifier_group_items.Where(r => r.is_deleted == false))
            {
                if (!i.children.Where(r=>r.is_deleted == false).Any())
                {
                    toast.Add($"Please add modifier into {i.section_name} section.", MatBlazor.MatToastType.Warning);
                    is_saving = false;
                    return;
                }
            }

        }

        // where section name empty
        if (modifier_group.modifier_group_items.Where(r=>r.is_deleted == false && string.IsNullOrEmpty(r.section_name)).Any())
        {
            toast.Add($"Section name cannot empty.", MatBlazor.MatToastType.Warning);
            is_saving = false;
            return;
        }

        // where didn't tick any category product
        if (!modifier_group.modifier_group_product_categories.Where(r => r.is_deleted == false).Any())
        {
            toast.Add($"Please tick product category.", MatBlazor.MatToastType.Warning);
            is_saving = false;
            return;
        }
        ModifierGroupModel save_model = JsonSerializer.Deserialize<ModifierGroupModel>(JsonSerializer.Serialize(modifier_group));


        var resp = await http.ApiPost("ModifierGroup/Save", save_model);
        if (resp.IsSuccess)
        {
            toast.Add("Save Modifier Group successfully", MatToastType.Success);
            save_model = JsonSerializer.Deserialize<ModifierGroupModel>(resp.Content.ToString());
            if (is_save_and_new)
            {
                modifier_group = new ModifierGroupModel();
                modifier_group.modifier_group_items = new List<ModifierGroupItemModel>();
                modifier_group.modifier_group_product_categories = new List<ModifierGroupProductCategoryModel>();
                nav.NavigateTo("modifiergroup/new");
                await LoadData();
            }
            else
            {
                nav.NavigateTo("modifiergroup/" + save_model.id);
            }
        }
        else {
            toast.Add("Save modifier group fail.", MatToastType.Warning);
        }
        is_saving = false;
    }

    void OnCancel() {
        if (id > 0)
        {
            nav.NavigateTo("modifiergroup/" + id);
        }else
        {
            nav.NavigateTo("modifiergroup");
        }

    }
}
