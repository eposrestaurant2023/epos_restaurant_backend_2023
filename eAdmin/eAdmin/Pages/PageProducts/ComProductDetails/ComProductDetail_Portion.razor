@inject IHttpService http ;
@inject IStringLocalizer<Resource> lang
<UIContainerBox Title="@(lang["Product Prices"])" Icon="monetization_on">
    @if (is_loading)
    {
        <Spinner />
    }
    else
    {
        @if (product_portions != null && product_portions.Any())
        {
<div class="uk-overflow-auto">
    <table class="uk-table  not-view-table set-verticle-bottom uk-table-small uk-table-striped uk-table-hover  ">
        <thead>
            <tr>
                <ThAuto>@lang["Portion"]</ThAuto>
                <th>@lang["Unit (multiplier)"]</th>
                <ThRight>@lang["Cost"]</ThRight>
                @foreach (var p in gv.price_rules)
                {
                    <ThRight>
                        <div>@p.price_name</div>
                        <div>
                            <LabelActive is_visible="@(IsPriceRuleActive(p))" />
                            <LabelInActive is_visible="@(!IsPriceRuleActive(p))" />
                        </div>
                    </ThRight>
                }
            </tr> 
        </thead>
        <tbody>
            @foreach (var pp in product_portions.Where(r => r.is_deleted == false))
            {
                <tr>
                    <td>
                        @pp.portion_name
                    </td>
                    <td>
                        @pp.unit?.unit_name (@pp.multiplier.ToString(gv.currency_format))
                    </td>
                    <TdRight>
                        @pp.cost.ToString(gv.currency_format)
                    </TdRight>
                    @foreach (var p in gv.price_rules)
                    {

                        <TdRight>
                            @if (pp.product_prices.Where(r => r.price_rule_id == p.id).Any())
                            {
                                if (pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().status)
                                {
                                    <span>@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().price.ToString(gv.currency_format)</span>
                                }
                                else
                                {
                                    <span style="color:#ede7e7">@pp.product_prices.Where(r => r.price_rule_id == p.id).FirstOrDefault().price.ToString(gv.currency_format)</span>
                                }
                            }
                        </TdRight>
                    }

                </tr>

            }
        </tbody>
    </table>
</div>
        }
        else
        {
            <p>@lang["There is no product price."]</p>
        }

    }


</UIContainerBox>
<Spacing Number="10" />
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int product_id { get; set; }


    List<ProductPortionModel> product_portions = new List<ProductPortionModel>();


    bool is_loading;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await Task.Delay(100);

        var resp = await http.ApiGetOData($"ProductPortion?$select=portion_name, multiplier,cost&$expand=unit($select=unit_name),product_prices($select=id,price_rule_id,price,is_deleted,status)&$filter=product_id eq {product_id} and is_deleted eq false");
        if (resp.IsSuccess)
        {
            product_portions = JsonSerializer.Deserialize<List<ProductPortionModel>>(resp.Content.ToString());
        }
        is_loading = false;
    }


    bool IsPriceRuleActive(PriceRuleModel p)
    {
        if (product_portions != null && product_portions.Any())
        {
            var data = product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.price_rule_id == p.id).ToList();
            if (data.Any())
            {
                return data.FirstOrDefault().status;
            }
            // return product_portions.Where(r => r.is_deleted == false).SelectMany(r => r.product_prices).Where(r => r.price_rule_id == p.id).FirstOrDefault().status;
        }
        return false;

    }
}
