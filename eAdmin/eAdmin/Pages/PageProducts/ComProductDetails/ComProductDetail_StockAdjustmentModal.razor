@inject IHttpService http
@inject IStringLocalizer<Resource> lang
@inject IMatToaster toast
<EditFormContext model="@stock_location_products" is_save="true" is_cancel="true" Save_Click="@OnSaveClick" Cancel_Click="@(()=>OnCancelClick())" modal_width="800px" is_opened="@is_opened" title="@lang["Stock Adjustment"]" is_submitting="is_saving">
    <Com is_visible="@stock_location_products.Any()">
        <table class="uk-table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
            <thead>
                <ThAuto>@lang["Business Branch"]</ThAuto>
                <ThAuto>@lang["Stock Location"]</ThAuto>
                <ThCenter>@lang["Quantity On Hand"]</ThCenter>
                <ThCenter>@lang["Quantity"]</ThCenter>
                <ThCenter>@lang["Unit"]</ThCenter>
                <ThCenter>@lang["Different"]</ThCenter>
            </thead>
            <tbody>
                @foreach (var p in stock_location_products.OrderByDescending(r => r.stock_location_id).ToList())
                {
                <tr>
                    <td>@p.stock_location?.business_branch?.business_branch_name_en</td>
                    <td>
                        <div>
                            @p.stock_location.stock_location_name
                        </div>
                        <Icon OnClick="@(()=> { p.is_add_note = !p.is_add_note; })" icon="chat" />

                        @if (p.is_add_note)
                        {
                            <div>
                                <TextInput @bind-text="@p.note" width="180px" type="textarea" row="2" is_height_auto="true" />
                            </div>
                        }
                        else
                        {
                            <Column is_visible="@(!string.IsNullOrEmpty(p.note))" ClassName="text-area wrp-comment-tt text-muted">
                                @p.note
                            </Column>
                        }
                    </td>

                    <TdCenter>
                        @p.quantity.ToString(gv.quantity_format)
                    </TdCenter>
                    <TdCenter>
                        <NumberInput label="" class_name="uk-input uk-form-small uk-text-center" @bind-text="@p.adjust_quantity" text_format="@gv.quantity_format" width="100px" />
                    </TdCenter>
                    <TdCenter>
                        @p.unit
                    </TdCenter>

                    <TdCenter>
                        @((p.adjust_quantity - p.quantity).ToString(gv.quantity_format))
                    </TdCenter>
                </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3">@lang["Total Quantity"]</td>
                    <TdCenter>@stock_location_products.Sum(r => r.adjust_quantity).ToString(gv.quantity_format)</TdCenter>
                    <td></td>
                    <TdCenter>@stock_location_products.Sum(r => r.adjust_quantity - r.quantity).ToString(gv.quantity_format)</TdCenter>
                </tr>
                
            </tfoot>
        </table>
    </Com>
</EditFormContext>
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public EventCallback<bool> is_openedChanged { get; set; }
    [Parameter] public List<StockLocationProductModel> stock_location_products { get; set; }
    [Parameter] public EventCallback<List<StockLocationProductModel>> stock_location_productsChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_Click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> SaveClicked { get; set; }



    bool is_loading, is_saving, ShowModal;
    int TotalRecord = 0;

    async Task OnCancelClick()
    {

        is_opened = false;
        await is_openedChanged.InvokeAsync(is_opened);
        await Cancel_Click.InvokeAsync(new MouseEventArgs());
    }


    public async Task OnSaveClick()
    {
        is_saving = true;

        if (! stock_location_products.Where(r => r.quantity != r.adjust_quantity).Any()){
            toast.Add(lang["There's no quantity changed"], MatToastType.Warning);
            is_saving = false;
            return;
        }
        List<QuantityAdjustmentModel> quantity_adjustments = new List<QuantityAdjustmentModel>();
        foreach(var d in stock_location_products.Where(r => r.quantity != r.adjust_quantity))
        {
            quantity_adjustments.Add(new QuantityAdjustmentModel() { quantity=d.adjust_quantity - d.quantity, stock_location_id=d.stock_location_id, product_id = d.product_id });
        }

        var resp = await http.ApiPost("StockLocationProduct/Save/Multiple", quantity_adjustments);
        if (resp.IsSuccess)
        {

            is_opened = false;
            await is_openedChanged.InvokeAsync(is_opened);
            await SaveClicked.InvokeAsync();

            stock_location_products.ForEach(r => r.quantity = r.adjust_quantity);
            await stock_location_productsChanged.InvokeAsync(stock_location_products);

            toast.Add(lang["Saved Successfully"], MatToastType.Success);
        }
        else
        {

            toast.Add(resp.Content.ToString(), MatToastType.Warning);
        }
        is_saving = false;
    }

}
