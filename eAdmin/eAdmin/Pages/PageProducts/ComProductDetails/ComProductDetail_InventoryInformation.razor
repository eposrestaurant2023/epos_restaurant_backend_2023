@inject IHttpService http
@inject IStringLocalizer<Resource> lang

<UIContainerBox Title="@lang["Inventory Information"]" is_show_edit_button="@(!product_deleted)" OnEditClick="@OnOpenModel">
    <Com is_visible="@(!is_loading)">
        <Table Items="@models.OrderByDescending(r=>r.stock_location_id).ToList()"
               isLoading="@is_loading"
               ShowPager="false"
               ShowCounter="true"
               ShowPaging="false"
               ClassName="uk-table-small uk-table-striped uk-table-hover"
               ScrollClass="uk-overflow-auto">
            <TableHeader>
                <ThAuto>@lang["Business Branch"]</ThAuto>
                <ThAuto>@lang["Stock Location"]</ThAuto>
                <ThCenter>@lang["QTY"]</ThCenter>
                <ThCenter>@lang["Unit"]</ThCenter>
                <ThCenter>@lang["Min QTY"]</ThCenter>
                <ThCenter>@lang["Max QTY"]</ThCenter>
            </TableHeader>
            <RowTemplate Context="p">
                <td>@(gv.current_language.language_id == "km-KH" ?p.stock_location?.business_branch?.business_branch_name_kh: p.stock_location?.business_branch?.business_branch_name_en)</td>
                <td>
                    <div>
                        @p.stock_location?.stock_location_name
                    </div>
                    <Column ClassName="uk-text-left">
                        <LabelOverStock is_visible="@p.is_over_stock" />
                        <LabelLowStock is_visible="@p.is_low_stock" />
                        <LabelOutOfStock is_visible="@p.is_out_of_stock" />
                    </Column>
                </td>
                <TdCenter>@p.quantity.ToString(gv.quantity_format)</TdCenter>
                <TdCenter>@p.unit</TdCenter>
                <TdCenter>@p.min_quantity.ToString(gv.quantity_format)</TdCenter>
                <TdCenter>@p.max_quantity.ToString(gv.quantity_format)</TdCenter>
            </RowTemplate>
            <TableFooter>
                <tr>
                    <td colspan="3">@lang["Total Quantity"]</td>
                    <TdCenter>@models.Sum(r => r.quantity).ToString(gv.quantity_format)</TdCenter>
                    <td colspan="3"></td>
                </tr>
            </TableFooter>
        </Table>
        @if (!is_ingredient) {
            <ComProductDetail_DefaultStockLocation product_id="@product_id"/>
        }
    </Com>
</UIContainerBox>
@if (ShowModal)
{
    <ComProductDetail_StockAdjustmentModal  @bind-stock_location_products="models" @bind-is_opened="@ShowModal" SaveClicked="@(()=>ShowModal=false)"/>

}
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int product_id { get; set; }
    [Parameter] public bool product_deleted { get; set; }
    [Parameter] public bool is_ingredient { get; set; } = false;
    List<StockLocationProductModel> models = new List<StockLocationProductModel>();
    bool is_loading, is_saving, ShowModal;


    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        if (product_id > 0)
        {
            // branch by permission 
            string filter_branches = "";
            foreach (var b in gv.stock_location_by_role)
            {
                filter_branches += $"stock_location/id eq {b.id} or ";
            }

            filter_branches = filter_branches.Substring(0, filter_branches.Length - 4); 

            var resp = await http.ApiGetOData($"StockLocationProduct?$expand=stock_location($select=stock_location_name;$expand=business_branch($select=business_branch_name_en,business_branch_name_kh))&$filter=is_deleted eq false and stock_location/is_deleted eq false and product_id eq {product_id} and ({filter_branches})");
            if (resp.IsSuccess)
            {
                models = JsonSerializer.Deserialize<List<StockLocationProductModel>>(resp.Content.ToString());

            }
        }

        is_loading = false;
    }


    public void OnOpenModel()
    {
        models.ForEach(r => r.adjust_quantity = r.quantity);
        ShowModal = true;

    }



}
