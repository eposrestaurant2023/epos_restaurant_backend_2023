 @inject IHttpService http; 
@if(product_id>0 && stock_location_id != Guid.Empty)
{
    if (is_loading)
    {
    <Spinner/>
    }
    else
    {
        <div>@($"{quantity.ToString(gv.quantity_format)} {unit}")</div>
        <div>
            <LabelOutOfStock is_visible="@(quantity <= 0)"/>
            <LabelLowStock is_visible="@(quantity < min_quantity && quantity > 0)"/>
        </div>
    }
}else
{
    <span>-</span>
}
@code {
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int product_id { get; set; }
    [Parameter] public Guid stock_location_id { get; set; }
    decimal quantity;
    string unit = "";
    decimal min_quantity;
    bool is_loading;

    protected override async Task OnParametersSetAsync()
    {
        is_loading = true;
        await Task.Delay(500);
        var resp = await http.ApiGetOData($"StockLocationProduct?$select=quantity,unit,min_quantity,max_quantity&$filter=product_id eq {product_id} and stock_location_id  eq {stock_location_id}");

        if (resp.IsSuccess)
        {
            var data = JsonSerializer.Deserialize<List<StockLocationProductModel>>(resp.Content.ToString());
            if (data.Any())
            {
                var _data = data.FirstOrDefault();
                quantity = _data.quantity;
                unit = _data.unit;
                min_quantity = _data.min_quantity;
            }
        }

        is_loading = false;

    }
}
