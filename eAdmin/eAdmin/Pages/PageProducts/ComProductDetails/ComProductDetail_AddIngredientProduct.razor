@inject IHttpService http
@inject IMatToaster toast
<Loading is_loading="@is_saving"/>
<EditFormContext Cancel_Click="@OnCancelClick" model="@product_portion" is_opened="is_open" title="@($"Ingredients Of {product_portion.portion_name}")" Save_Click="OnSaveClick" modal_width="800px" is_submitting="@is_saving">
    <IngredientProductTypeahead @bind-product="@product" />
    <hr/> 
    <table class="uk-table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
        <tr>
            <ThAuto>Ingredient Name</ThAuto>
            <ThCenter>Quantity</ThCenter>
            <ThCenter>Unit</ThCenter>
            <ThRight>Cost </ThRight>
            <ThRight>Total</ThRight>
            <ThCenter></ThCenter>
        </tr>
        @if(product_portion.product_ingredients.Where(r=>r.is_deleted==false).Any()){
            foreach(var p in product_portion.product_ingredients.Where(r=>r.is_deleted==false))
            {
                <tr>
                    <td>
                        @p.ingredient?.product_display_name
                    </td>
                    <TdCenter> 
                        <NumberInput @bind-text="@p.quantity" class_name="uk-text-center"/>
                    </TdCenter>
                    <TdCenter>
                        <SelectUnit @bind-selected_value="@p.unit_id" label="" width="auto"/>
                    </TdCenter>
                    <TdRight>
                        <NumberInput @bind-text="@p.cost" class_name="uk-text-right" width="90px"/>
                    </TdRight>
                    <TdRight>
                       @p.total_cost.ToString(gv.currency_format)
                    </TdRight>
                    <TdRight>
                        <Icon icon="delete" OnClick="@(()=>OnDeleteClick(p))"/>
                    </TdRight>
                </tr> 
            }
    <tfoot>
        <tr>
            <td>
                Total 
            </td>
            <TdCenter>
                @product_portion.product_ingredients.Where(r=>r.is_deleted == false).Sum(r=>r.quantity).ToString(gv.quantity_format)
                                         
            </TdCenter>
            <TdCenter>
            </TdCenter>
            <TdRight>
            </TdRight>
            <TdRight>
                @product_portion.product_ingredients.Where(r => r.is_deleted == false).Sum(r => r.total_cost).ToString(gv.currency_format)
            </TdRight>
            <TdRight>
                
            </TdRight>
        </tr>
    </tfoot>
        }
        else
        {
            <tr>
                <td colspan="6">
                <ComEmptyTemplate padding_top_bottom="25px"/>
                </td>
            </tr>
        }
    </table>
</EditFormContext>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public ProductPortionModel product_portion { get; set; }


    [Parameter] public bool is_open { get; set; }
    [Parameter] public EventCallback<bool> is_openChanged { get; set; }
    [Parameter] public EventCallback<ProductPortionModel> Save_Click { get; set; }

    bool is_saving;
    private ProductModel _product;

    public ProductModel product
    {
        get { return _product; }
        set
        {

            var data = product_portion.product_ingredients.Where(r => r.ingredient_id == value.id && r.is_deleted == false);


            if (data.Any())
            {
                data.FirstOrDefault().quantity = data.FirstOrDefault().quantity + 1;
            }
            else
            {
                product_portion.product_ingredients.Add(new ProductIngredientModel() { ingredient = value, ingredient_id = value.id,unit_id=value.unit_id });
            }
            value = null;
            _product = value;
        }
    }




    async Task OnCancelClick()
    {
        await is_openChanged.InvokeAsync(false);
    }

    async Task OnSaveClick()
    {


        is_saving = true;

        ProductPortionModel save_model = new ProductPortionModel();
        save_model = JsonSerializer.Deserialize<ProductPortionModel>(JsonSerializer.Serialize(product_portion));

        save_model.product_ingredients.ForEach(r => r.ingredient = null);
        save_model.product_ingredients.ForEach(r => r.unit = null);
         
        var resp = await http.ApiPost("ProductPortion/save", save_model);
        if (resp.IsSuccess)
        {
            save_model = JsonSerializer.Deserialize<ProductPortionModel>(resp.Content.ToString());
            toast.Add("Save ingredient successfully", MatToastType.Success);
            await is_openChanged.InvokeAsync(false);
            await Save_Click.InvokeAsync(save_model);
        }
        else
        {

            toast.Add("Save ingredient fail", MatToastType.Warning);
        }
        is_saving = false;

    }


    void OnDeleteClick(ProductIngredientModel p)
    {
        if (p.id > 0)
        {
            p.is_deleted = true;
        }else
        {
            product_portion.product_ingredients.Remove(p);
        }
    }
}
