@inject IHttpService http
@inject IMatToaster toast
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@is_saving"/>
@if (!is_loading) {
<EditFormContext Cancel_Click="@OnCancelClick" form_attributes="cus_typeherd" model="@product_portion"  is_opened="is_open" title="@($"Items Of {product_portion.portion_name}")" Save_Click="OnSaveClick" modal_width="800px" is_submitting="@is_saving">
    <IngredientProductTypeahead is_search_all_product="@is_search_all_product" product="@product" productChanged="@Selected"/>
    <hr/> 
    <table class="uk-table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
        <tr>
            <ThAuto>@lang["Name"]</ThAuto>
            <ThCenter>@lang["Quantity"]</ThCenter>
            @if (is_search_all_product) {  
            <ThCenter>@lang["Portion"]</ThCenter>
            }
            <ThCenter>@lang["Unit"]</ThCenter>
            <ThRight>@lang["Cost"]</ThRight>
            <ThRight>@lang["Total Cost"]</ThRight>
            <ThCenter></ThCenter>
        </tr>
        @if (product_portion.product_ingredients.Where(r => r.is_deleted == false).Any()) {
            foreach (var p in product_portion.product_ingredients.Where(r => r.is_deleted == false))
            {
    <tr>
        <td>
            <span>@p.ingredient?.product_display_name</span>
            <br />
            <LabelInventory is_visible="@p.ingredient.is_inventory_product" />
            <LabelIngredient is_visible="@p.ingredient.is_ingredient_product" />
            <LabelMenuProduct is_visible="@p.ingredient.is_menu_product" />
        </td>

        <TdCenter>
            <NumberInput @bind-text="@p.quantity" class_name="uk-text-center" />
        </TdCenter>
        @if (is_search_all_product)
        {
            <TdCenter>
                <select value="@p.ingredient_portion_id" @onchange="@((ui) => OnPortionChanged(p, (string)ui.Value))" class="uk-select uk-form-small" style="min-width:80px;">
                    <option value="0">@lang["Select Portion"]</option>
                    @foreach (var pt in p.ingredient.product_portions)
                    {
                        <option value="@pt.id">@pt.portion_name</option>
                    }
                </select>
            
            </TdCenter>
        }
            <TdCenter>
                <ComProductIngredientSelectUnit product_ingredient="@p" @bind-selected_value="@p.unit_id" is_ready_only="@(p.ingredient_portion_id>0 || p.ingredient.is_inventory_product==false)" />
            </TdCenter>
            <TdRight>
                <NumberInput @bind-text="@p.cost" class_name="uk-text-right" width="90px" />
            </TdRight>
            <TdRight>
                @p.total_cost.ToString(gv.currency_format)
            </TdRight>
            <TdRight>
                <Icon icon="delete" OnClick="@(() => OnDeleteClick(p))" />
            </TdRight>
        </tr> 
            }
    <tfoot>
        <tr>
            <td>
                @lang["Total"]
            </td>
            <TdCenter>
                @product_portion.product_ingredients.Where(r => r.is_deleted == false).Sum(r => r.quantity).ToString(gv.quantity_format)
            </TdCenter>
            @if (is_search_all_product)
            {
                <TdCenter></TdCenter>
            }
           
            <TdCenter></TdCenter>
            <TdRight>
            </TdRight>
            <TdRight>
                @product_portion.product_ingredients.Where(r => r.is_deleted == false).Sum(r => r.total_cost).ToString(gv.currency_format)
            </TdRight>
            <TdRight>

            </TdRight>
        </tr>
    </tfoot>
        }
        else
        {
            <tr>
                <td colspan="6">
                <ComEmptyTemplate padding_top_bottom="25px"/>
                </td>
            </tr>
        }
    </table>
</EditFormContext>
}
@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int product_portion_id { get; set; }
    [Parameter] public bool is_open { get; set; }
    [Parameter] public bool is_search_all_product { get; set; } = false;
    [Parameter] public EventCallback<bool> is_openChanged { get; set; }
    [Parameter] public EventCallback<ProductPortionModel> Save_Click { get; set; }
    ProductPortionModel product_portion = new ProductPortionModel();
    bool is_loading = false;
    private ProductModel _product;

    public ProductModel product
    {
        get { return _product; }
        set
        {

            _product = value;
        }
    }

    bool is_saving;

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        var resp = await http.ApiGet($"ProductPortion({product_portion_id})?$expand=product_ingredients($expand=ingredient($select=id,product_code,product_name_en,product_name_kh,is_ingredient_product,is_menu_product,is_inventory_product;$expand=product_portions($select=id,unit_id,portion_name,cost;$filter=is_deleted eq false)),unit($select=id,unit_name,unit_category_id);$filter=is_deleted eq false)");
        if (resp.IsSuccess)
        {
            product_portion = JsonSerializer.Deserialize<ProductPortionModel>(resp.Content.ToString());
        }

        is_loading = false;
    }

    void Selected(ProductModel value)
    {
        if (value.is_composite_product)
        {
            toast.Add(lang["You cannot a composite product to a composite product."], MatToastType.Warning);
            return;
        }
        if(product_portion.product_id == value.id)
        {
            toast.Add(lang["You cannot select current product as composite item."], MatToastType.Warning);
            return;
        }


        var data = product_portion.product_ingredients.Where(r => r.ingredient_id == value.id && r.is_deleted == false);


        if (data.Any())
        {
            data.FirstOrDefault().quantity = data.FirstOrDefault().quantity + 1;
        }
        else
        {
            product_portion.product_ingredients.Add(
                new ProductIngredientModel()
                {
                    ingredient = value,
                    ingredient_id = value.id,
                    unit = gv.units.Where(r=>r.id == value.unit_id).FirstOrDefault(),
                    unit_id = value.unit_id,
                    cost = value.cost
                }
           );
        }

        product = null;
    }

    async Task OnCancelClick()
    {

        is_open = false;
        await is_openChanged.InvokeAsync(false);
    }

    async Task OnSaveClick()
    {


        is_saving = true;

        ProductPortionModel save_model = new ProductPortionModel();
        save_model = JsonSerializer.Deserialize<ProductPortionModel>(JsonSerializer.Serialize(product_portion));
        save_model.product_ingredients.ForEach(r => r.ingredient_portion_id = (r.ingredient_portion_id == 0 ? null : r.ingredient_portion_id));
        // set defualt category for new ingredient
        if(gv.product_categories.Where(r => r.is_defualt == true).FirstOrDefault() != null)
        {
            save_model.product_ingredients.Where(r => r.ingredient.id == 0).ToList().ForEach(r => r.ingredient.product_category_id = gv.product_categories.Where(r => r.is_defualt == true).FirstOrDefault().id);
        }
        else
        {
            toast.Add("Invalid Defualt Ingredient Category", MatToastType.Success);
            return;
        }
        save_model.product_ingredients.Where(r=>r.ingredient.id > 0).ToList().ForEach(r => r.ingredient = null);
        save_model.product_ingredients.ForEach(r => r.unit = null);

        var resp = await http.ApiPost("ProductPortion/save", save_model);
        if (resp.IsSuccess)
        {
            save_model = JsonSerializer.Deserialize<ProductPortionModel>(resp.Content.ToString());
            toast.Add("Save ingredient successfully", MatToastType.Success);
            await is_openChanged.InvokeAsync(false);
            await Save_Click.InvokeAsync(save_model);
        }
        else
        {

            toast.Add("Save ingredient fail", MatToastType.Warning);
        }
        is_saving = false;

    }


    void OnDeleteClick(ProductIngredientModel p)
    {
        if (p.id > 0)
        {
            p.is_deleted = true;
        }else
        {
            product_portion.product_ingredients.Remove(p);
        }
    }

    void OnChangedUnit(ProductIngredientModel p)
    {
        //if (p.ingredient_id > 0)
        //{
        //    if (product_portion.product_ingredients.Where(r => r.id == p.id).FirstOrDefault() != null)
        //    {

        //        product_portion.product_ingredients.Where(r => r.id == p.id).FirstOrDefault().unit_id = p.unit.id;
        //        product_portion.product_ingredients.Where(r => r.id == p.id).FirstOrDefault().cost = p.cost;
        //        product_portion.product_ingredients.Where(r => r.id == p.id).FirstOrDefault().quantity = p.quantity;
        //    }

        //}
        //else
        //{
        //    product_portion.product_ingredients.Add(p);
        //}

    }

    void OnPortionChanged(ProductIngredientModel p, string portion_id)
    {
        int id = Convert.ToInt32(portion_id);
        if (id == 0)
        {
            p.ingredient_portion_id = 0;
        }
        else
        {
            p.ingredient_portion_id = id;
            var d = p.ingredient.product_portions.Where(r => r.id == id);

            if (d.Any())
            {
                p.unit_id = d.FirstOrDefault().unit_id;
                p.cost = d.FirstOrDefault().cost;
            }
        }
    }
}
