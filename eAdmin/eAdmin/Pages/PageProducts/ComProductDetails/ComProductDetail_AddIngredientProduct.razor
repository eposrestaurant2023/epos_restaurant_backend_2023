<EditFormContext Cancel_Click="@OnCancelClick" model="@models" is_opened="is_open" title="Product Ingredient" Save_Click="OnSaveClick" modal_width="800px">
    <IngredientProductTypeahead @bind-product="@product" />
    <hr/>
    @JsonSerializer.Serialize(models)
    <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
        <tr>
            <ThAuto>Ingredient Name</ThAuto>
            <ThCenter>Quantity</ThCenter>
            <ThCenter>Unit</ThCenter>
            <ThRight>Cost</ThRight>
            <ThCenter></ThCenter>
        </tr>
        @foreach(var p in models)
        {
            <tr>
                <td>
                    @p.product_ingredient?.product_display_name
                </td>
                <TdCenter> 
                    <NumberInput @bind-text="@p.quantity"/>
                </TdCenter>
                <TdCenter>
                    <TextInput @bind-text="@p.unit"/>
                </TdCenter>
                <TdRight>
                    <NumberInput @bind-text="@p.cost"/>
                </TdRight>
                <TdRight>
                    <Icon icon="delete"/>
                </TdRight>
            </tr>
        }
    </table>
</EditFormContext>

@code {
    [Parameter] public List<ProductIngredientModel> models { get; set; }
    [Parameter] public bool is_open { get; set; }
    [Parameter] public EventCallback<bool> is_openChanged { get; set; } 
    [Parameter] public EventCallback<List<ProductIngredientModel>> Save_Click { get; set; }
 

    async Task OnCancelClick()
    {
        await is_openChanged.InvokeAsync(false);
    }
    async Task OnSaveClick()
    {
        Console.WriteLine(JsonSerializer.Serialize(models));
        
        await Save_Click.InvokeAsync(models);
        await is_openChanged.InvokeAsync(false); 
    }
    private ProductModel _product;

    public ProductModel product
    {
        get { return _product; }
        set {

            if(!models.Where(r=>r.is_deleted==false && r.product_menu.product_name_en.Trim().ToLower().Contains(value.product_name_en.ToLower().Trim())).Any())
            {
                models.Add(new ProductIngredientModel() { product_ingredient = value , product_ingredient_id=value.id });
            }

            value = null;
            _product = value;
        }
    }
}
