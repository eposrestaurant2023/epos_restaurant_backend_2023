@inject IHttpService http
@inject IMatToaster toast
<EditFormContext Cancel_Click="@OnCancelClick" model="@models" is_opened="is_open" title="Product Ingredient" Save_Click="OnSaveClick" modal_width="800px">
    <IngredientProductTypeahead @bind-product="@product" />
    <hr/> 
    <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
        <tr>
            <ThAuto>Ingredient Name</ThAuto>
            <ThCenter>Quantity</ThCenter>
            <ThCenter>Unit</ThCenter>
            <ThRight>Cost</ThRight>
            <ThCenter></ThCenter>
        </tr>
        @if(models.Any()){
            foreach(var p in models)
            {
                <tr>
                    <td>
                        @p.ingredient?.product_display_name
                    </td>
                    <TdCenter> 
                        <NumberInput @bind-text="@p.quantity" width="80px" class_name="uk-text-center"/>
                    </TdCenter>
                    <TdCenter>
                        <TextInput @bind-text="@p.unit" width="100px" class_name="uk-text-center"/>
                    </TdCenter>
                    <TdRight>
                        <NumberInput @bind-text="@p.cost" width="120px" class_name="uk-text-right"/>
                    </TdRight>
                    <TdRight>
                        <Icon icon="delete" OnClick="@(()=>OnDeleteClick(p))"/>
                    </TdRight>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">
                <ComEmptyTemplate padding_top_bottom="25px"/>
                </td>
            </tr>
        }
    </table>
</EditFormContext>

@code {
    [Parameter] public List<ProductIngredientModel> models { get; set; }
    [Parameter] public int selected_product_portion_id { get; set; }
    [Parameter] public int selected_product_menu_id { get; set; }
    [Parameter] public bool is_open { get; set; }
    [Parameter] public EventCallback<bool> is_openChanged { get; set; } 
    [Parameter] public EventCallback<List<ProductIngredientModel>> Save_Click { get; set; }
     
    bool is_saving;

    async Task OnCancelClick()
    {
        await is_openChanged.InvokeAsync(false);
    }

    async Task OnSaveClick()
    {
        

        is_saving = true;
        
        List<ProductIngredientModel> save_models = new List<ProductIngredientModel>();
        save_models = JsonSerializer.Deserialize<List<ProductIngredientModel>>(JsonSerializer.Serialize(models));

        save_models.ForEach(r => r.product_menu = null);
        save_models.ForEach(r => r.product_portion = null);
        save_models.ForEach(r => r.ingredient = null);
        
        Console.WriteLine(JsonSerializer.Serialize(save_models));

        var resp = await http.ApiPost("ProductIngredient/multiple/save", save_models);
        if (resp.IsSuccess)
        {
            toast.Add("Save product successfully", MatToastType.Success);
            await is_openChanged.InvokeAsync(false); 
        }
        else
        {

            toast.Add("Save product fail", MatToastType.Warning);
        }
        is_saving = false;
        
    }

    private ProductModel _product;

    public ProductModel product
    {
        get { return _product; }
        set {
            Console.WriteLine(value.id);

            if (models.Where(r=>r.ingredient_id == value.id).Any())
            {
                models.Where(r => r.ingredient_id == value.id).FirstOrDefault().quantity = models.Where(r => r.ingredient_id == value.id).FirstOrDefault().quantity + 1;
            }
            else
            {
                models.Add(new ProductIngredientModel() { ingredient = value , ingredient_id=value.id, product_portion_id = selected_product_portion_id, product_menu_id = selected_product_menu_id });
            }
            value = null;
            _product = value;
        }
    }

    void OnDeleteClick(ProductIngredientModel p)
    {
        models.Remove(p);
    }
}
