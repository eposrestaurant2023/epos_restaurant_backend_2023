@page "/note"
@inherits PageCore;

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@page_title"></Title>
    <PageContainer roles="@gv.GetRole("note_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle>
                    <HeaderTemplate>
                        @page_title
                    </HeaderTemplate>
                    <FilterTemplate>
                        <PageFilter title="Status">
                            <ModuleView module_views="@gv.GetModuleView("page_note")" OnClick="@ViewClick" />
                        </PageFilter>
                    </FilterTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <AddButton roles="@gv.GetRole("note_add")" OnClick="@AddNew">New</AddButton>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <ComSearch show_advance_filter="false" place_holder="@GetFilterValue2(filters, "keyword","")" KeywordChanged="@OnSearch" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Com is_visible="@(notes != null)">
                <Table ShowCounter="true"
                       isLoading="@is_loading_data"
                       Items="@notes"
                       ShowPager="false"
                       ShowPagination="false"
                       ShowTotalCount="false"
                       EmptyText="There's no record in the system">
                    <TableHeader>
                        <Th ClassName="cp col-auto">Business Branch</Th>
                        <Th ClassName="cp col-auto">Categery</Th>
                        <Th ClassName="cp col-auto">Note</Th>
                        <Th>Status</Th>
                        <th></th>
                    </TableHeader>
                    <RowTemplate Context="p">
                        <td>
                            <ComAuthorize OnClick="@(()=>OnEdit(p.id))" roles="@gv.GetRole("note_edit")">
                                @p.business_branch?.business_branch_name_en
                            </ComAuthorize>
                        </td>
                        <td>
                            <ComAuthorize OnClick="@(()=>OnEdit(p.id))" roles="@gv.GetRole("note_edit")">
                                @p.category_note?.category_note_name_en
                            </ComAuthorize>
                        </td>
                        <td>
                            @p.note
                        </td>
                        <TdCenter>
                            <LabelDeleted is_visible="@p.is_deleted" />
                            <LabelActive is_visible="@(!p.is_deleted && p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("note_edit")" is_loading="@p.is_change_status" />
                            <LabelInActive is_visible="@(!p.is_deleted && !p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("note_edit")" is_loading="@p.is_change_status" />
                        </TdCenter>
                        <TdActions is_loading="@p.is_loading">
                            <TableActionItem roles="@gv.GetRole("note_edit")" icon="edit" is_visible="@(!p.is_deleted)" OnClick="@(()=>OnEdit(p.id))">Edit</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("note_add")" icon="file_copy" OnClick="@(()=>Clone_Click(p.id))">Clone</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("note_edit")" icon="highlight_off" is_visible="@(p.status && !p.is_deleted)" OnClick="@(()=>OnToogleStatus(p))">Inactive</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("note_edit")" icon="check" is_visible="@(!p.status && !p.is_deleted)" OnClick="@(() => OnToogleStatus(p))">Active</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("note_delete")" icon="delete" is_visible="@(!p.is_deleted)" OnClick="@(() => OnDelete(p))">Delete</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("note_restore")" icon="refresh" is_visible="@(p.is_deleted)" OnClick="@(()=>OnRestore(p))">Restore</TableActionItem>
                        </TdActions>
                    </RowTemplate>
                </Table>
            </Com>
        </PageBody>
        @if (ShowModal)
        {
            <ComAddNote Cancel_click="@(()=> { ShowModal = false;model = new NoteModel();})" Save_Click="@OnSave" note="@model" modal_title="@ModalTitle" is_dialog_open="ShowModal" />
        }
    </PageContainer>
}
@code{
    List<NoteModel> notes = new List<NoteModel>();
    NoteModel model = new NoteModel();
    List<FilterModel> filters = new List<FilterModel>();
    string page_title = "";

    bool ShowModal = false;
    string ModalTitle = "";

    string controller_api = "note";
    DateTime date = DateTime.Now;
    string url = "";

    public string ControllerApi
    {
        get
        {
            return url = $"{controller_api}?$expand=business_branch($select=id,business_branch_name_en),category_note($select=id,category_note_name_en)&keyword={GetFilterValue2(filters, "keyword", "").ToString()}" + GetFilter(filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;

        if (page_title == "")
        {
            page_title = "Price Rule";
            var default_view = gv.GetDefaultModuleView("page_note");
            if (default_view != null)
            {
                page_title = default_view.title;
                filters = default_view.filters;
            }
        }
        await LoadData();
    }

    void AddNew()
    {
        model = new NoteModel();
        ShowModal = true;
        ModalTitle = "Add New";
    }

    async Task Clone_Click(int id)
    {
        is_loading_data = true;
        var resp = await http.ApiPost(controller_api + "/clone/" + id);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<NoteModel>(resp.Content.ToString());
        }
        ModalTitle = "Clone:" + model.note;
        ShowModal = true;
        is_loading_data = false;
    }

    async Task ViewClick(ModuleViewModel m)
    {
        filters.Clear();
        filters = m.filters;
        page_title = m.title;
        await LoadData();
    }

    async Task LoadData(string api_url = "")
    {

        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
        }
        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            notes = JsonSerializer.Deserialize<List<NoteModel>>(resp.Content.ToString());
        }
        is_loading = false;
    }

    async Task OnSave()
    {
        model = new NoteModel();
        ShowModal = false;
        await LoadData();
    }


    async Task OnEdit(int id)
    {
        is_loading_data = true;

        var resp = await http.ApiGet(controller_api + $"({id})");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<NoteModel>(resp.Content.ToString());
        }
        ModalTitle = "Edit:" + model.note;
        ShowModal = true;
        is_loading_data = false;
    }


    async Task OnToogleStatus(NoteModel p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }

    async Task OnToogleStatusLabel(NoteModel p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }

    async Task SaveStatus(NoteModel p)
    {
        var price = new NoteModel();
        price = p;
        price.status = !price.status;
        var resp = await http.ApiPost(controller_api + "/save", price);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            await LoadData();
        }
    }

    async Task OnDelete(NoteModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Delete Note", "Are you sure you want to delete this record?"))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add("Delete Note successfully", MatToastType.Success);
        }
        p.is_loading = false;
    }

    async Task OnRestore(NoteModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Restore Note", "Are you sure you want to restore this record?"))
        {

            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add("Restore Note successfully", MatToastType.Success);

        }
        p.is_loading = false;
    }

    async Task OnSearch(string keyword)
    {
        SetFilterValue2(filters, "keyword", keyword);
        await LoadData();
    }
}




