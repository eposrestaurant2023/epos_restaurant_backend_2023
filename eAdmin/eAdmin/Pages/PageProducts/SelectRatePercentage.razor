@inject IHttpService http
@if (!is_inline)
{
    @if (is_horizontal)
    {

        <div class="@(is_horizontal ? "uk-form-horizontal" : "")">
            <div class="uk-margin-small">
                <label class="uk-form-label" for="@id">@label</label>
                <div class="uk-form-controls">
                    <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
                        <option value="-1.0000">Sale Tax</option>
                        <option value="0.0000">Not Tax</option>
                        <option value="0.0300">3%</option>
                        <option value="0.0500">5%</option>
                        <option value="0.0700">7%</option>
                        <option value="0.1000">10%</option>
                        <option value="0.1500">15%</option>
                        <option value="0.2000">20%</option>
                        <option value="0.2500">25%</option>
                    </select>
                    @ChildContent
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="uk-margin-small">
            <label class="uk-form-label" for="@id">@label</label>
            <div class="uk-form-controls">
                <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
                    <option value="-1.0000">Sale Tax</option>
                    <option value="0.0000">Not Tax</option>
                    <option value="0.0300">3%</option>
                    <option value="0.0500">5%</option>
                    <option value="0.0700">7%</option>
                    <option value="0.1000">10%</option>
                    <option value="0.1500">15%</option>
                    <option value="0.2000">20%</option>
                    <option value="0.2500">25%</option>
                </select>
                @ChildContent
            </div>
        </div>
    }
}
else
{
    @if (!is_read_only)
    {
<select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
    <option value="-1.0000">Sale Tax</option>
    <option value="0.0000">Not Tax</option>
    <option value="0.0300">3%</option>
    <option value="0.0500">5%</option>
    <option value="0.0700">7%</option>
    <option value="0.1000">10%</option>
    <option value="0.1500">15%</option>
    <option value="0.2000">20%</option>
    <option value="0.2500">25%</option>
</select>
    }
    else
    {
<select id="@id" value="@SelectedValue" class="uk-select uk-form-small" style="width:@width">
    <option value="-1.0000">Sale Tax</option>
    <option value="0.0000">Not Tax</option>
    <option value="0.0300">3%</option>
    <option value="0.0500">5%</option>
    <option value="0.0700">7%</option>
    <option value="0.1000">10%</option>
    <option value="0.1500">15%</option>
    <option value="0.2000">20%</option>
    <option value="0.2500">25%</option>
</select>
    }
    @ChildContent

}
@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Select Tax Rate Percentage";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public bool is_horizontal { get; set; } = true;
    [Parameter] public bool is_inline { get; set; } = false;

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public decimal selected_value { get; set; }
    [Parameter] public EventCallback<decimal> selected_valueChanged { get; set; }
    bool is_loading = false;

    public decimal SelectedValue
    {
        get
        {

            return selected_value;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {
        selected_value = Decimal.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
    }
}
