@inject IHttpService http
@if (!is_inline)
{
    @if (is_horizontal)
    {

        <div class="@(is_horizontal ? "uk-form-horizontal" : "")">
            <div class="uk-margin-small">
                <label class="uk-form-label" for="@id">@label</label>
                <div class="uk-form-controls">
                    <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
                        @foreach (var p in data)
                        {
                            <option value="@p.tax_value">@p.tax_name</option>
                        }
                    </select>
                    @ChildContent
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="uk-margin-small">
            <label class="uk-form-label" for="@id">@label</label>
            <div class="uk-form-controls">
                <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
                    @foreach (var p in data)
                    {
                        <option value="@p.tax_value">@p.tax_name</option>
                    }
                </select>
                @ChildContent
            </div>
        </div>
    }
}
else
{
    @if (!is_read_only)
    {
        <select id="@id" value="@SelectedValue" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small" style="width:@width">
            @foreach (var p in data)
            {
                <option value="@p.tax_value">@p.tax_name</option>
            } 
        </select>
    }
    else
    {
        <select id="@id" value="@SelectedValue" class="uk-select uk-form-small" style="width:@width">
            @foreach (var p in data)
            {
                <option value="@p.tax_value">@p.tax_name</option>
            }
        </select>
    }
    @ChildContent

}
@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Select Tax Rate Percentage";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public bool is_horizontal { get; set; } = true;
    [Parameter] public bool is_inline { get; set; } = false;

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public decimal selected_value { get; set; }
    [Parameter] public EventCallback<decimal> selected_valueChanged { get; set; }
    bool is_loading = false;
    public List<ProductTaxPercentageModel> data = new List<ProductTaxPercentageModel>();
    public decimal SelectedValue
    {
        get
        {

            return selected_value;
        }
    }

    Guid id = Guid.NewGuid();


    protected override void OnInitialized()
    {
        is_loading = true;
        data = JsonSerializer.Deserialize<List<ProductTaxPercentageModel>>(gv.product_tax_percentages);
        is_loading = false;
    }


    private async Task SelectedValueChange(string n)
    {
        selected_value = Decimal.Parse(n);
        await selected_valueChanged.InvokeAsync(selected_value);
    }
}
