@inject IHttpService http
@inject IJSRuntime js
@inject IMatToaster toast

<UIContainerBox Title="Menus">
    @current_menu_id | @root_menu_id

    @if (menu == null)
    {
        <div>
            Please Select Menu
        </div>
    }
    else
    {
         @if (current_menu != null)
         {
            <h3 class="title">@current_menu.menu_path</h3>
         }

        @if (menus.Any())
        {
<div class="ribbons-wrapper uk-grid-small" uk-grid>
    @if (current_menu_id > 0)
    {
     if (current_menu.id!= root_menu_id)
    {
        <ComMenuBackButton OnClick="@OnBack" />
        }
    }


    @foreach (var m in GetMenus.OrderBy(r => r.sort_order))
    {

        <ComMenuItem menu="@m" menu_idChanged="OnCurrentMenuChanged" @bind-keyword="@keyword" OnDeleteMenu="@(()=>OnDeleteMenu(m))" menus="@menus" OnMoveMenu="@(()=>OnMoveMenu(m))">
            @(GetMenuName(m))
        </ComMenuItem>
    }

    @if (string.IsNullOrEmpty(keyword))
    {
        <ComMenuSelectProductButton menu="@current_menu" menu_="@menu_move" menu_Changed="@Invoke" />
    }

    @if (current_menu_id > 0)
    {
        <ComAssignProductButton OnClick="@Click_Select_Produc" />
    }

    @if (current_menu_id > 0)
    {
        <ComMenuAddButton OnClick="@OpenAddMenu" />
    }

</div>
        }
    }

</UIContainerBox>
@if (show_move_menu)
{
    <ComMenu_SelectMenu menus="@menus" root_menu_id="@root_menu_id" is_opened="@show_move_menu" @bind-model="@menu" OnCancel="@(()=>show_move_menu=false)" OnSelectMenu="@OnSelectMenu" />

}

@if (show_add_menu)
{
    <ComAddMenu business_id="@business_branch_id" root_menu_id="@root_menu_id" current_menu_id="@current_menu_id" is_opened="@show_add_menu" menu="@menu" OnCancel="@(()=>show_add_menu=false)" />
}

@if (is_select_product)
{
    <ComSearchProductMenu @bind-is_open="@is_select_product" @bind-keyword="@keyword" OnConfirmSelectedProductClick="@SelectProductClick" />

}


@code {

    [Parameter] public List<MenuModel> menus { get; set; } = new List<MenuModel>();
    [Parameter] public Guid business_branch_id { get; set; }

    [Parameter] public int current_menu_id { get; set; }
    [Parameter] public EventCallback<int> current_menu_idChanged { get; set; }
    [Parameter] public string keyword { get; set; }
    [Parameter] public EventCallback<string> keywordChanged { get; set; }
    bool is_select_product = false;
    [Parameter] public int parent_menu_id { get; set; }

    [Parameter] public int root_menu_id { get; set; }

    [Parameter] public EventCallback<MenuModel> OnMenuSelected { get; set; }
    [Parameter] public List<ProductMenuModel> selected_menus { get; set; }

    [Parameter] public MenuModel menu_move { get; set; }
    [Parameter] public EventCallback<MenuModel> menu_moveChanged { get; set; }

    bool show_move_menu;
    MenuModel menu = new MenuModel();

    void Invoke(MenuModel _menu)
    {
        menu_move = _menu;
        menu_moveChanged.InvokeAsync(menu_move);
    }



    private List<MenuModel> _GetMenus;

    public List<MenuModel> GetMenus
    {
        get
        {

            if (string.IsNullOrEmpty(keyword))
            {
                _GetMenus = menus.Where(r => r.parent_id == current_menu_id && r.is_deleted == false).ToList();
            }
            else
            {
                _GetMenus = menus.Where(r => r.is_deleted == false && ((r.menu_name_en ?? "") + " " + (r.menu_name_kh ?? "")).ToString().Trim().ToLower().Contains(keyword.Trim().ToLower())).ToList();
            }
            return _GetMenus;
        }
        set { _GetMenus = value; }
    }




    public MenuModel current_menu
    {
        get
        {
            return menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        }
    }


    async Task OnCurrentMenuChanged(int _menu_id)
    {
        current_menu_id = _menu_id;
        await current_menu_idChanged.InvokeAsync(_menu_id);
    }

    void OpenAddMenu()
    {
        show_add_menu = true;
    }

    string GetMenuName(MenuModel m)
    {

        int n = menus.Where(r => r.parent_id == m.id && r.is_deleted == false).Count();
        if (n > 0)
        {
            return $"{m.menu_name_en} ({n.ToString("00")})";
        }
        else
        {
            return $"{m.menu_name_en}";
        }
    }

    void Click_Select_Produc()
    {
        is_select_product = true;
    }


    bool show_add_menu;

    bool IsMenuSelected(MenuModel m)
    {
        return selected_menus.Where(r => r.menu_id == m.id && r.is_deleted == false).Any();
    }


    protected override async Task OnInitializedAsync()
    {

    }

    void SetMenuActive()
    {
        foreach (var m in selected_menus)
        {
            menus.Where(r => r.id == m.id).ToList().ForEach(r => r.is_selected = true);
        }
    }



    async Task OnSelectMenu()
    {
        show_move_menu = false;
        menu_move = menu;
        await menu_moveChanged.InvokeAsync(menu_move);

    }
    async Task OnUnSelectMenu(MenuModel m)
    {
        m.is_selected = false;
        await OnMenuSelected.InvokeAsync(m);

    }


    void OnBack()
    {

        var d = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        current_menu_id = Convert.ToInt32(d.parent_id);
    }

    void AddRootMenu()
    {
        menu = new MenuModel();
        menu.parent = null;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;
    }
    void AddSubMenu()
    {
        menu = new MenuModel();
        menu.parent = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        menu.parent_id = menu.parent.id;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;

    }

    void SaveMenu(MenuModel m)
    {
        menus.Add(m);
        show_add_menu = false;
    }

    void EditMenu(MenuModel m)
    {
        menu = m;
        menu.parent = menus.Where(r => r.id == m.parent_id).FirstOrDefault();
        show_add_menu = true;
    }
    void MenuClick(MenuModel m)
    {
        current_menu_id = m.id;
        if (m.parent_id == null)
        {
            parent_menu_id = 0;
        }
        else
        {
            parent_menu_id = Convert.ToInt32(m.parent_id);
        }
    }

    void OnMoveMenu(MenuModel m)
    {
        menu = m;
        show_move_menu = true;
    }


    async Task OnDeleteMenu(MenuModel m)
    {
        m.is_loading = true;
        if (m.id > 0)
        {
            if (await js.Confirm("Delete Menu", "Are you sure you want to delete this record?"))
            {
                m.is_deleted = true;
            }
        }
        else
        {
            menus.Remove(m);
        }
        menu_move = m;
        await menu_moveChanged.InvokeAsync(menu_move);
        m.is_loading = false;
    }

    public async Task SelectProductClick(List<SelectedProductModel> selected_products)
    {

        foreach (var sp in selected_products)
        {
            await AddItemToMenuProduct(sp);
        }
    }

    async Task AddItemToMenuProduct(SelectedProductModel sp)
    {
        var old_product_menu = menu.product_menus.Where(r => r.menu_id == current_menu_id && r.product.id == sp.product.id);
        if (old_product_menu != null && old_product_menu.Count() > 0)
        {
            return;
        }

        //add new record
        ProductMenuModel d = new ProductMenuModel();

        d.product_id = sp.product.id;
        d.product = sp.product;
        current_menu.product_menus.Add(d);
        menu_move = current_menu;
        await menu_moveChanged.InvokeAsync(menu_move);
    }
}