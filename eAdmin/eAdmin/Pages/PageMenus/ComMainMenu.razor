
<UIContainerBox Title="Menus">
    @if (menu == null)
    {
        <div>
            Please Select Menu
        </div>
    }
    else
    {
        @if (current_menu_id != parent_menu_id)
        {
            <h3 class="title">@current_menu.menu_path</h3>
        }

        @if (menus.Any())
        {
<div class="ribbons-wrapper uk-grid-small" uk-grid>
    @if (current_menu_id != parent_menu_id)
    {
        <ComMenuBackButton OnClick="@OnBack" />
    }

    @foreach (var m in GetMenus.OrderBy(r => r.sort_order))
    {

<ComMenuItem menu="m" @bind-menu_id="@current_menu_id" @bind-keyword="@keyword">
    <div class="uk-position-center">
        @(GetMenuName(m)) <br />
    </div>
    @if (is_sort_order)
    {
        <div class="uk-position-bottom-center">
            <NumberInputInt @bind-text="@m.sort_order" width="100px" class_name="uk-text-center uk-form-small"/>
        </div>
    }



</ComMenuItem>
           
              
           



    }

    @if (string.IsNullOrEmpty(keyword))
    {
        <ComMenuSelectProductButton menu="@current_menu" />
    }

    @if (current_menu_id > 0)
    {
        <ComAssignProductButton />
    }

    @if (current_menu_id > 0)
    {
        <ComMenuAddButton />
    }

</div>
        }
    }

</UIContainerBox>


@code {
    [Parameter] public List<MenuModel> menus { get; set; } = new List<MenuModel>();
    [Parameter] public Guid business_branch_id { get; set; }
    [Parameter] public bool is_sort_order { get; set; } = true;
    [Parameter] public int current_menu_id { get; set; }
    [Parameter] public string keyword { get; set; }
    [Parameter] public EventCallback< string> keywordChanged { get; set; }

    [Parameter] public int parent_menu_id { get; set; }

    [Parameter] public EventCallback<MenuModel> OnMenuSelected { get; set; }

    [Parameter] public List<ProductMenuModel> selected_menus { get; set; }





    MenuModel menu = new MenuModel();



    private List<MenuModel> _GetMenus;

    public List<MenuModel> GetMenus
    {
        get {

            if (string.IsNullOrEmpty(keyword))
            {
                _GetMenus = menus.Where(r => r.parent_id == current_menu_id && r.is_deleted == false).ToList();
            }
            else
            {
                _GetMenus =  menus.Where(r => r.is_deleted == false && ((r.menu_name_en ?? "") + " " + (r.menu_name_kh ?? "")).ToString().Trim().ToLower().Contains(keyword.Trim().ToLower())).ToList();
            }
            return _GetMenus; }
        set { _GetMenus = value; }
    }




    public MenuModel current_menu { get {

            return menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        } }



    string GetMenuName(MenuModel m)
    {
        int n = menus.Where(r => r.parent_id == m.id && r.is_deleted == false).Count();
        if (n > 0)
        {
            return $"{m.menu_name_en} ({n.ToString("00")})";
        }
        else
        {
            return $"{m.menu_name_en}";
        }
    }

    bool show_add_menu;

    bool IsMenuSelected(MenuModel m)
    {
        return selected_menus.Where(r => r.menu_id == m.id && r.is_deleted == false).Any();
    }


    protected override async Task OnInitializedAsync()
    {

    }

    void SetMenuActive()
    {
        foreach (var m in selected_menus)
        {
            menus.Where(r => r.id == m.id).ToList().ForEach(r => r.is_selected = true);
        }
    }



    async Task OnSelectMenu(MenuModel m)
    {
        m.is_selected = true;
        await OnMenuSelected.InvokeAsync(m);

    }
    async Task OnUnSelectMenu(MenuModel m)
    {
        m.is_selected = false;
        await OnMenuSelected.InvokeAsync(m);

    }


    void OnBack()
    {

        var d = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        current_menu_id = Convert.ToInt32( d.parent_id);
    }

    void AddRootMenu()
    {
        menu = new MenuModel();
        menu.parent = null;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;
    }
    void AddSubMenu()
    {
        menu = new MenuModel();
        menu.parent = menus.Where(r => r.id == current_menu_id).FirstOrDefault();
        menu.parent_id = menu.parent.id;
        menu.business_branch_id = business_branch_id;
        show_add_menu = true;

    }

    void SaveMenu(MenuModel m)
    {
        menus.Add(m);
        show_add_menu = false;
    }

    void EditMenu(MenuModel m)
    {
        menu = m;
        menu.parent = menus.Where(r => r.id == m.parent_id).FirstOrDefault();
        show_add_menu = true;
    }
    void MenuClick(MenuModel m)
    {
        current_menu_id = m.id;
        if (m.parent_id == null)
        {
            parent_menu_id = 0;
        }
        else
        {
            parent_menu_id = Convert.ToInt32(m.parent_id);
        }
    }



}



