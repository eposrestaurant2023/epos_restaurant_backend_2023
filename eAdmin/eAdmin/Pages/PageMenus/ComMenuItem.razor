@inherits PageCore
<div style="position:relative;" class="uk-width-1-6">
    <div class="icon_edit_menu">
        <Icon icon="edit" icon_color="@menu.text_color" @onclick="@EditMenu" />
        <Com is_visible="@(!IsMenuSelected())">
            <button>
                <Icon icon="check_box_outline_blank" icon_color="@menu.text_color" @onclick="@OnSelectMenu" />
            </button>
        </Com>
        <div class="uk-inline button-action-table">
            <Icon icon="more_vert" />
            <div uk-drop="mode: click;pos:top-left" class="tbl_actions_group">
                <ul class="uk-nav uk-dropdown-nav">
                    <li> <Icon icon="delete" @onclick="@OnUnSelectMenu" /> Delete </li>
                    <li> <Icon icon="arrow_back" @onclick="@OnUnSelectMenu" /> Move to </li>
                </ul>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(menu.photo))
    {
        <div>
            <div style="position:relative;">
                <Image ImageUrl="@http.ImageUrl(menu.photo)" IsLightBox="false" IsBackgroundImage="false" Height="130px" />
                <div class="uk-overlay uk-overlay-primary uk-position-bottom uk-padding-remove" style="padding:5px !important;text-align:center;">
                    <p></p>
                </div>
            </div>

        </div>
    }
    else
    {
        <div @onclick="@OnClick" class="box_menu cp" style="background:@menu.background_color;color:@menu.text_color;">
            <div class="uk-position-center">
                <div style="text-align: center; align-items: center;"> </div>
            </div>
        </div>
    }

    @ChildContent

</div>

@code {
    [Parameter] public MenuModel menu { get; set; }




    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public int menu_id { get; set; }
    [Parameter] public EventCallback<int> menu_idChanged { get; set; }
    [Parameter] public string keyword { get; set; }
    [Parameter] public EventCallback<string> keywordChanged { get; set; }



    async Task OnClick()
    {

        await menu_idChanged.InvokeAsync(menu.id);
        await keywordChanged.InvokeAsync("");

    }

    async Task EditMenu()
    {

    }

    async Task OnSelectMenu()
    {

    }

    async Task OnUnSelectMenu()
    {

    }

    bool IsMenuSelected()
    {
        return true;
    }
}
