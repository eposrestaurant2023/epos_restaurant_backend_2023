@inject IHttpService http;

<div style="position:relative;" class="uk-width-1-6">
    <div class="icon_edit_menu">
        <Icon icon="edit" icon_color="@menu.text_color" OnClick="@(()=>EditMenu())" />
        <Com is_visible="@(!IsMenuSelected())">
            <Icon icon="check_box_outline_blank" icon_color="@menu.text_color" @onclick="@OnSelectMenu" />
        </Com>
        <div class="uk-inline button-action-table">
            <Icon icon="more_vert" />
            <div uk-drop="mode: click;pos:top-left" class="tbl_actions_group">
                <ul class="uk-nav uk-dropdown-nav">
                    @if (!menu.product_menus.Where(r => r.is_deleted == false).Any())
                    {
                        <li @onclick="@OnDeleteMenu"> <Icon icon="delete" />Delete</li>
                    }
                    <li @onclick="@OnMoveMenu"> <Icon icon="arrow_back" />Move To</li>
                </ul>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(menu.photo))
    {
        <div @onclick="@OnClick" class="box_menu cp" style="background-image:url(@http.ImageUrl(menu.photo)); background-size:cover;">
            <div class="uk-position-center uk-text-center">
                <div style="background-color: #ffffffc7; color: #000; padding: 0px 3px; border-radius: 2px;">
                    @ChildContent
                </div>
            </div>
        </div>
    }
    else
    {
        <div @onclick="@OnClick" class="box_menu cp" style="background-color:@menu.background_color; color:@menu.text_color;">
            <div class="uk-position-center uk-text-center">
                <div>
                    @ChildContent
                </div>
            </div>
        </div>
    }

</div>

@if (show_add_menu)
{
    <ComAddMenu is_opened="@show_add_menu" menu="@menu" OnCancel="@(()=>show_add_menu=false)" menuChanged="@SaveMenu" />
}


@code {
    [Parameter] public List<MenuModel> menus { get; set; } = new List<MenuModel>();
    [Parameter] public MenuModel menu { get; set; }
    bool show_add_menu;
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public int menu_id { get; set; }
    [Parameter] public EventCallback<int> menu_idChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMoveMenu{ get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnDeleteMenu { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnRefreshData { get; set; }
    [Parameter] public string keyword { get; set; }
    [Parameter] public EventCallback<string> keywordChanged { get; set; }
    [Parameter] public int parent_menu_id { get; set; }

    async Task OnClick()
    {

        await menu_idChanged.InvokeAsync(menu.id);
        await keywordChanged.InvokeAsync("");

    }

    void EditMenu()
    {
        menu.parent = menus.Where(r => r.id == menu.parent_id).FirstOrDefault();
        show_add_menu = true;
    }

    void OnSelectMenu() { }




    bool IsMenuSelected()
    {
        return true;
    }

    void SaveMenu(MenuModel m)
    {

        show_add_menu = false;
        OnRefreshData.InvokeAsync();
    }

}
