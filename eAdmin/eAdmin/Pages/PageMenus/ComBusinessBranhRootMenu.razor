@inherits PageCore
<div class="bg_business_rootmenu">
    @foreach (var b in gv.business_branch_by_role)
    {
    <div class="uk-margin-bottom">
        <div class="uk-flex uk-flex-between uk-margin-small-bottom" style="align-items: baseline;">
            <div>
                <h3 class="title uk-margin-remove">
                    @b.business_branch_name_en
                </h3>
            </div>
            <div>
                <Icon icon="add_circle_outline" OnClick="@(()=>AddRootMenu(b.id))" title="@lang["Add New Root Menu"]" size="20px"/>
            </div>
        </div>
        @foreach (var n in menus.Where(r => r.business_branch_id == b.id && r.is_deleted == false && r.parent_id == null))
        {
            <button @onclick="@(()=>MenuClick(n))" class="@(n.is_selected? "selected" : "") button_color_button">
                <div style="text-align:left;width:100%">
                    @n.menu_name_en
                </div>

                <div class="uk-inline button-action-table">
                    <Icon icon="more_vert" />
                    <div uk-drop="mode: click;pos:top-left" class="tbl_actions_group">
                        <ul class="uk-nav uk-dropdown-nav">
                            <li @onclick="@(() => EditMenu(n))"> <Icon icon="edit" /></li>
                            @if (!menus.Where(r => r.parent_id == n.id && r.is_deleted == false).Any())
                            {
                                <li @onclick="@(() => OnDeleteMenu(n))"> <Icon icon="delete" /></li>
                            }
                        </ul>
                    </div>
                </div>

            </button>
        }
    </div>
        @*<Button OnClick="@(()=>AddRootMenu(b.id))" class_name="uk-button uk-button-default button-large ">@lang["Add New Root Menu"]</Button>*@
    }
</div>

 

@code {
    [Parameter] public List<MenuModel> menus { get; set; } = new List<MenuModel>();
    [Parameter] public int menu_id { get; set; }
    [Parameter] public EventCallback<int> menu_idChanged { get; set; }

    [Parameter] public int current_menu_id { get; set; }
    [Parameter] public EventCallback<int> current_menu_idChanged { get; set; }

    [Parameter] public int parent_menu_id { get; set; }
    [Parameter] public EventCallback<int> parent_menu_idChanged { get; set; }

    [Parameter] public Guid business_id { get; set; }
    [Parameter] public EventCallback<Guid> business_idChanged { get; set; }

    [Parameter] public string keyword { get; set; }
    [Parameter] public EventCallback<string> keywordChanged { get; set; }
    [Parameter] public EventCallback<MenuModel> OnEditMenu { get; set; }
    [Parameter] public EventCallback<Guid> OnAddRootMenu{ get; set; }



    async Task MenuClick(MenuModel m)
    {
        if (menus.Where(r => r.is_selected == true && r.parent_id == null).Any())
        {
            menus.Where(r => r.is_selected == true && r.parent_id == null).FirstOrDefault().is_selected = false;
        }
        m.is_selected = true;
        await menu_idChanged.InvokeAsync(m.id);
        await current_menu_idChanged.InvokeAsync(m.id);
        await parent_menu_idChanged.InvokeAsync(m.id);
        await business_idChanged.InvokeAsync(m.business_branch_id);
        await keywordChanged.InvokeAsync("");

    }




    async Task OnDeleteMenu(MenuModel m)
    {

        if (m.id > 0)
        {
            if (await js.Confirm("Delete Menu", "Are you sure you want to delete this record?"))
            {
                m.is_deleted = true;
            }
        }
        else
        {
            menus.Remove(m);
        }

        await current_menu_idChanged.InvokeAsync(0);

    }


    async Task EditMenu(MenuModel m)
    {
        await OnEditMenu.InvokeAsync(m);
    }
    
    async Task AddRootMenu(Guid id)
    {
        await OnAddRootMenu.InvokeAsync(id);
    }



}
