@inherits PageCore
<EditFormContext model="@model" is_opened="@is_opened" Cancel_Click="@OnCancel" is_footer_visible="true" modal_width="800px" is_save="false" is_cancel="true">

    <h3 class="title">
        Drink/Food
    </h3>
    <div class="uk-grid-small" uk-grid>

        @foreach (var m in menu_items.Where(r => r.id != model.id))
        {

            <div class="uk-width-1-4">
                @if (menus.Where(r => r.parent_id == m.id && r.is_deleted == false).Any())
                {

                    @if (string.IsNullOrEmpty(m.photo))
                    {

                        <div class="cp" @onclick="@(() => MenuClick(m))">
                            <div class="box-menu-select box_menu" style="position:relative;background-image: url(@http.ImageUrl(m.photo))">
                                <div class="box-selected"><Icon icon="check" size="18px" icon_color="#fff" /></div>
                                <div class="uk-position-center uk-dark uk-text-center">
                                    @m.menu_name_en
                                </div>
                            </div>
                        </div>

                    }
                    else
                    {
                        <div class="cp" @onclick="@(() => MenuClick(m))">
                            <div class="box-menu-select box_menu" style="background:@m.background_color;color:@m.text_color;">
                                <div class="box-selected"><Icon icon="check" size="18px" icon_color="#fff" /></div>
                                <div class="uk-position-center uk-text-center">
                                    <span>
                                        @m.menu_name_en
                                    </span>
                                </div>
                            </div>
                        </div>
                    }

                }
                else
                {

                    @if (string.IsNullOrEmpty(m.photo))
                    {

                        <div class="cp" @onclick="@(()=>SelectMenu(m))">
                            <div class="box-menu-select box_menu" style="position:relative; background-image:url(@http.ImageUrl(m.photo))">
                                <div class="box-selected"><Icon icon="check" size="18px" icon_color="#fff" /></div>
                                <div class="uk-position-center uk-dark uk-text-center" style="padding:5px;">
                                    <span>
                                        @m.menu_name_en
                                    </span>
                                </div>
                            </div>
                        </div>

                    }
                    else
                    {
                        <div class="cp" @onclick="@(()=>SelectMenu(m))">
                            <div class="box-menu-select box_menu" style="background:@m.background_color;color:@m.text_color;">
                                <div class="box-selected"><Icon icon="check" size="18px" icon_color="#fff"/></div>
                                <div class="uk-position-center uk-text-center">
                                    <span>
                                        @m.menu_name_en
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                } 
            </div>


        }

    </div>

</EditFormContext>
@code {


    [Parameter] public List<MenuModel> menus { get; set; }
    [Parameter] public MenuModel model { get; set; }
    [Parameter] public EventCallback<MenuModel> modelChanged { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public int root_menu_id { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSelectMenu { get; set; }
    public int current_menu_id { get; set; }
    public int parent_menu_id { get; set; }


    int parent_id;
    public List<MenuModel> menu_items
    {
        get
        {
            if (parent_id == 0)
            {
                return menus.Where(r => r.parent_id == root_menu_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
            else
            {
                return menus.Where(r => r.parent_id == parent_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
        }
    }

    void MenuClick(MenuModel m)
    {
        parent_id = m.id;
    }


    void Back_menu( )
    {

        current_menu_id = Convert.ToInt32(parent_id);

    }


    async Task SelectMenu(MenuModel parent_menu)
    {
        model.parent_id = parent_menu.id;
        await modelChanged.InvokeAsync(model);
        await OnSelectMenu.InvokeAsync(null);

        toast.Add("Change Menu Success", MatToastType.Success);
    }






}
