@inherits PageCore
<EditFormContext model="@model" is_opened="@is_opened" Cancel_Click="@OnCancel" is_footer_visible="true" modal_width="800px" is_save="false" is_cancel="true">

    <h3 class="title">
        Drink/Food
    </h3>

   
    <div class="uk-grid-small" uk-grid>

        @foreach (var m in menu_items.Where(r => r.id != model.id))
        {

            <div style="position:relative;" class="uk-width-1-4">
                @if (menus.Where(r => r.parent_id == m.id && r.is_deleted == false).Any())
                {

                    @if (string.IsNullOrEmpty(m.photo))
                    {

                        <div class="border_select">
                            <div style="position:relative;" @onclick="@(() => MenuClick(m))" class="cp">
                                <Image ImageUrl="@http.ImageUrl(m.photo)" IsLightBox="false" IsBackgroundImage="false" Height="130px" />
                                <div class="uk-overlay-default uk-position-cover"></div>
                                <div class="uk-position-bottom uk-dark uk-padding-remove" style="padding:5px !important;text-align:center;">
                                    <p>
                                        @m.menu_name_en
                                    </p>
                                </div>
                            </div>

                        </div>

                    }
                    else
                    {
                        <div class="border_select">
                            <div @onclick="@(() => MenuClick(m))" class="box_menu cp" style="background:@m.background_color;color:@m.text_color;">

                                <div class="uk-position-center">
                                    <div style="text-align: center; align-items: center;">
                                        @m.menu_name_en
                                    </div>
                                </div>
                            </div>
                        </div>
                    }



                }
                else
                {

                    @if (string.IsNullOrEmpty(m.photo))
                    {

                        <div class="border_select">
                            <div style="position:relative;" class="cp">
                                <Image ImageUrl="@http.ImageUrl(m.photo)" IsLightBox="false" IsBackgroundImage="false" Height="130px" />
                                <div class="uk-overlay-default uk-position-cover"></div>
                                <div class="uk-position-bottom uk-dark uk-padding-remove" style="padding:5px !important;text-align:center;">
                                    <p>
                                        @m.menu_name_en
                                    </p>
                                </div>
                            </div>

                        </div>

                    }
                    else
                    {
                        <div class="border_select">
                            <div class="box_menu cp" style="background:@m.background_color;color:@m.text_color;">

                                <div class="uk-position-center">
                                    <div style="text-align: center; align-items: center;">
                                        @m.menu_name_en
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                <div @onclick="@(()=>SelectMenu(m))" class="gb_button_select cp">
                    Select
                </div>
            </div>


        }

    </div>

</EditFormContext>
@code {


    [Parameter] public List<MenuModel> menus { get; set; }
    [Parameter] public MenuModel model { get; set; }
    [Parameter] public EventCallback<MenuModel> modelChanged { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public int root_menu_id { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSelectMenu { get; set; }
    public int current_menu_id { get; set; }
    public int parent_menu_id { get; set; }


    int parent_id;
    public List<MenuModel> menu_items
    {
        get
        {
            if (parent_id == 0)
            {
                return menus.Where(r => r.parent_id == root_menu_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
            else
            {
                return menus.Where(r => r.parent_id == parent_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
        }
    }

    void MenuClick(MenuModel m)
    {
        parent_id = m.id;
    }


    void Back_menu( )
    {

        current_menu_id = Convert.ToInt32(parent_id);

    }


    async Task SelectMenu(MenuModel parent_menu)
    {
        model.parent_id = parent_menu.id;
        await modelChanged.InvokeAsync(model);
        await OnSelectMenu.InvokeAsync(null);

        toast.Add("Change Menu Success", MatToastType.Success);
    }






}
