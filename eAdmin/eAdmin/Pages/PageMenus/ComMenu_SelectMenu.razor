@inherits PageCore
<EditFormContext model="@model" title="@lang["Move Menu"]" is_opened="@is_opened" Cancel_Click="@OnCancel" is_footer_visible="true" modal_width="800px" is_save="false" is_cancel="true">
    <h3 class="title">
        @menu_path(current_menu_id)
    </h3>
    <div>
        <Grid ClassName="uk-grid-small uk-child-width-1-5@m uk-child-width-1-3">


            @if (current_menu_id > 0)
            {
                <ComMenuBackButton OnClick="@Back_menu" class_width="width-none"/>
            }

            @foreach (var m in menu_items.Where(r => r.id != model.id))
            {
                <ComMenuMovementItem menu_item="@m" menus="@menus" menu="@model" MenuClick="@(() => MenuClick(m))" SelectMenu="@(()=>SelectMenu(m))"/>
                @*<div>
                    @if (@menus.Where(r => r.is_deleted == false && r.parent_id == m.id).Any())
                    {
                        <a @onclick="@(() => MenuClick(m))">@m.menu_name_en (@menus.Where(r => r.is_deleted == false && r.parent_id == m.id).Count())</a>
                    }
                    else
                    {
                        <span>@m.menu_name_en</span>
                    }


                    <Button OnClick="@(()=>SelectMenu(m))" disabled="@(m.id==model.parent_id)">Select</Button>
                </div>*@

            }
        </Grid>
    </div>

</EditFormContext>
@code {
    [Parameter] public List<MenuModel> menus { get; set; }
    [Parameter] public MenuModel model { get; set; }
    [Parameter] public EventCallback<MenuModel> modelChanged { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public int root_menu_id { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSelectMenu { get; set; }

 

    int current_menu_id;

    public List<MenuModel> menu_items
    {
        get
        {
            if (current_menu_id == 0)
            {
                return menus.Where(r => r.id == root_menu_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
            else
            {
                return menus.Where(r => r.parent_id == current_menu_id && r.is_deleted == false).OrderBy(r => r.sort_order).ToList();
            }
        }
    }


    void MenuClick(MenuModel m)
    {
         
        current_menu_id = m.id;
    }

    void Back_menu( )
    {
        current_menu_id = Convert.ToInt32(menus.Where(r=>r.id==current_menu_id).FirstOrDefault().parent_id);
    }

    public string menu_path(int menu_id)
    {

        if (menu_id > 0)
        {
            List<string> str_menu_names = new List<string>();
            int id = menu_id;
            while (id > 0)
            {
                var d = menus.Where(r => r.id == id).FirstOrDefault();
                str_menu_names.Add(d.menu_name_en);

                if (d.parent_id == null)
                {
                    id = 0;
                }
                else
                {
                    id = Convert.ToInt32(d.parent_id);
                }

            }

            if (str_menu_names.Count() > 0)
            {
                string path = ""; ;
                str_menu_names.Reverse();
                foreach (var m in str_menu_names)
                {
                    path = path + m + " / ";
                }
                if (path.Length > 0)
                {
                    return path.Substring(0, path.Trim().Length - 1);
                }

            }
        }
        return "";
    }


    async Task SelectMenu(MenuModel parent_menu)
    {
        model.parent_id = parent_menu.id;
        await modelChanged.InvokeAsync(model);
        await OnSelectMenu.InvokeAsync(null);

        toast.Add(lang["Change menu successfully"], MatToastType.Success);
    }






}
