@inject IHttpService http;
@inject IStringLocalizer<Resource> lang
<EditFormContext is_cancel="true" is_save="true" model="@model" is_opened="@is_opened" title="@title" Cancel_Click="@OnCancel" Save_Click="@Save_Click" is_submitting="@is_saving" modal_width="700px">
    <div style="word-break:break-word">@current_menu_id</div>
    <UIGridCenter>
        @if (is_loading)
        {
            <Spinner />
        }
        else
        {
            <UIContainerBox Title="Photo" ClassName="uk-text-center">
                <UIFlexCenter>
                    <FileUpload @bind-ImageUrl="@model.photo" />
                </UIFlexCenter>
            </UIContainerBox>
            <UIContainerBox Title="Menu Information">
                @if (model.parent != null)
                {
                    <TextInput label="Parent" text="@model.parent.menu_name_en" is_read_only="true" />
                }
                else
                {
                    <TextInput label="Parent" text="Root Menu" is_read_only="true" />
                }

                <TextInput label="Menu Name(EN)" @bind-text="@model.menu_name_en">
                    <ValidationMessage For="@(() => model.menu_name_en)" />
                </TextInput>
                <TextInput label="Menu Name(KH)" @bind-text="@model.menu_name_en" />
                <TextInput label="Text Color" type="color" @bind-text="@model.text_color" />
                <TextInput label="Background Color" type="color" @bind-text="@model.background_color" />
                <NumberInputInt label="Sort Order" @bind-text="@model.sort_order" />
                <SelectStatus label="Status" @bind-selected_value="@model.status" />

            </UIContainerBox>
            <UIContainerBox Title="Preview">
                <Grid ClassName="uk-grid-small">
                    <div class="uk-width-2-5">
                        <div class="box" style="background:@model.background_color;color:@model.text_color;margin: 0px auto;">
                            <div class="icon_edit">
                                <Icon icon="edit" icon_color="@model.text_color" />
                                <button>
                                    <Icon icon="check_box_outline_blank" icon_color="@model.text_color" />
                                </button>
                            </div>
                            <div style="text-align: center; line-height: 130px;">
                                <span>@(string.IsNullOrEmpty(model.menu_name_en)?"Empty" : model.menu_name_en)</span>
                            </div>
                        </div>
                    </div>
                    <div class="uk-width-1-5">
                        <div class="uk-text-center" style="height: 130px;line-height: 130px;">
                            <Icon icon="arrow_right_alt" size="45px" icon_color="#757575" />
                        </div>
                    </div>
                    <div class="uk-width-2-5">
                        <div class="box" style="background:@model.background_color;color:@model.text_color; margin: 0px auto;">
                            <div class="icon_edit">
                                <Icon icon="edit" icon_color="@model.text_color" />
                                <button>
                                    <Icon icon="check_box" icon_color="@model.text_color" />
                                </button>
                            </div>
                            <div class="ribbon">
                                <span class="">Select</span>
                            </div>
                            <div style="text-align: center; line-height: 130px;">
                                <span>@(string.IsNullOrEmpty(model.menu_name_en)?"Empty" : model.menu_name_en)</span>
                            </div>
                        </div>
                    </div>
                </Grid>
            </UIContainerBox>
        }
    </UIGridCenter>

</EditFormContext>
@code {


    [Parameter] public int root_menu_id { get; set; }
    [Parameter] public int current_menu_id { get; set; }
    [Parameter] public Guid business_id { get; set; }
    [Parameter] public bool is_opened { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }

    [Parameter] public MenuModel menu { get; set; }
    [Parameter] public EventCallback<MenuModel> menuChanged { get; set; }

    MenuModel model = new MenuModel();

    bool is_loading, is_saving;

    public string title
    {
        get
        {

            if (model.id == 0)
            {
                return "Add New Menu";
            }
            else
            {
                return "Edit Menu " + model.menu_name_en;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        is_loading = true;

        await Task.Delay(100);
        model = JsonSerializer.Deserialize<MenuModel>(JsonSerializer.Serialize(menu));
        is_loading = false;
    }


    async Task Save_Click()
    {
        is_saving = true;
        model.business_branch_id = business_id;
        model.root_menu_id = root_menu_id;
        model.parent_id = current_menu_id;
        var res = await http.ApiPost("Menu/save", model);
        if (res.IsSuccess)
        {
            model = JsonSerializer.Deserialize<MenuModel>(res.Content.ToString());
            is_opened = false;
        }
        is_saving = false;
    }

}
