@page "/menu"
@inherits PageCore
<Loading is_loading="@(is_loading || is_loading_data || is_saving)" />
<Title Value="Menus"></Title>

@if (!is_loading)
{
<PageContainer>    
    <PageHeader>
        <HeaderLeft>
            <PageTitle ShowFilter="false">
                <HeaderTemplate>
                    @lang["Root Menu"]
                </HeaderTemplate>
            </PageTitle>
        </HeaderLeft>
        <HeaderRight>
            <Button OnClick="@AddRootMenu" class_name="uk-button uk-button-default button-large ">@lang["Add New Root Menu"]</Button>
            <ComSearch @bind-Keyword="@keyword" show_advance_filter="false" />
        </HeaderRight>
    </PageHeader>
        <PageBody>
            <Grid ClassName="uk-grid-small">
                <Column ClassName="uk-width-1-5">
                    <ComBusinessBranhRootMenu @bind-business_id="@business_id" menus="@menus.Where(r=>r.parent_id == null).ToList()" @bind-menu_id="@root_menu_id" @bind-current_menu_id="@current_menu_id" @bind-parent_menu_id="@parent_menu_id"  @bind-keyword="@keyword" />
                </Column>
                <Column ClassName="uk-width-4-5">
                    <ComMainMenu @bind-menu_move="@menu" business_branch_id="@business_id" menus="@menus" root_menu_id="@root_menu_id"  @bind-current_menu_id="@current_menu_id"  @bind-keyword="@keyword" />
                </Column>
            </Grid>
        </PageBody>
        <PageFooter>
            <FooterCenter>
                <ComSavingFormButton is_show_cancel="false" OnSave="@Save_Click" is_show_save_action="true" is_loading="@is_saving" />
            </FooterCenter>
        </PageFooter>
</PageContainer>
}
@if (show_add_menu)
{
    <ComAddMenu business_id="@business_id" root_menu_id="@root_menu_id" is_opened="@show_add_menu" menu="@menu" menuChanged="@OnGetMenu" OnCancel="@(()=>show_add_menu=false)"  />
}
@code
{

    List<MenuModel> menus = new List<MenuModel>();
    MenuModel menu = new  MenuModel ();

    int root_menu_id;
    int parent_menu_id;
    int current_menu_id;


    Guid business_id = Guid.NewGuid();

    bool show_add_menu;
    string keyword;

    string controller_api = "Menu";
    public string ControllerApi
    {
        get
        {
            string url = $"{controller_api}?";
            url += $"$expand=product_menus($expand=product($select=id,product_category_id,photo,product_name_en,product_name_kh);$filter=is_deleted eq false)";
            url = url + GetFilter(state.filters);
            return url;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;

        state.filters.RemoveAll(r=>r.key== "business_branch_id" || r.key=="is_deleted");

        state.filters.Add(new FilterModel()
        {
            key = "business_branch_id",
            filter_operator = "multiple",
            value1 = gv.business_branch_ids_filter_1,

        });
        state.filters.Add(new FilterModel()
        {
            key = "is_deleted",
            value1 ="false"
        });

        await LoadData();
        is_loading = false;
    }

    public async Task LoadData(string api_url = "")
    {
        is_loading = true;

        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            menus = JsonSerializer.Deserialize<List<MenuModel>>(resp.Content.ToString());
        }
        is_loading = false;
    }

    public async Task Save_Click()
    {
        is_saving = true;
        List<MenuModel> save_menu = new List<MenuModel>();
        save_menu = JsonSerializer.Deserialize < List<MenuModel>>(JsonSerializer.Serialize(menus));
        save_menu.SelectMany(r => r.product_menus).ToList().ForEach(r => r.product = null);
        var resp = await http.ApiPost("Menu/Save/Multiple", save_menu);


        if (resp.IsSuccess)
        {
            toast.Add("Save Menu Successfully.",MatToastType.Success);
            await LoadData();
            if (menus.Count() > 0)
            {
                if (menus.Where(r => r.id == root_menu_id).Any())
                {
                    menus.Where(r => r.id == root_menu_id).FirstOrDefault().is_selected = true;
                }
            }
        }
        else
        {
            toast.Add("Save Menu fail.", MatToastType.Warning);
        }
        is_saving = false;
    }


    void AddRootMenu()
    {
        menu = new MenuModel();
        show_add_menu = !show_add_menu;
    }

    void OnSearch()
    {

    }

    async Task OnGetMenu(MenuModel _menu)
    {
        menu = _menu;
        menus = new List<MenuModel>();
        await LoadData();
    }
}

