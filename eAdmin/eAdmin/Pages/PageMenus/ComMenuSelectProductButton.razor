@inherits PageCore
@if (menu != null)
{
    foreach (var m in menu.product_menus.Where(r => r.is_deleted == false))
    {
<div style="position:relative;" class="uk-width-1-6">

    @if (!string.IsNullOrEmpty(m.product?.photo))
    {
        <div>
            <div class="icon_edit_menu_product">
                <button>
                    <Icon icon="delete" icon_color="red" @onclick="@(()=>RemoveProduct(m))" />
                </button>
            </div>
            <div style="position:relative;">
                <Image ImageUrl="@http.ImageUrl(m.product?.photo)" IsLightBox="false" IsBackgroundImage="false" Height="130px"/>
                <div class="uk-position-absolute uk-width-1-1" style="bottom: 0px; background-color: #c1c1c1; padding:4px; text-align: center;">
                    <span>@m.product?.product_name_en</span>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="icon_edit_menu">
            <button>
                <Icon icon="delete" icon_color="#fff" @onclick="@(()=>RemoveProduct(m))" />
            </button>
        </div>
        <div class="box cp" style="background:#000;color:#fff;">
            <div>
                <div style="text-align: center; align-items: center; padding-top: 47px;">
                    @(gv.current_language.language_id == "km-KH"? m.product.product_name_kh :m.product.product_category_en)
                </div>
            </div>
        </div>
    }
</div>
    }
    @if (deleted_product_menu != null && show_undo_delete == true)
    {
        <MatSnackbar @bind-IsOpen="@show_undo_delete" Leading="true">
            <MatSnackbarContent>@lang["Product"] @(gv.current_language.language_id == "km-KH"? deleted_product_menu.product.product_name_kh : deleted_product_menu.product.product_category_en)  @lang["has been remove from this menu"] @menu.menu_name_en.</MatSnackbarContent>
            <MatSnackbarActions>
                <MatButton Raised="true" OnClick="@UndoDelete">@lang["Undo"]</MatButton>
            </MatSnackbarActions>
        </MatSnackbar>
    }
}


@code {
    [Parameter] public MenuModel menu { get; set; }
    [Parameter] public MenuModel menu_ { get; set; }
    [Parameter] public EventCallback<MenuModel> menu_Changed { get; set; }

    ProductMenuModel deleted_product_menu = new ProductMenuModel();

    bool show_undo_delete = false;

    void RemoveProduct(ProductMenuModel deleted_item)
    {
        deleted_product_menu = deleted_item;
        show_undo_delete = true;
        deleted_item.is_deleted = true;
        menu_ = menu;
        menu_Changed.InvokeAsync(menu_);
    }

    void UndoDelete()
    {
        deleted_product_menu.is_deleted = false;
        show_undo_delete = false;
    }
}
