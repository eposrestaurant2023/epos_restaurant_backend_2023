@inject IHttpService http
@inject IMatToaster toast
@inject IJSRuntime js
@inject IStringLocalizer<Resource> lang
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <UIGridCenter>
        <UIContainerBox Title="@lang["Payment History"]" is_show_add_button="@(sale.balance > 0)" OnAddClick="@(()=> { is_add_payment = true; payment_id = Guid.Empty; })">
            <ViewEmptyTemplate is_view="@(sale.sale_payments.Where(r => r.is_deleted == false).Any())">
                @foreach (var p in sale.sale_payments.Where(r => r.is_deleted == false).OrderByDescending(r => r.created_date))
                {
                    <UIListBox ImageUrl="@p.payment_type?.photo">
                        <ContentLeft>
                            <div>
                                <ComAuthorize roles="@gv.GetRole("sale_management")" url="@("receiptlist/"+p.sale_id)">@p.sale?.document_number</ComAuthorize>
                            </div>
                            <div>
                                <span>@p.payment_type?.payment_type_name_en</span>
                            </div>
                            <Column is_visible="@(!string.IsNullOrEmpty(p.reference_number))">@p.reference_number</Column>
                            <div>
                                <span>@p.payment_date.ToString(gv.date_format)</span>
                            </div>
                            <div>
                                <span>By: @p.created_by on @p.created_date.ToString(gv.date_time_format)</span>
                            </div>

                            <TextOverflow Text="@p.payment_note" ClassName="small-text" />

                        </ContentLeft>
                        <ContentRight>
                            <div class="pos-label">
                                <div class="txt-bold">
                                    @p.payment_amount.ToString(p.currency_format)
                                </div>
                            </div>
                            <Spacing Number="10" />
                            <Column ClassName="uk-text-right">
                                <Icon icon="edit" OnClick="@(() => EditPayment_Click(p))" title="@lang["Edit"]" is_visible="@(!p.is_payment_from_pos)" />
                                <Icon icon="delete" OnClick="@(() => DeletePayment_Click(p))" title="@lang["Delete"]" is_loading="@p.is_deleting" is_visible="@(!p.is_payment_from_pos)"/>
                            </Column>
                        </ContentRight>
                    </UIListBox>
                }
            </ViewEmptyTemplate>
        </UIContainerBox>
    </UIGridCenter>

    @if (is_add_payment)
    {
        <ComSaleDetail_AddPayment sale_id="@sale_id" payment_id="@payment_id" @bind-is_opened="@is_add_payment" OnSave="@OnReload" />
    }
    @*@if (is_print)
    {
        <ComPreviewReport report_id="185" @bind-IsOpened="is_print" />
    }*@
}
@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public Guid sale_id { get; set; }
    [Parameter] public EventCallback<bool> on_reload { get; set; }
    public SaleModel sale { get; set; } = new SaleModel();
    Guid payment_id = Guid.Empty;
    bool is_loading, is_add_payment, is_print;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadPaymentHistory();
        is_loading = false;
    }

    void EditPayment_Click(SalePaymentModel p)
    {
        payment_id = p.id;
        if (p.sale_id == Guid.Empty)
        {
            sale.id = Guid.Empty;
        }
        else
        {
            //sale.id = p.sale_id;
        }
        is_add_payment = true;
    }


    async Task DeletePayment_Click(SalePaymentModel p)
    {
        p.is_deleting = true;
        if (await js.Confirm("Delete payment", "Are you sure you want to delete this payment?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("SalePayment/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await OnReload();
                toast.Add("Delete payment successfully", MatToastType.Success);
                await on_reload.InvokeAsync(true);
            }
            else
            {
                toast.Add(resp.Content.ToString(), MatToastType.Warning);
            }
        }
        p.is_deleting = false;
    }

    async Task LoadPaymentHistory()
    {
        var api_url = $"sale({sale_id})?$select=id,document_number,balance&$expand=sale_payments($expand=payment_type($select=photo,payment_type_name_en,payment_type_name_kh);$filter=is_credit eq false)";
        var resp = await http.ApiGet(api_url);
        sale = JsonSerializer.Deserialize<SaleModel>(resp.Content.ToString());
    }

    async Task OnReload(bool is_reload = true)
    {
        await on_reload.InvokeAsync(true);
        await LoadPaymentHistory();
    }
}
