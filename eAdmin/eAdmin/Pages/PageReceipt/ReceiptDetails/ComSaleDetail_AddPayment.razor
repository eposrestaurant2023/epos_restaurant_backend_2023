@inject IHttpService http
@inject IMatToaster toast
@inject IStringLocalizer<Resource> lang
<Modal IsSimpleMode="false" Title="@lang["Sale Payment"]" OnClosed="@(()=>ToogleModal(false))" @bind-IsOpened="@is_opened"  ModalWidth="800px">
    <ModalBody>
        @if (is_loading)
        {
            <Spinner />
        }
        else
        {
           
         
            <UIContainerBox Title="@lang["Sale Balance Amount"]">
                <NumberInput text="@sale_balance" label="@lang["Balance"]" is_read_only="true" />
            </UIContainerBox>
            @if (can_enter_payment)
            {
                <UIContainerBox>
                    <TextInput label="@lang["Reference #"]" @bind-text="@model.reference_number" is_horizontal="true"/>
                    <DateInput @bind-Value="@model.payment_date" label="@lang["Payment Date"]" /> 
                    <SelectPaymentType selected_valueChanged="@PaymentTypeChanged" @bind-payment_type="@model.payment_type"/>
                    <NumberInput @bind-text="@model.payment_amount" label="@lang["Payment Amount"]">
                        @if (is_main_currency == false)
                        {
                            <span>
                                
                                @lang["Total paid amount in base currency"] : @total_base_payment_amount.ToString(gv.currency_format) <br/>
                                @lang["Exchange Rate"]: @model.exchange_rate.ToString(model.currency_format)
                            </span>
                        }
                    </NumberInput>
                   
                </UIContainerBox>

                <UIContainerBox Icon="notes" Title="@lang["Notes"]">
                    <TextInput @bind-text="@model.payment_note" type="textarea" placeholder="@($"{lang["Enter note"]}...")" />
                </UIContainerBox>

            }
            else
            {
                <UIContainerBox>
                    @lang["Cannot add payment for this sale invoice."]
                </UIContainerBox>
            }
        }

    </ModalBody>
    @if (can_enter_payment)
    {
        <ModalFooter is_action_form="false">
            <ComSavingFormButton is_loading="@is_saving" is_show_save_submit="false" is_show_save_action="true" OnSave="@Save_Click" is_show_cancel_action="true" OnCancel="@(()=>ToogleModal(false))" />
        </ModalFooter>
    }
    
</Modal>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public Guid payment_id { get; set; }
    [Parameter] public Guid sale_id { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public EventCallback<bool> is_openedChanged { get; set; }


    [Parameter] public EventCallback<bool> OnSave { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }



    bool is_saving,is_loading;



    public decimal sale_balance  { get {
            if (sale != null)
            {
                if(model.id == Guid.Empty)
                {
                    return sale.balance;
                }else
                {
                    decimal exchange_rate = Convert.ToDecimal(old_model.exchange_rate);
                    return sale.balance + old_model.payment_amount / (exchange_rate == 0 ? 1 : exchange_rate);
                }
            }
            return 0;
        } }


    public SaleModel sale { get; set; }

    SalePaymentModel model = new SalePaymentModel();
    SalePaymentModel old_model= new SalePaymentModel();

    List<BusinessBranchCurrencyModel> currencies = new List<BusinessBranchCurrencyModel>();

    public decimal total_base_payment_amount
    {
        get
        {
            return model.payment_amount / Convert.ToDecimal( model.exchange_rate);
        }
    }

    public bool can_enter_payment
    {
        get
        {

            if (sale == null) return false;

            if (sale_balance == 0) return false;


            if (payment_id != Guid.Empty)
            {
                if (model == null)
                {
                    return false;
                }
                if (model.id == Guid.Empty) return false;
            }

            return true;
        }
    }


    public bool is_main_currency
    {
        get
        {
            if (!is_loading)
            {
                if (currencies.Any())
                {
                    var data = currencies.Where(r => r.currency_id == model.currency_id && r.business_branch_id == sale.business_branch_id).ToList();
                    if (data.Any())
                    {
                        if (data.FirstOrDefault().exchange_rate == 1)
                        {
                            return true;
                        }
                    }
                }

            }
            return false;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        old_model = new SalePaymentModel();

        is_loading = true;
        await LoadExchangeRate();
        await LoadData();
        if (payment_id != Guid.Empty)
        {
            await LoadPayment();
        }
        else
        {
            model.sale_id = sale_id;
            model.payment_type_id = gv.default_payment_type_id;
            model.payment_type = gv.payment_types.Where(r => r.id == model.payment_type_id).FirstOrDefault();
            model.payment_type_group = model.payment_type.payment_type_group;
            model.payment_type_name_en= model.payment_type.payment_type_name_en;
            model.payment_type_name_kh= model.payment_type.payment_type_name_kh;


            model.currency_id = model.payment_type.currency_id;

            var currency = currencies.Where(r => r.business_branch_id == sale.business_branch_id && r.currency_id == model.currency_id);
            if(currency.Any())
            {
                var c = currency.FirstOrDefault();
                model.currency_name_en = c.currency.currency_name_en;
                model.currency_name_kh = c.currency.currency_name_kh;
                model.currency_format = c.currency.currency_format;
                model.exchange_rate = c.exchange_rate;
                model.change_exchange_rate = c.change_exchange_rate;

            }


            model.payment_amount = sale.balance;

            model.outlet_id = sale.outlet_id;
            model.is_create_payment_in_sale_order = true;


        }

        //load default payment


        is_loading = false;
    }



    async Task LoadData()
    {
        var resp = await http.ApiGet($"Sale({sale_id})");
        if (resp.IsSuccess)
        {
            sale = JsonSerializer.Deserialize<SaleModel>(resp.Content.ToString());

        }
        else
        {
            toast.Add(lang["Can not get sale id."], MatToastType.Warning);
        }
    }
    async Task LoadPayment()
    {
        var resp = await http.ApiGet($"SalePayment({payment_id})?$expand=payment_type");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<SalePaymentModel>(resp.Content.ToString());
            old_model = JsonSerializer.Deserialize<SalePaymentModel>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Error Loading Payment.", MatToastType.Warning);

        }
    }

    async Task LoadExchangeRate()
    {
        var resp = await http.ApiGetOData($"BusinessBranchCurrency?$expand=currency($select=currency_name_en,currency_name_kh,currency_format)");
        if (resp.IsSuccess)
        {
            currencies = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Error Loading Exchange Rate Fail.", MatToastType.Warning);

        }
    }

    void PaymentTypeChanged(int payment_type_id)
    {
        model.payment_type_id = payment_type_id;
        var pt = gv.payment_types.Where(r => r.id == payment_type_id).FirstOrDefault();
        int currency_id = pt.currency_id;
        var data = currencies.Where(r => r.business_branch_id == sale.business_branch_id && r.currency_id == currency_id);
        if (data.Any())
        {
            var c = data.FirstOrDefault();
            model.exchange_rate = c.exchange_rate;
            model.currency_id = c.currency_id;
            model.currency_format = c.currency.currency_format;
            model.change_exchange_rate = c.change_exchange_rate;
            model.currency_name_en = c.currency.currency_name_en;
            model.currency_name_kh = c.currency.currency_name_kh;
            model.payment_type_group = pt.payment_type_group;
            model.payment_type_name_en = pt.payment_type_name_en;
            model.payment_type_name_kh = pt.payment_type_name_kh;

        }
    }


    async Task Save_Click()
    {
        is_saving = true;

        if (model.payment_amount <= 0)
        {
            toast.Add(lang["Please enter payment amount."], MatToastType.Warning);
            is_saving = false;
            return;
        }

        if (total_base_payment_amount > sale_balance)
        {
            toast.Add(lang["Payment amount cannot greater than balance."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        if(model.payment_type_id <= 0)
        {
            toast.Add(lang["Please select a payment type."], MatToastType.Warning);
            is_saving = false;
            return;
        }

        SalePaymentModel save_model = JsonSerializer.Deserialize<SalePaymentModel>(JsonSerializer.Serialize(model));
        save_model.payment_type = null;


        var resp = await http.ApiPost("SalePayment/save", save_model);

        if (resp.IsSuccess)
        {
            await OnSave.InvokeAsync(true);
            model = new SalePaymentModel();
            toast.Add(lang["Save successfully"], MatToastType.Success);
        }
        else
        {
            await OnSave.InvokeAsync(false);
            toast.Add(lang["Cannot add payment."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        ToogleModal(false);
        is_saving = false;
    }

    void ToogleModal(bool _open = false) {
        model = new SalePaymentModel();
        is_opened = _open;
        is_openedChanged.InvokeAsync(_open);
    }
}
