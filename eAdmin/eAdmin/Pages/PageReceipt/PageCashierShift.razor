@page "/cashiershift"
@inherits PageCore
<Loading is_loading="@(is_loading || is_loading_data)" />

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}

@if (!is_loading)
{
    <PageContainer roles="@gv.GetRole("cashier_shift_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Cashier Shift"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="true" OnFillterClick="@FilterClick">
                        <FilterDateRange @bind-dates="@state.date_range" />
                        <SelectBusinessBranchMutiple selected_business="@state.multi_select_id_1" selected_businessChanged="@((val)=> { state.multi_select_id_1 = val;state.multi_select_id_2= null;  } )" business_id="@((val)=>state.multi_select_value_1=val)" />
                        <SelectOutletMultiple business_branch_ids="@state.multi_select_value_1" @bind-selected_outlet="@state.multi_select_id_2" outlet_id="@((val)=>state.multi_select_value_2=val)" />
                    </ComSearch>
                </MudHidden>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="true" OnFillterClick="@FilterClick" is_fullwidth="true">
                    <FilterDateRange @bind-dates="@state.date_range" />
                    <SelectBusinessBranchMutiple selected_business="@state.multi_select_id_1" selected_businessChanged="@((val)=> { state.multi_select_id_1 = val;state.multi_select_id_2= null;  } )" business_id="@((val)=>state.multi_select_value_1=val)" />
                    <SelectOutletMultiple business_branch_ids="@state.multi_select_value_1" @bind-selected_outlet="@state.multi_select_id_2" outlet_id="@((val)=>state.multi_select_value_2=val)" />
                </ComSearch>
                <Spacing Number="4"/>
            </MudHidden>
            <FilterInfo filters="@state.filters" OnRemoveFilterClick="@RemoveFilter" OnRemoveAllFilterClick="@RemoveAllFilter" />
            <Com is_visible="@(models != null)">
                <Table Items="@models"
                       PerPage="@state.pager.per_page"
                       TotalItem="@TotalRecord"
                       CurrentPage="@state.pager.current_page"
                       OnPagerChange="@SelectChange"
                       OnPageChange="@ChangePager"
                       isLoading="@is_loading_data"
                       ShowPager="true"
                       ShowCounter="true"
                       ClassName="uk-table-small uk-table-striped uk-table-hover"
                       ScrollClass="uk-overflow-auto">
                    <TableHeader>
                        @HeaderTemplate("working_date", lang["Working Date"], "uk-text-center")
                        @HeaderTemplate("cashier_shift_number", lang["Cashier Shift Number"], "uk-text-center")
                        @HeaderTemplate("working_day_number", lang["Working Day Number"], "uk-text-center")
                        @HeaderTemplate("cash_drawer_name", lang["Cash Drawer"])
                        @HeaderTemplate("outlet_name_en", lang["Outlet"])

                        <Th>
                            @lang["Opened Station"]
                            <br />
                            @lang["Close Station"]
                        </Th>
                        @HeaderTemplate("closed_by", lang["Closed by"])
                        @HeaderTemplate("closed_date", lang["Closed Date"], "uk-text-center")
                        @HeaderTemplate("created_by", lang["Created by"], "col-center")
                        @HeaderTemplate("created_date", lang["Created Date"], "uk-text-center")

                        <ThCenter>@lang["Status"]</ThCenter>
                        <th class="uk-width-auto"></th>
                    </TableHeader>
                    <RowTemplate Context="p">
                        <TdCenter>
                            @p.working_date.ToString(gv.date_format)
                        </TdCenter>
                        <TdCenter>
                            <ComAuthorize roles="@gv.GetRole("cashier_shift_management")" url="@($"cashiershift/{p.id}")">
                                @p.cashier_shift_number
                            </ComAuthorize>
                        </TdCenter>
                        <TdCenter>
                            <ComAuthorize roles="@gv.GetRole("cashier_shift_management")" url="@($"workingday/{p.working_day_id}")">
                                @p.working_day.working_day_number
                            </ComAuthorize>
                        </TdCenter>
                        <td>
                            @p.cash_drawer_name
                        </td>
                        <td>
                            @p.outlet_name_en
                        </td>
                        <td>
                            @p.opened_station_name_en
                            <br />
                            @p.closed_station_name_en
                        </td>
                        <td>
                            @p.closed_by
                        </td>
                        <TdCenter>
                            @Convert.ToDateTime(p.closed_date).ToString(gv.date_time_format)
                        </TdCenter>
                        <td>
                            @p.created_by
                        </td>
                        <TdCenter>
                            @Convert.ToDateTime(p.created_date).ToString(gv.date_time_format)
                        </TdCenter>
                        <TdCenter>
                            @if (p.is_closed)
                                {
                                <LabelInActive text="@lang["Closed"]" />
                                }
                                else
                                {
                                <Label Text="@lang["Opened"]" />
                                }
                        </TdCenter>
                        <TdCenter>
                            <Icon icon="visibility" OnClick="@(()=>nav.NavigateTo($"cashiershift/{p.id}"))" />
                        </TdCenter>
                    </RowTemplate>
                </Table>
            </Com>
        </PageBody>
    </PageContainer>
}

@code{

    public List<CashierShiftModel> models = new List<CashierShiftModel>();
    public int TotalRecord = 0;
    string controller_api = "CashierShift";
    public string StateKey
    {
        get
        {

            return "hUndmRGrRCashierSHIFTDAy0ee2u9T3123" + gv.current_login_user.id; //Storage and Session Key  
        }
    }

    public string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by) || state.pager.order_by == "id")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?$expand=working_day($select=working_day_number,business_branch_name_kh,business_branch_name_en,business_branch_id,outlet_name_en,outlet_name_kh)";
            url += $"&keyword={GetFilterValue2(state.filters, "keyword", "")}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";

            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state = await GetState(StateKey);
        await LoadData();
    }

    public async Task LoadData(string api_url = "")
    {
        is_loading = true;

        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
            await SetState(StateKey, state);
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<CashierShiftModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }
        is_loading = false;
    }

    public async Task ViewClick(ModuleViewModel m)
    {
        state.filters.Clear();
        state.filters = m.filters;
        state.pager.order_by = m.default_order_by;
        state.pager.order_by_type = m.default_order_by_type;
        state.page_title = m.title;
        state.pager.current_page = 1;
        await LoadData();
    }

    public async Task FilterClick()
    {
        state.filters.RemoveAll(r => r.filter_info_text != "");
        //start date
        if (state.date_range.is_visible)
        {
            state.filters.Add(
                new FilterModel()
                {
                    key = "working_date",
                    value1 = string.Format("{0:yyyy-MM-dd}", state.date_range.start_date),
                    filter_title = lang["Working Date"],
                    filter_info_text = state.date_range.start_date.ToString(gv.date_format) + " - " + state.date_range.end_date.ToString(gv.date_format),
                    filter_operator = "Ge",
                    is_clear_all = true,
                    will_remove = true,
                    state_property_name = "date_range"
                }
            );

            //end date
            state.filters.Add(new FilterModel()
            {
                key = "working_date",
                value1 = string.Format("{0:yyyy-MM-dd}", state.date_range.end_date),
                is_clear_all = true,
                filter_operator = "Le",
                will_remove = true,
                state_property_name = "date_range"
            });
        }

        // filter business
        string business_branch_ids = "";
        if (state.multi_select_value_1 != null && state.multi_select_value_1.Any())
        {

            foreach (var x in state.multi_select_value_1)
            {
                business_branch_ids += x + ",";
            }
            if (!string.IsNullOrEmpty(business_branch_ids))
            {
                business_branch_ids = business_branch_ids.Substring(0, business_branch_ids.Length - 1);
            }

            state.filters.Add(new FilterModel()
            {
                key = "working_day/business_branch_id",
                value1 = business_branch_ids,
                filter_title = lang["Business Branch"],
                filter_operator = "multiple",
                state_property_name = "list_selected_values",
                filter_info_text = business_branch_ids,
                is_clear_all = true,
                will_remove = true
            });
        }
        else
        {
            state.filters.Add(new FilterModel()
            {
                key = "working_day/business_branch_id",
                value1 = gv.business_branch_ids_filter_1,
                filter_title = lang["Business Branch"],
                filter_operator = "multiple",
                state_property_name = "list_selected_values",
                filter_info_text = gv.business_branch_ids_filter_1,
                is_clear_all = true,
                will_remove = true,
                is_show_on_infor = false
            });
        }

        // filter outlet
        if (state.multi_select_value_2 != null)
        {
            string value = "";
            foreach (var x in state.multi_select_value_2)
            {
                value += x + ",";
            }
            if (!string.IsNullOrEmpty(value))
            {
                value = value.Substring(0, value.Length - 1);
            }

            state.filters.Add(new FilterModel()
            {
                key = "outlet_id",
                value1 = value,
                filter_title = lang["Outlet"],
                filter_operator = "multiple",
                state_property_name = "list_selected_values",
                filter_info_text = value,
                is_clear_all = true,
                will_remove = true
            });
        }
        else
        {
            state.filters.Add(new FilterModel()
            {
                key = "outlet_id",
                value1 = gv.outlet_ids_filter(business_branch_ids),
                filter_title = lang["Outlet"],
                filter_operator = "multiple",
                state_property_name = "list_selected_values",
                filter_info_text = gv.outlet_ids_filter(business_branch_ids),
                is_clear_all = true,
                will_remove = true,
                is_show_on_infor = false
            });
        }

        state.pager.current_page = 1;
        await LoadData();
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }
    public async Task ChangePager(int _page)
    {
        state.pager.current_page = _page;
        await LoadData();
    }

    public async Task OnSearch(string keyword)
    {
        state.pager = new PagerModel();
        SetFilterValue2(state.filters, "keyword", keyword);
        await LoadData();
    }
    public async Task OrderBy(string col_name = "")
    {
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
    }

    public async Task RemoveFilter(FilterModel f)
    {
        is_loading = true;
        string[] remove_key = f.remove_key.Split(',');
        foreach (var k in remove_key)
        {
            // clear filter business
            if (k == "business_branch_id" && state.multi_select_id_1 != null)
            {
                state.multi_select_id_1.Clear();
                state.multi_select_value_1.Clear();
            }


            // clear filter outlet
            if (k == "outlet_id" && state.multi_select_id_2 != null)
            {
                state.multi_select_id_2.Clear();
                state.multi_select_value_2.Clear();
            }


            state.filters.RemoveAll(r => r.key == k);
        }

        state.pager.current_page = 1;
        //gv.RemoveFilter
        RemoveFilter(state, f.state_property_name);
        await LoadData();
        is_loading = false;
    }

    public async Task RemoveAllFilter()
    {
        is_loading = true;
        foreach (var f in state.filters.Where(r => r.is_clear_all == true))
        {
            // clear filter business
            if (f.key == "business_branch_id")
            {
                state.multi_select_id_1.Clear();
                state.multi_select_value_1.Clear();
            }


            // clear filter outlet
            if (f.key == "outlet_id")
            {
                state.multi_select_id_2.Clear();
                state.multi_select_value_2.Clear();
            }

            RemoveFilter(state, f.state_property_name);
        }


        state.filters.RemoveAll(r => r.is_clear_all == true);
        state.pager.current_page = 1;
        await LoadData();
        is_loading = false;
    }

}