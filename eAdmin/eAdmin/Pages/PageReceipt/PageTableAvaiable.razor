@inherits PageCore
@page "/receiptlist/tableplan"
<Loading is_loading="@(is_loading||is_reloading)" />
@if (!is_loading)
{
    <PageContainer roles="@gv.GetRole("receiptlist_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Table Plan"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                   
                </MudHidden>
                <RefreshButton OnClick="@OnRefresh" />
            </HeaderRight>
        </PageHeader>
        <PageBody>

            <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                @foreach (var branch in models.Select(r => new { r.business_branch_id, r.business_branch_name_en }).Distinct())
                {
                    <MudTabPanel Text="@branch.business_branch_name_en" OnClick="@(()=>OnBussinessBranch_Click(branch.business_branch_id))">
                        <MudChipSet @bind-SelectedChip="selected" Filter="true" Mandatory="true">

                            @foreach (var outlet in models.Where(r => r.business_branch_id == current_business_branch_id).Select(r => new { r.outlet_id, r.outlet_name_en }).Distinct())
                            {
                                <MudChip Default="@(current_outlet_id == outlet.outlet_id)" Text="@outlet.outlet_name_en" OnClick="@(()=>OnOutlet_Click(outlet.outlet_id))"></MudChip>


                            }
                        </MudChipSet>
                        <MudTabs Outlined="true" Position="@Position.Bottom" Rounded="true" Border="true"
                                 ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                            @foreach (var table_group in models.Where(r => r.outlet_id == current_outlet_id).Select(r => new { r.table_group_id, r.table_group_name_en }).Distinct())
                            {
                            <MudTabPanel Text="@table_group.table_group_name_en">
                               
                                <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="height:70vh;overflow:auto">
                                    @foreach (var table in models.Where(r=>r.table_group_id == table_group.table_group_id))
                                    {
                                        <MudItem>
                                            <MudPaper Class="d-flex align-center justify-center" Style="@($"background:{GetTableColor(table.is_occupy)};color:#FFFFFF")" Height="140px" Width="140px">
                                                @table.table_name
                                            </MudPaper>
                                        </MudItem>
                                    }
                                </MudGrid>
                                
                            </MudTabPanel>
                            }
                        </MudTabs>
                    </MudTabPanel>
                }


            </MudTabs>
        </PageBody>
    </PageContainer>
}

@code{

    List<TableOccupyModel> models = new List<TableOccupyModel>();

    MudChip selected;


    bool is_reloading = false;

    Guid current_outlet_id;
    Guid _current_business_branch_id;
    Guid current_business_branch_id
    {
        get
        {
            if (_current_business_branch_id == Guid.Empty)
            {
                var branch = models.Select(r => new { r.business_branch_id, r.business_branch_name_en }).Distinct();
                return branch.FirstOrDefault().business_branch_id;
            }
            else
            {
                return _current_business_branch_id;
            }

        }
        set
        {
            _current_business_branch_id = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        await OnLoadData();
        current_outlet_id = OnSetDefaultOutlet(Guid.Empty);
        is_loading = false;

    }

    async Task OnRefresh()
    {
        is_loading = true;

        await OnLoadData();
        is_loading = false;
    }

    async Task OnLoadData()
    {
        var res = await http.ApiPost("GetData", new FilterModel()
        {
            procedure_name = "sp_get_table_occupy",
            procedure_parameter = ""

        });
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<TableOccupyModel>>(res.Content.ToString());
        }

    }

    async Task OnOutlet_Click(Guid outlet_id)
    {
        is_reloading = true;


        if (current_outlet_id != outlet_id) {
            current_outlet_id = outlet_id;

        }
        await OnLoadData();

        is_reloading = false;
    }

    async Task OnBussinessBranch_Click(Guid branch_id)
    {
        is_reloading = true;
        _current_business_branch_id = branch_id;
        if (_current_business_branch_id != branch_id)
        {
            _current_business_branch_id = branch_id;
        }
        current_outlet_id = OnSetDefaultOutlet(branch_id);
        await OnLoadData();
        is_reloading = false;
    }

    Guid OnSetDefaultOutlet(Guid branch_id)
    {
        if (branch_id != Guid.Empty)
        {
            var outlet = models.Where(r => r.business_branch_id == current_business_branch_id).Select(r => r.outlet_id).Distinct().FirstOrDefault();
            return outlet;
        }
        else
        {
            var outlet = models.Select(r => r.outlet_id).Distinct().FirstOrDefault();
            return outlet;
        }

    }

    string GetTableColor(bool occupy)
    {
        if (occupy)
        {
            return "#FFCA25";
        }
        return "#0078C1";
    }

    class TableOccupyModel
    {
        public Guid business_branch_id { get; set; }
        public int id { get; set; }
        public string business_branch_name_en { get; set; }
        public string table_name { get; set; }
        public int table_group_id { get; set; }
        public string table_group_name_en { get; set; }
        public string outlet_name_en { get; set; }
        public Guid outlet_id { get; set; }
        public bool is_occupy { get; set; }
    }
}