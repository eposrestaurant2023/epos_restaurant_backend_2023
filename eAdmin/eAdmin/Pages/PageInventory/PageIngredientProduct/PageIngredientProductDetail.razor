@page "/ingredientproduct/{id:int}"
@inject IHttpService http
@inject NavigationManager nav
@inject IMatToaster toast
@inject IJSRuntime js

<Loading is_loading="@(is_loading || is_loading_data)" />


@if (!is_loading)
{

    <Title Value="Product Detail"></Title>
    <PageContainer roles="@gv.GetRole("product_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @model.product_display_name
                        <LabelDeleted is_visible="@model.is_deleted" />
                        <LabelActive is_visible="@(!model.is_deleted && model.status)" is_loading="@model.is_change_status" />
                        <LabelInActive is_visible="@(!model.is_deleted && !model.status)"  is_loading="@model.is_change_status"/>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <Button icon="edit" title="Edit" OnClick="@(()=>nav.NavigateTo($"ingredientproduct/edit/{model.id}"))" is_visible="@(!model.is_deleted)" />
                <ComAttachFileButton RoleAdd="@gv.GetRole("ingredient_product_add")"
                                     RoleEdit="@gv.GetRole("ingredient_product_edit")"
                                     RoleDelete="@gv.GetRole("ingredient_product_delete")"
                                     ApiFilter="@($"product_id eq {id} ")"
                                     File="@(new AttachFilesModel() { product_id =  id })"
                                     IsVisible="@(!model.is_deleted)" />

                <AddButton url="product/new" roles="@gv.GetRole("ingredient_product_add")">New Product</AddButton>

                <MoreButton is_loading="@(model.is_loading ||model.is_change_status || model.is_deleting || model.is_restoring)">
                    <MoreButtonItem roles="@gv.GetRole("ingredient_product_add")" icon="file_copy" url="@($"ingredientproduct/clone/{model.id}")">Clone</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("ingredient_product_edit")" icon="highlight_off" is_visible="@(!model.is_deleted && model.status)" OnClick="OnChangeStatus">Inactive</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("ingredient_product_edit")" icon="check" is_visible="@(!model.is_deleted && !model.status)" OnClick="OnChangeStatus">Active</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("ingredient_product_delete")" icon="delete" is_visible="@(!model.is_deleted)" OnClick="@OnDelete">Delete</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("ingredient_product_edit")" icon="refresh" is_visible="@(model.is_deleted)" OnClick="@OnRestore">Restore</MoreButtonItem>

                </MoreButton>
                <RefreshButton OnClick="@LoadData" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Tab>
                <TabHeader>
                    <TabHeaderItem>General Information</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_comment_tab=true)">Comment  and History</TabHeaderItem>
                    
                </TabHeader>
                <TabBody>
                    <TabItem>
                        <ComIngredientProductDetail_Formation model="@model"/>
                    </TabItem>
                    <TabItem>
                        @if (show_comment_tab)
                        {
                        <UIGridCenter>
                            <UIContainerBox Title="Comment and History">
                                <ComHistory RoleAdd="@gv.GetRole("ingredient_product_add")"
                                            RoleDelete="@gv.GetRole("ingredient_product_delete")"
                                            RoleEdit="@gv.GetRole("ingredient_product_add")"
                                            ApiFilter="@($"product_id eq {id}")"
                                            history="@(new HistoryModel() { product_id = id})" />
                            </UIContainerBox>
                        </UIGridCenter>
                               
                            
                        }
                    </TabItem>

                </TabBody>
            </Tab>
             
        </PageBody>
    </PageContainer>
}

@code{
        [Parameter] public int id { get; set; }
        [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public ProductModel model { get; set; }
    bool is_loading, is_loading_data,show_comment_tab;

    public string api_url { get {
            string url = $"Product({id})";
            url = url + "?$expand=product_category($select=product_category_en)";
            return url;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        await LoadData();
        is_loading = false;
    }


    async Task LoadData()
    {
        is_loading = true;
        var resp =await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<ProductModel>(resp.Content.ToString());
        }
        is_loading = false;

    }

    async Task OnDelete()
    {


        model.is_deleting = true;
        if(await js.Confirm("Delete Product", "Are you sure you want to delete this product?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add("delete product successfully", MatToastType.Success);
                model.is_deleted = true;

            }
        }


        model.is_deleting = false;
    }
    async Task OnRestore()
    {

        model.is_restoring = true;
        if (await js.Confirm("Delete Product", "Are you sure you want to retore this product?", SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add("Restore product successfully", MatToastType.Success);
                model.is_deleted = false;

            }
        }
        model.is_restoring = false;
    }
    async Task OnChangeStatus()
    {

        model.is_change_status = true;

        var resp = await http.ApiPost("Product/ChangeStatus/" + id);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            model.status = !model.status;

        }
        model.is_change_status = false;
    }


}

 