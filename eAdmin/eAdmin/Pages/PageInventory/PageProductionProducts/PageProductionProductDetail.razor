@page "/productionproduct/{id:int}"
@inject IHttpService http
@inject NavigationManager nav
@inject IMatToaster toast
@inject IJSRuntime js
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />
@if (!is_loading)
{

    <Title Value="@lang["Production Product"]"></Title>
    <PageContainer roles="@gv.GetRole("production_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @model.product_display_name
                        <ComProductDetail_HeaderStatus model="@model" is_ingredient="false" />
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <Button icon="edit" title="@lang["Edit"]" OnClick="@(()=>nav.NavigateTo($"productionproduct/edit/{model.id}"))" is_visible="@(!model.is_deleted)" />
                <ComAttachFileButton RoleAdd="@gv.GetRole("production_add")"
                                     RoleEdit="@gv.GetRole("production_edit")"
                                     RoleDelete="@gv.GetRole("production_delete")"
                                     ApiFilter="@($"product_id eq {id} ")"
                                     File="@(new AttachFilesModel() { product_id =  id })"
                                     IsVisible="@(!model.is_deleted)" />

                <AddButton url="productionproduct/new" roles="@gv.GetRole("production_add")">@lang["New Production"]</AddButton>

                <MoreButton is_loading="@(model.is_loading ||model.is_change_status || model.is_deleting || model.is_restoring)">
                    <MoreButtonItem roles="@gv.GetRole("production_add")" icon="file_copy" url="@($"productionproduct/clone/{model.id}")">@lang["Clone"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("production_edit")" icon="highlight_off" is_visible="@(!model.is_deleted && model.status)" OnClick="OnChangeStatus">@lang["Inactive"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("production_edit")" icon="check" is_visible="@(!model.is_deleted && !model.status)" OnClick="OnChangeStatus">@lang["Active"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("production_delete")" icon="delete" is_visible="@(!model.is_deleted)" OnClick="@OnDelete">@lang["Delete"]</MoreButtonItem>
                    <MoreButtonItem roles="@gv.GetRole("production_edit")" icon="refresh" is_visible="@(model.is_deleted)" OnClick="@OnRestore">@lang["Restore"]</MoreButtonItem>

                </MoreButton>
                <RefreshButton OnClick="@LoadData" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Tab>
                <TabHeader>
                    <TabHeaderItem>@lang["General Information"]</TabHeaderItem>

                    <TabHeaderItem OnClick="@(()=>show_produce = true)">@lang["Produce"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_stock_transfer = true)">@lang["Stock Transfer History"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_purchase_order = true)">@lang["Purchase Order"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_produce_history = true)">@lang["Produce History"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_inventory_transation = true)">@lang["Inventory Transaction"]</TabHeaderItem>
                    <TabHeaderItem OnClick="@(()=>show_comment_tab=true)">@lang["Comment and History"]</TabHeaderItem>
                </TabHeader>
                <TabBody>
                    <TabItem>
                        <ComIngredientProductDetail_Formation model="@model" />
                    </TabItem>
                    <TabItem>
                        @if (show_produce)
                        {
                            <ComProductionProductDetail_Produce />
                        }

                    </TabItem>
                    <TabItem>
                        @if (show_stock_transfer)
                        {
                            <ComProductionProductDetail_Stock_Transfer_History product_id="@id" />
                        }

                    </TabItem>
                    <TabItem>
                        @if (show_purchase_order)
                        {
                            <ComProductionProductDetail_Purchase_Order product_id="@id" />
                        }

                    </TabItem>
                    <TabItem>
                        @if (show_produce_history)
                        {
                            <ComProductionProductDetail_Produce_History />
                        }

                    </TabItem>
                    <TabItem>
                        @if (show_inventory_transation)
                        {
                            <ComProductDetail_InventoryTransactionHistory product_id="@model.id" />
                        }
                    </TabItem>
                    <TabItem>
                        @if (show_comment_tab)
                        {
                            <UIGridCenter>
                                <UIContainerBox Title="@lang["Comment and History"]">
                                    <ComHistory RoleAdd="@gv.GetRole("ingredient_add")"
                                                RoleDelete="@gv.GetRole("ingredient_delete")"
                                                RoleEdit="@gv.GetRole("ingredient_add")"
                                                ApiFilter="@($"product_id eq {id}")"
                                                history="@(new HistoryModel() { product_id = id})" />
                                </UIContainerBox>
                            </UIGridCenter>


                        }
                    </TabItem>

                </TabBody>
            </Tab>

        </PageBody>
    </PageContainer>
    @if (is_error)
    {
        <Error title="@lang["Production Product Detail"]">
            @lang[error_text]
        </Error>
    }
}
@code{
    [Parameter] public int id { get; set; }
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public ProductModel model { get; set; }
    bool is_loading, is_loading_data, show_comment_tab, show_produce, show_produce_history, show_stock_transfer, show_purchase_order, show_inventory_transation;
    bool is_error;
    string error_text;
    public string api_url
    {
        get
        {
            string url = $"Product({id})";
            url = url + "?$expand=product_category($select=product_category_en),unit,vendor($select=id,vendor_code, vendor_name,photo)";
            return url;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        await LoadData();
        if (!model.is_production_product)
        {
            is_error = true;
            error_text = "Production was not found.";
        }
        is_loading = false;
    }


    async Task LoadData()
    {
        is_loading = true;
        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<ProductModel>(resp.Content.ToString());
        }
        is_loading = false;

    }

    async Task OnDelete()
    {


        model.is_deleting = true;
        if (await js.Confirm(lang["Delete Product"], lang["Are you sure you want to delete this product?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add(lang["Delete product successfully"], MatToastType.Success);
                model.is_deleted = true;

            }
        }


        model.is_deleting = false;
    }
    async Task OnRestore()
    {

        model.is_restoring = true;
        if (await js.Confirm(lang["Delete Product"], lang["Are you sure you want to retore this product?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost("Product/delete/" + id);
            if (resp.IsSuccess)
            {
                toast.Add(lang["Restore product successfully"], MatToastType.Success);
                model.is_deleted = false;

            }
        }
        model.is_restoring = false;
    }
    async Task OnChangeStatus()
    {

        model.is_change_status = true;

        var resp = await http.ApiPost("Product/ChangeStatus/" + id);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MatToastType.Success);
            model.status = !model.status;

        }
        model.is_change_status = false;
    }
}