@inject IJSRuntime js
@inject IHttpService http
@inject IMatToaster toast
<div class="wrp-selected-items">

    @if (model != null)
    {
        <Table ShowTotalCount="false"
               Items="@model.active_purchase_order_products"
               ShowPager="false"
               ShowPagination="false"
               ShowPaging="false"
               CustomClass="set-verticle-top_custo"
               EmptyText="There's no record in the system">
            <TableHeader>
                <ThCenter>Image</ThCenter>
                <ThCenter>Code</ThCenter>
                <ThAuto>Detail</ThAuto>
                <ThCenter>Quanlity</ThCenter>
                <ThCenter>Unit</ThCenter>
                <ThRight>Price</ThRight>
                <ThCenter width="160px">Discount</ThCenter>
                <ThRight>Amount</ThRight>
                <th></th>
            </TableHeader>
            <RowTemplate Context="p">
                <ComPOProductRow purchase_order_product="@p" purchase_order_productChanged="POProductChanged" OnRemove="@(()=>RemoveProduct(p))" OnClone="@(()=>CloneProduct(p))" />
            </RowTemplate>
        </Table>
    }
 
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public PurchaseOrderModel model { get; set; }
    [Parameter] public EventCallback<PurchaseOrderModel> modelChanged { get; set; }
    public bool is_remove { get; set; }
    async Task POProductChanged(PurchaseOrderProductModel sp)
    {
        await modelChanged.InvokeAsync(model);
    }


    async Task RemoveProduct(PurchaseOrderProductModel sp)
    {
        if (sp.id == 0)
        {
            model.purchase_order_products.Remove(sp);
        }
        else
        {
            if (await js.Confirm("Delete Item", "Are you sure to delete this record?"))
            {
                sp.is_deleted = true;
            }
        }

        await modelChanged.InvokeAsync(model);
    }
    async Task CloneProduct(PurchaseOrderProductModel sp)
    {
        var json = JsonSerializer.Serialize(sp);
        var purchase_order_product = JsonSerializer.Deserialize<PurchaseOrderProductModel>(json);
        purchase_order_product.id = 0;
        model.purchase_order_products.Add(purchase_order_product);
        await modelChanged.InvokeAsync(model);
    }
}