@inject IHttpService http
@inject IJSRuntime js
@inject IMatToaster toast
@inject NavigationManager nav
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@is_loading" />
<ButtonGroup>
    <Button title="Print" icon="print" is_visible="@(po.is_deleted == false && po.status == true)" OnClick="Print_Click" />
    <Button roles="@gv.GetRole("purchase_order_edit")" OnClick="@(()=>nav.NavigateTo($"purchaseorder/edit/{po.id}"))" icon="edit" title="@lang["Edit"]" is_visible="@(po.can_edit && !po.is_fulfilled)" />
    <Button roles="@gv.GetRole("purchase_order_add_payment")" icon="payment" title="@lang["Add Payment"]" is_visible="@(po.is_deleted == false && po.status == true && po.balance > 0)" OnClick="@OnAddPayment">
        (@po.purchase_order_payments.Where(r => !r.is_deleted).Count())
    </Button>
</ButtonGroup>

<ComAttachFileButton RoleAdd="@gv.GetRole("purchase_order_add")"
                     RoleEdit="@gv.GetRole("purchase_order_edit")"
                     RoleDelete="@gv.GetRole("purchase_order_delete")"
                     ApiFilter="@($"purchase_order_id eq {po.id} ")"
                     File="@file"
                     IsVisible="@(!po.is_deleted)" />

<AddButton roles="@gv.GetRole("purchase_order_add")" url="purchaseorder/new">@lang["New Purchase Order"]</AddButton>
<MoreButton is_loading="@po.is_loading">
    <MoreButtonItem roles="@gv.GetRole("purchase_order_delete")" icon="delete" is_visible="@po.can_delete" OnClick="@DeleteInvoice_Click">@lang["Delete Invoice"]</MoreButtonItem>
    <MoreButtonItem roles="@gv.GetRole("purchase_order_add")" icon="file_copy" is_visible="@po.can_edit">@lang["Clone Invoice"]</MoreButtonItem>
</MoreButton>

@if (is_open_print)
{

    <ComPreviewReport IsOpened="@is_open_print" report_id="195" Title="Purcase Order Receipt" report_parameters="@($"id={po.id}&user_id={gv.current_login_user.id}")" OnClose="@(()=>is_open_print=false)" />
}

@code {
    [Parameter] public PurchaseOrderModel po { get; set; }
    [Parameter] public EventCallback<PurchaseOrderModel> poChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnAddPayment { get; set; }

    [CascadingParameter] public GlobalVariableModel gv { get; set; }

    AttachFilesModel file = new AttachFilesModel();
    bool is_loading;


    protected override void OnInitialized()
    {

        if (po.vendor_id > 0) file.vendor_id = po.vendor_id;
        file.purchase_order_id = po.id;
    }


    bool is_open_print = false;

    void Print_Click()
    {

        is_open_print = true;
    }

    async Task DeleteInvoice_Click()
    {
        is_loading = true;
        if (await js.Confirm(lang["Delete Sale Invoice"], lang["Are you sure you want to delete this sale invoice?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost($"purchaseorder/delete/{po.id}");
            if (resp.IsSuccess)
            {
                po.is_deleted = !po.is_deleted;
                await poChanged.InvokeAsync(po);
                toast.Add(lang["Delete PO invoice successfully."], MatToastType.Success);
            }
            else
            {
                toast.Add(resp.Content, MatToastType.Warning);
            }
        }

        is_loading = false;

    }
    async Task RestoreInvoice_Click()
    {


        is_loading = true;
        if (await js.Confirm(lang["Restore Sale Invoice"], lang["Are you sure you want to restore this sale invoice?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost($"purchaseorder/delete/{po.id}");
            if (resp.IsSuccess)
            {

                po.is_deleted = !po.is_deleted;
                await poChanged.InvokeAsync(po);
                toast.Add(lang["Restore PO invoice successfully."], MatToastType.Success);
            }
            else
            {
                toast.Add(resp.Content, MatToastType.Warning);
            }
        }

        is_loading = false;
    }
}
