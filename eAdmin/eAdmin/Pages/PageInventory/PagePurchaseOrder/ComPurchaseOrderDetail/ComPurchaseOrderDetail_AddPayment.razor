@inject IHttpService http
@inject IMatToaster toast
@inject IStringLocalizer<Resource> lang
<Modal IsSimpleMode="false" Title="@lang["PO Payment"]" OnClosed="@(() => ToogleModal(false))" @bind-IsOpened="@is_opened"  ModalWidth="800px" >
    <ModalBody>
        @if (is_loading)
        {
            <Spinner />
        }
        else
        {
            <UIContainerBox Title="@lang["PO Balance Amount"]">
                <NumberInput text="@po_balance" label="@lang["Balance"]" is_read_only="true" />
            </UIContainerBox>
            @if (can_enter_payment)
            {
                <UIContainerBox>
                    <TextInput label="Reference #" @bind-text="@model.reference_number" is_horizontal="true"/>
                    <DateInput @bind-Value="@model.payment_date" label="@lang["Payment Date"]" /> 
                    <SelectPaymentType selected_valueChanged="@PaymentTypeChanged" selected_value="@model.payment_type_id" payment_type="@model.payment_type"/>
                    <NumberInput @bind-text="@model.payment_amount" label="@lang["Payment Amount"]">
                        @if (is_main_currency == false)
                        {
                            <span>

                                @lang["Total paid amount in base currency"] : @total_base_payment_amount.ToString(gv.currency_format) <br />
                                @lang["Exchange Rate"]: @model.exchange_rate.ToString(model.currency_format)
                            </span>
                        }

                    </NumberInput>
                </UIContainerBox>

                <UIContainerBox Icon="notes" Title="@lang["Notes"]">
                    <TextInput @bind-text="@model.payment_note" type="textarea" placeholder="@($"{lang["Enter note"]}...")" />
                </UIContainerBox>

            }
            else
            {
                <UIContainerBox>
                    @lang["Cannot add payment for this purchase order."]
                </UIContainerBox>
            }
        }

    </ModalBody>
    @if (can_enter_payment)
    {
        <div class="model-footer">
            <div uk-margin class="uk-flex">
                <div class="uk-margin-auto-left">
                    @if (is_saving)
                    {
                        <Button icon="save" OnClick="@Save_Click">@lang["Saving"] <Spinner /></Button>
                    }
                    else
                    {
                        <Button icon="save" OnClick="@Save_Click">@lang["Save"]</Button>
                        <Button icon="reply" class_name="danger" OnClick="@(() => ToogleModal(false))">@lang["Cancel"]</Button>
                    }
                </div>
            </div>
        </div>
    }
</Modal>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int id { get; set; }
    [Parameter] public PurchaseOrderModel po { get; set; }

    [Parameter] public bool is_opened { get; set; }
    [Parameter] public EventCallback<bool> is_openedChanged { get; set; }
    [Parameter] public int payment_id { get; set; }

    [Parameter] public EventCallback<bool> OnSave { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }
    bool is_saving,is_loading;




    PurchaseOrderPaymentModel model = new PurchaseOrderPaymentModel();

    PurchaseOrderPaymentModel old_model = new PurchaseOrderPaymentModel();

    List<BusinessBranchCurrencyModel> currencies = new List<BusinessBranchCurrencyModel>();



    public decimal po_balance
    {
        get
        {
            if (po != null)
            {
                if (model.id == 0)
                {
                    return po.balance;
                }
                else
                {
                    decimal exchange_rate = Convert.ToDecimal(old_model.exchange_rate);
                    return po.balance + old_model.payment_amount / (exchange_rate ==0?1:exchange_rate);
                }
            }
            return 0;
        }
    }


    public bool is_main_currency
    {
        get
        {
            if (!is_loading)
            {
                if (currencies.Any())
                {
                    var data = currencies.Where(r => r.currency_id == model.currency_id && r.business_branch_id == po.business_branch_id).ToList();
                    if (data.Any())
                    {
                        if (data.FirstOrDefault().exchange_rate == 1)
                        {
                            return true;
                        }
                    }
                }

            }
            return false;
        }
    }


    public decimal total_base_payment_amount
    {
        get
        {
            return model.payment_amount / Convert.ToDecimal(model.exchange_rate);
        }
    }



    public bool can_enter_payment
    {
        get
        {

            if (po == null) return false;

            if (po_balance == 0) return false;


            if (payment_id != 0)
            {
                if (model == null)
                {
                    return false;
                }
                if (model.id == 0) return false;
            }

            return true;
        }
    }


    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        await LoadExchangeRate();

        if (id > 0)
        {
            await LoadPayment();
        }
        else
        {
            model.purchase_order_id = po.id;
            model.payment_type_id = gv.default_payment_type_id;
            model.payment_type = gv.payment_types.Where(r => r.id == model.payment_type_id).FirstOrDefault();



            model.currency_id = model.payment_type.currency_id;

            var currency = currencies.Where(r => r.business_branch_id == po.business_branch_id && r.currency_id == model.currency_id);
            if (currency.Any())
            {
                var c = currency.FirstOrDefault();
                model.currency_name_en = c.currency.currency_name_en;
                model.currency_name_kh = c.currency.currency_name_kh;
                model.currency_format = c.currency.currency_format;
                model.exchange_rate = c.exchange_rate;


            }


            model.payment_amount = po.balance;


        }


        is_loading = false;
    }



    async Task LoadPayment()
    {
        var resp = await http.ApiGet($"PurchaseOrderPayment({id})");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PurchaseOrderPaymentModel>(resp.Content.ToString());
            old_model = JsonSerializer.Deserialize<PurchaseOrderPaymentModel>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Error Loading Payment.", MatToastType.Warning);

        }
    }

    void PaymentTypeChanged(int payment_type_id)
    {
        model.payment_type_id = payment_type_id;
        var pt = gv.payment_types.Where(r => r.id == payment_type_id).FirstOrDefault();
        int currency_id = pt.currency_id;
        var data = currencies.Where(r => r.business_branch_id == po.business_branch_id && r.currency_id == currency_id);
        if (data.Any())
        {
            var c = data.FirstOrDefault();
            model.exchange_rate = c.exchange_rate;
            model.currency_id = c.currency_id;
            model.currency_format = c.currency.currency_format;

            model.currency_name_en = c.currency.currency_name_en;
            model.currency_name_kh = c.currency.currency_name_kh;

        }
    }


    async Task Save_Click()
    {
        is_saving = true;

        if (model.payment_amount <= 0)
        {
            toast.Add(lang["Please enter payment amount."], MatToastType.Warning);
            is_saving = false;
            return;
        }

        if (total_base_payment_amount > po_balance)
        {
            toast.Add(lang["Payment amount cannot greater than balance."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        if (model.payment_type_id <= 0)
        {
            toast.Add(lang["Payment amount cannot greater than po balance."], MatToastType.Warning);
            is_saving = false;
            return;
        }

        PurchaseOrderPaymentModel save_model = JsonSerializer.Deserialize<PurchaseOrderPaymentModel>(JsonSerializer.Serialize(model));
        save_model.payment_type = null;


        var resp = await http.ApiPost("PurchaseOrderPayment/save", save_model);
        if (resp.IsSuccess)
        {
            await OnSave.InvokeAsync(true);
            model = new PurchaseOrderPaymentModel();
            toast.Add(lang["Save data successfully"], MatToastType.Success);
        }
        else
        {
            await OnSave.InvokeAsync(false);
            toast.Add(lang["Save data fail."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        ToogleModal(false);
        is_saving = false;
    }

    void ToogleModal(bool _open = false) {
        model = new PurchaseOrderPaymentModel();
        is_opened = _open;
        is_openedChanged.InvokeAsync(_open);
    }

    async Task LoadExchangeRate()
    {
        var resp = await http.ApiGetOData($"BusinessBranchCurrency?$expand=currency($select=currency_name_en,currency_name_kh,currency_format)");
        if (resp.IsSuccess)
        {
            currencies = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Load data fail. Please try again.", MatToastType.Warning);

        }

    }
}
