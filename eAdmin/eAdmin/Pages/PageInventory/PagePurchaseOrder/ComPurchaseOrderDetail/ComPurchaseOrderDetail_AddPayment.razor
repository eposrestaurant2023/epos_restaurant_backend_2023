@inject IHttpService http
@inject IMatToaster toast
@inject IStringLocalizer<Resource> lang
<Modal IsSimpleMode="false" Title="PO Payment" OnClosed="@(() => ToogleModal(false))" @bind-IsOpened="@is_opened"  ModalWidth="800px">
    <ModalBody>
        @if (is_loading)
        {
            <Spinner />
        }
        else
        {
            <UIContainerBox Title="@lang["PO Balance Amount"]">
                <NumberInput text="@po_balance" label="@lang["Balance"]" is_read_only="true" />
            </UIContainerBox>
            @if (can_enter_payment)
            {
                <UIContainerBox>
                    <TextInput label="Reference #" @bind-text="@model.reference_number" is_horizontal="true"/>
                    <DateInput @bind-Value="@model.payment_date" label="@lang["Payment Date"]" /> 
                    <SelectPaymentType selected_valueChanged="@PaymentTypeChanged" show_empty="true" payment_type="@model.payment_type"/>
                    <NumberInput @bind-text="@model.payment_amount" label="@lang["Payment Amount"]"/>
                    @if (model.exchange_rate > 0)
                    {
                        @total_base_payment_amount
                    }
                    
                </UIContainerBox>

                <UIContainerBox Icon="notes" Title="@lang["Notes"]">
                    <TextInput @bind-text="@model.payment_note" type="textarea" placeholder="@($"{lang["Enter note"]}...")" />
                </UIContainerBox>

            }
            else
            {
                <UIContainerBox>
                    @lang["Cannot add payment for this PO invoice."]
                </UIContainerBox>
            }
        }

    </ModalBody>
    @if (can_enter_payment)
    {
        <div class="model-footer">
            <div uk-margin class="uk-flex">
                <div class="uk-margin-auto-left">
                    @if (is_loading)
                    {
                        <Button icon="save" OnClick="@Save_Click">@lang["Saving"] <Spinner /></Button>
                    }
                    else
                    {
                        <Button icon="save" OnClick="@Save_Click">@lang["Save"]</Button>
                        <Button icon="reply" class_name="danger" OnClick="@(() => ToogleModal(false))">@lang["Cancel"]</Button>
                    }
                </div>
            </div>
        </div>
    }
</Modal>

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int id { get; set; }
    [Parameter] public int po_id { get; set; }
    [Parameter] public bool is_opened { get; set; }
    [Parameter] public EventCallback<bool> is_openedChanged { get; set; }
    [Parameter] public int payment_id { get; set; }

    [Parameter] public EventCallback<bool> OnSave { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnCancel { get; set; }
    List<BusinessBranchCurrencyModel> currencies = new List<BusinessBranchCurrencyModel>();
    PurchaseOrderPaymentModel model = new PurchaseOrderPaymentModel();
    public PurchaseOrderModel po { get; set; }
    bool is_saving, is_loading;
    decimal po_balance = 0;
    public decimal total_base_payment_amount
    {
        get
        {
            return model.payment_amount / Convert.ToDecimal(model.exchange_rate);
        }
    }

    public bool can_enter_payment
    {
        get
        {

            if (po == null) return false;

            if (po_balance == 0) return false;


            if (payment_id != 0)
            {
                if (model == null)
                {
                    return false;
                }
                if (model.id == 0) return false;
            }

            return true;
        }
    }


    protected override async Task OnInitializedAsync()
    {

        is_loading = true;

        await LoadExchangeRate();
        await LoadData();
        if (id > 0)
        {
            await LoadPayment();
        }
        else
        {
            model.purchase_order_id = po_id;
        }

        //load default payment

        if (po != null) {
            if (id == 0)
            {
                po_balance = po.balance;
                model.payment_amount = po.balance;
                model.payment_type_id = gv.default_payment_type_id;
            }
            else
            {
                po_balance = po.balance + model.payment_amount;
            }
        }
        is_loading = false;
    }

    async Task LoadData()
    {
        var resp = await http.ApiGet($"PurchaseOrder({po_id})");
        if (resp.IsSuccess)
        {
            po = JsonSerializer.Deserialize<PurchaseOrderModel>(resp.Content.ToString());
        }
        else
        {
            toast.Add(lang["Can not get PO ID."], MatToastType.Warning);
        }
    }
    async Task LoadPayment()
    {
        var resp = await http.ApiGet($"PurchaseOrderPayment({id})");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PurchaseOrderPaymentModel>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Error Loading Payment.", MatToastType.Warning);

        }
    }



    void PaymentTypeChanged(int payment_type_id)
    {
        model.payment_type_id = payment_type_id;
        int currency_id = gv.payment_types.Where(r => r.id == payment_type_id).FirstOrDefault().currency_id;
        var data = currencies.Where(r => r.business_branch_id == po.business_branch_id && r.currency_id == currency_id);
        if (data.Any())
        {
            var c = data.FirstOrDefault();
            model.exchange_rate = c.exchange_rate;
            model.currency_id = c.currency_id;
            model.currency_format = c.currency.currency_format;
            model.change_exchange_rate = c.change_exchange_rate;
            model.currency_name_en = c.currency.currency_name_en;
            model.currency_name_kh = c.currency.currency_name_kh;
        }
    }

    async Task Save_Click()
    {
        is_saving = true;
        if (model.payment_amount <= 0)
        {
            toast.Add(lang["Please enter payment amount."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        if (model.payment_type_id <= 0)
        {
            toast.Add(lang["Please select a payment type."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        if (total_base_payment_amount > po_balance)
        {
            toast.Add(lang["Payment amount cannot greater than po balance."], MatToastType.Warning);
            is_saving = false;
            return;
        }

        PurchaseOrderPaymentModel save_model = JsonSerializer.Deserialize<PurchaseOrderPaymentModel>(JsonSerializer.Serialize(model));
        save_model.payment_type = null;



        var resp = await http.ApiPost("PurchaseOrderPayment/save", save_model);
        if (resp.IsSuccess)
        {
            await OnSave.InvokeAsync(true);
            model = new PurchaseOrderPaymentModel();
            toast.Add(lang["Add payment successfully"], MatToastType.Success);
        }
        else
        {
            toast.Add(lang["Cannot add payment."], MatToastType.Warning);
            is_saving = false;
            return;
        }
        ToogleModal(false);
        is_saving = false;
    }

    void ToogleModal(bool _open = false) {
        model = new PurchaseOrderPaymentModel();
        is_opened = _open;
        is_openedChanged.InvokeAsync(_open);
    }

    async Task LoadExchangeRate()
    {
        var resp = await http.ApiGetOData($"BusinessBranchCurrency?$expand=currency($select=currency_name_en,currency_name_kh,currency_format)");
        if (resp.IsSuccess)
        {
            currencies = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(resp.Content.ToString());

        }
        else
        {
            toast.Add("Error Loading Exchange Rate Fail.", MatToastType.Warning);

        }

    }
}
