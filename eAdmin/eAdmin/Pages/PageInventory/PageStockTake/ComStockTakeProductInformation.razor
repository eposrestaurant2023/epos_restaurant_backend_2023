@inject IJSRuntime js
@inject IHttpService http
@inject IMatToaster toast
@inject IStringLocalizer<Resource> lang
<div class="wrp-selected-items">

    @if (model != null)
    {
        <Table ShowTotalCount="false"
               Items="@model.active_stock_take_products"
               ShowPager="false"
               ShowPagination="false"
               ShowPaging="false"
               CustomClass="set-verticle-top_custo"
               EmptyText=@lang["There's no record in the system"]>
            <TableHeader>
                <ThCenter>@lang["Image"]</ThCenter>
                <ThCenter>@lang["Code"]</ThCenter>
                <ThAuto> @lang["Detail"]</ThAuto>
                <ThCenter>@lang["Quantity On Hand"]</ThCenter>
                <ThCenter>@lang["Quantity"]</ThCenter>
                <ThCenter>@lang["Unit"]</ThCenter>
                <ThRight>@lang["Price"]</ThRight>
                <ThRight>@lang["Amount"]</ThRight>
                <th></th>
</TableHeader>
            <RowTemplate Context="p">
                <ComStockTakeProductRow model="@model" stock_take_product="@p" stock_take_productChanged="ProductChanged" OnRemove="@(()=>RemoveProduct(p))" OnClone="@(()=>CloneProduct(p))" />
            </RowTemplate>
        </Table>
    }

</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public StockTakeModel model { get; set; }
    [Parameter] public EventCallback<StockTakeModel> modelChanged { get; set; }
    public bool is_remove { get; set; }
    async Task ProductChanged(StockTakeProductModel sp)
    {
        await modelChanged.InvokeAsync(model);
    }


    async Task RemoveProduct(StockTakeProductModel sp)
    {
        if (sp.id == 0)
        {
            model.stock_take_products.Remove(sp);
        }
        else
        {
            if (await js.Confirm("Delete Item", "Are you sure to delete this record?"))
            {
                sp.is_deleted = true;
            }
        }

        await modelChanged.InvokeAsync(model);
    }
    async Task CloneProduct(StockTakeProductModel sp)
    {
        var json = JsonSerializer.Serialize(sp);
        var data = JsonSerializer.Deserialize<StockTakeProductModel>(json);
        data.id = 0;
        model.stock_take_products.Add(data);
        await modelChanged.InvokeAsync(model);

    }
}