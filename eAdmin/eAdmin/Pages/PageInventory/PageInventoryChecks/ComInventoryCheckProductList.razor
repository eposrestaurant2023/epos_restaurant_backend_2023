@inherits PageCore
<table class="uk-table view_table set-verticle-middle">
    <thead>
        <tr>
            <th>@lang["Product Name"]</th>
            <ThCenter>@lang["Last Date"]</ThCenter>

            <ThCenter>@lang["Initial QTY"]</ThCenter>
            <ThCenter>@lang["QTY In"]</ThCenter>
            <ThCenter>@lang["QTY Out"]</ThCenter>
            <ThCenter>@lang["QTY Expected"]</ThCenter>
            <ThCenter>@lang["QTY Actual"]</ThCenter>
            <ThCenter>@lang["Defferential"]</ThCenter>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in check_products.Select(r => r.product_category_name).Distinct())
        {
            <tr>
                <TdCenter ColSpan="8">
                    <MudText Typo="@Typo.h6">
                        @p
                    </MudText>

                </TdCenter>

            </tr>
            
            @foreach (var i in check_products.Where(r => r.product_category_name == p))
            {
                <tr>
                    <td>@i.product.product_name_en</td>
                    <TdCenter>
                        @if (i.last_inventory_date != null)
                        {
                            @Convert.ToDateTime(i.last_inventory_date).ToString(gv.date_format)
                        }
                        else
                        {
                            @("-")
                        }

                    </TdCenter>

                    <TdCenter>@i.initial_quantity.ToString(gv.quantity_format)</TdCenter>
                    <TdCenter>@i.receive_quantity.ToString(gv.quantity_format)</TdCenter>
                    <TdCenter>@i.consume_quantity.ToString(gv.quantity_format)</TdCenter>
                    <TdCenter>@i.expected_quantity.ToString(gv.quantity_format)</TdCenter>
                    <td>
                        <NumberInput text="@i.actual_quantity" textChanged="@(async (_)  => {

                                                                                              await OnQuantityChange(_,i);
                                                                                          })" />
                    </td>

                    <TdCenter>@i.diference_quantity.ToString(gv.quantity_format)</TdCenter>
                </tr>
            }

        }
    </tbody>
</table>

@code{
    [Parameter] public List<InventoryCheckProductModel> check_products { get; set; }


    async Task OnQuantityChange(decimal qty,InventoryCheckProductModel p)
    {
        var save_model = JsonSerializer.Deserialize<InventoryCheckProductModel>(JsonSerializer.Serialize(p));
        save_model.product = null;
        save_model.actual_quantity = qty;
        var res = await http.ApiPost("InventoryCheckProduct/save",save_model);
        if (res.IsSuccess)
        {
            toast.Add(lang["Save Success."],Severity.Success);
        }
    }
}