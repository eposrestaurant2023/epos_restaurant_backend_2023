@inherits PageCore

<div class="uk-overflow-auto table-scroll">
    <table class="uk-table uk-table-small uk-table-divider view_table set-verticle-middle">
        <thead>
            <tr>
                <ThAuto>@lang["Product Name"]</ThAuto>
                <ThCenter>@lang["Last Date"]</ThCenter>
                <ThCenter>@lang["Initial QTY"]</ThCenter>
                <ThCenter>@lang["QTY In"]</ThCenter>
                <ThCenter>@lang["QTY Out"]</ThCenter>
                <ThCenter>@lang["Expected QTY"]</ThCenter>
                <ThRight>@lang["Expected Amount"]</ThRight>
                <ThCenter>@lang["Actual QTY "]</ThCenter>
                <ThRight>@lang["Actual Amount"]</ThRight>
                <ThCenter>@lang["Diff. Qty"]</ThCenter>
                <ThRight>@lang["Diff. Amount"]</ThRight>
                <ThAuto>@lang["Note"]</ThAuto>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in check_products.Select(r => r.product_category_name).Distinct())
            {
                <tr>
                    <TdCenter ColSpan="12">
                        <MudText Typo="@Typo.h6">
                            @p
                        </MudText>
                    </TdCenter>

                </tr>

                @foreach (var i in check_products.Where(r => r.product_category_name == p))
                {
                    <tr>
                        <td>
                            <a href="@($"product/{i.product_id}")">
                                @i.product.product_name_en
                            </a>
                        </td>
                        <TdCenter>
                            @if (i.last_inventory_date != null)
                            {
                                @Convert.ToDateTime(i.last_inventory_date).ToString(gv.date_time_format)
                            }
                            else
                            {
                                @("-")
                            }

                        </TdCenter>

                        <TdCenter>@i.initial_quantity.ToString(gv.quantity_format)</TdCenter>
                        <TdCenter>@i.receive_quantity.ToString(gv.quantity_format)</TdCenter>
                        <TdCenter>@i.consume_quantity.ToString(gv.quantity_format)</TdCenter>
                        <TdCenter>@i.expected_quantity.ToString(gv.quantity_format)</TdCenter>
                        <TdRight>@i.expected_amount.ToString(gv.currency_format)</TdRight>
                        <td>
                            @i.actual_quantity
                            @if (!is_change_text_box)
                            {
                                <NumberInputNullable text="@i.actual_quantity"
                                                     textChanged="@(async (_)  => {
                                                    await OnQuantityChange(_,i);

                                                })"
                                                     is_read_only="@is_ready_only" />
                            }

                        </td>

                        <TdRight>@i.actual_amount.ToString(gv.currency_format)</TdRight>
                        <TdCenter>@i.diference_quantity.ToString(gv.quantity_format)</TdCenter>
                        <TdRight>@i.diference_amount.ToString(gv.currency_format)</TdRight>
                        <TdCenter>
                            <TextInput width="150px" text="@i.note"
                                       textChanged="@(async (_)  => {
                                                await OnNoteChange(_,i);
                                                })"
                                       placeholder="@lang["Note"]" />
                        </TdCenter>
                    </tr>
                }

            }
        </tbody>
        <tfoot>
            <tr>
                <TdRight ColSpan="8">
                    @lang["Total Amount"]
                </TdRight>
                <TdRight>
                    @check_products.Sum(r => r.actual_amount).ToString(gv.currency_format)
                </TdRight>
                <TdRight ColSpan="5">
                </TdRight>
            </tr>
        </tfoot>
    </table>

</div>

    @code{
        [Parameter] public List<InventoryCheckProductModel> check_products { get; set; }
        [Parameter] public EventCallback<List<InventoryCheckProductModel>> check_productsChanged { get; set; }
        [Parameter] public bool is_ready_only { get; set; }
        [Parameter] public bool is_change_text_box { get; set; }


        async Task OnQuantityChange(decimal? qty, InventoryCheckProductModel p)
        {
            p.actual_quantity = qty;
            var save_model = JsonSerializer.Deserialize<InventoryCheckProductModel>(JsonSerializer.Serialize(p));
            save_model.product = null;

            var res = await http.ApiPost("InventoryCheckProduct/save", save_model);
            if (res.IsSuccess)
            {
                toast.Add(lang["Save Success."], Severity.Success);
                if (qty!=null)
                {
                    await check_productsChanged.InvokeAsync(check_products);
                }
                else
                {
                    await check_productsChanged.InvokeAsync(new List<InventoryCheckProductModel>());
                }

            }
        }
        async Task OnNoteChange(string note, InventoryCheckProductModel p)
        {
            p.note = note;
            var save_model = JsonSerializer.Deserialize<InventoryCheckProductModel>(JsonSerializer.Serialize(p));
            save_model.product = null;

            var res = await http.ApiPost("InventoryCheckProduct/save", save_model);
            if (res.IsSuccess)
            {
                toast.Add(lang["Save Success."], Severity.Success);
                await check_productsChanged.InvokeAsync(check_products);
            }
        }

    }