@page "/vendor/new"
@page "/vendor/edit/{id:int}"
@page "/vendor/clone/{clone_id:int}"
@inherits PageCore

<Loading is_loading="@is_loading" />

@if (!is_loading)
{
    <Title Value="@lang["Add New Vendor"]"></Title>
    <PageContainer>
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @if (id > 0)
                        {
                            <div>@lang["Edit Vendor"]</div>
                        }
                        else
                        {
                            <div>@lang["Add New Vendor"]</div>
                        }
                    </HeaderTemplate>

                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">

            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@Save_Click">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="@lang["Photo"]" ClassName="uk-text-center">
                        <UIFlexCenter>
                            <FileUpload @bind-ImageUrl="@model.photo" />
                        </UIFlexCenter>
                    </UIContainerBox>
                    <UIContainerBox>
                        <TextInput label="@lang["Code"]" text="@model.vendor_code" is_read_only="true">
                            <ValidationMessage For="@(()=>model.vendor_code)" />
                        </TextInput>
                        <SelectInt Items="@vendor_group" @bind-SelectedValue="@model.vendor_group_id" ShowEmptyText="true" EmptyText="@lang["Select Vendor Group"]" InputLabel="@lang["Vendor Group"]">
                            <SelectOptions Context="b">
                                <option value="@b.id">@b.vendor_group_name_en</option>
                            </SelectOptions>
                            <ValidationTemplate>
                                <ValidationMessage For="@(() => model.vendor_group_id )" />
                            </ValidationTemplate>
                        </SelectInt>

                        <TextInput label="@lang["Name"]" @bind-text="@model.vendor_name">
                            <ValidationMessage For="@(() => model.vendor_name)" />
                        </TextInput>
                        <TextInput label="@lang["Company Name"]" @bind-text="@model.company_name" />

                        <TextInput label="@lang["Mobile Phone"]" @bind-text="@model.mobile_phone" />
                        <TextInput label="@lang["Office Phone"]" @bind-text="@model.office_phone" />
                        <SelectProvince @bind-selected_value="@model.province_id" show_empty="true">
                            <ValidationMessage For="@(()=>model.province_id)" />
                        </SelectProvince>
                        <SelectStatus @bind-selected_value="@model.status" label="Status" />

                    </UIContainerBox>
                    <UIContainerBox Title="@lang["Address & Note"]">
                        <MudTabs PanelClass="pa-6">
                            <MudTabPanel Text="@lang["Address"]">
                                <textarea class="uk-textarea  uk-text-left" placeholder="@lang["Address"]" @bind="model.address" rows="2">@model.address</textarea>
                            </MudTabPanel>
                            <MudTabPanel Text="@lang["Note"]">
                                <textarea class="uk-textarea  uk-text-left" placeholder="@lang["Note"]" @bind="model.note" rows="2">@model.note</textarea>
                            </MudTabPanel>
                        </MudTabs>

                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" is_show_cancel_back="true" OnCancel="@OnCancel" is_show_save_new="true" OnSaveNew="@(()=>is_save_and_new = true)" />
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}
@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    [Parameter] public bool is_save_and_new { get; set; }
    VendorModel model = new VendorModel();
    List<VendorGroupModel> vendor_group = new List<VendorGroupModel>();
    string controller_api = "Vendor";
    public string ControllerApi
    {
        get
        {
            string query = controller_api;
            query = query + $"({id})?";
            query = query + "$expand=province($select=id,province_name),";
            query = query + "$expand=vendor_group($select=id,vendor_group_name_en,vendor_group_name_kh)";

            return query;

        }
    }



    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        @if(clone_id > 0)
        {
            await CloneVendor();
            await LoadVendorGroup();
        }
        else
        {
            await LoadData("");
            await LoadVendorGroup();
        }


        is_loading = false;
    }

    async Task LoadData(string api_url = "")
    {

        is_loading_data = true;
        if (id > 0)
        {
            string url = $"Vendor({id})?";
            url += $"$expand=province($select=id,province_name),";
            url += $"vendor_group($select=id,vendor_group_name_en,vendor_group_name_kh)";
            var resp = await http.ApiGet(url);
            if (resp.IsSuccess)
            {
                model = JsonSerializer.Deserialize<VendorModel>(resp.Content.ToString());
            }
        }
        is_loading_data = false;

    }
    async Task LoadVendorGroup(string api_url = "")
    {

        is_loading_data = true;

        if (string.IsNullOrEmpty(api_url))
        {

            api_url = "VendorGroup";
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {

            vendor_group = JsonSerializer.Deserialize<List<VendorGroupModel>>(resp.Content.ToString());

        }
        is_loading_data = false;

    }


    public async Task CloneVendor()
    {
        is_loading = true;


        var resp = await http.ApiPost($"Vendor/Clone/{clone_id}");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<VendorModel>(resp.Content.ToString());
        }


        is_loading = false;

    }


    public void Clone_Click(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"vendor/clone/{id}");
        is_loading_data = false;
    }

    async Task Save_Click(EditContext editContext)
    {

        model.vendor_group = null;
        VendorModel d = model;
        if (!is_saving)
        {
            is_saving = true;

            Object obj = new Object();
            VendorModel save_outlet = JsonSerializer.Deserialize<VendorModel>(JsonSerializer.Serialize(d));
            save_outlet.province = null;

            var res = await http.ApiPost($"{controller_api}/save", save_outlet);
            if (res.IsSuccess)
            {
                var v = JsonSerializer.Deserialize<VendorModel>(res.Content.ToString());
                
                toast.Add(lang["Saving successfully"], MudBlazor.Severity.Success);
                if (is_save_and_new)
                {
                    model = new VendorModel();
                    id = 0;
                    title = lang["Add New Vendor"];
                }
                else
                {
                    nav.NavigateTo($"vendor/{v.id}");
                }

            }
            else
            {
                toast.Add(res.Content.ToString(), MudBlazor.Severity.Warning);
            }
            is_saving = false;
        }

    }
    void OnCancel()
    {
        if (id > 0)
        {
            nav.NavigateTo($"vendor/{id}");
        }
        else
        {
            nav.NavigateTo("vendor");
        }
    }
}
