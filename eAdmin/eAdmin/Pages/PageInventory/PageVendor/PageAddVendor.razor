@page "/vendor/new"
@page "/vendor/edit/{id:int}"
@inherits PageCore

<Loading is_loading="@is_loading" />

@if (!is_loading)
{
    <Title Value="add new vendor"></Title>
    <PageContainer>
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @if (id > 0)
                        {
                            <div>Edit Vendor</div>
                        }
                        else
                        {
                            <div>Add New Vendor</div>
                        }
                    </HeaderTemplate>
                  
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">

            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@Save_Click">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="Vendor Photo" ClassName="uk-text-center">
                        <UIFlexCenter>
                            <FileUpload @bind-ImageUrl="@model.photo" />
                        </UIFlexCenter>
                    </UIContainerBox>
                    <UIContainerBox>

                        <TextInput label="Code" text="@model.vendor_code" is_read_only="true">
                            <ValidationMessage For="@(()=>model.vendor_code)" />
                        </TextInput>
                        <SelectInt Items="@vendor_group" @bind-SelectedValue="@model.vendor_group_id" ShowEmptyText="true" EmptyText="Select Vendor Group" InputLabel="Vendor Group">
                            <SelectOptions Context="b">
                                <option value="@b.id">@b.vendor_group_name_en</option>
                            </SelectOptions>
                            <ValidationTemplate>
                                <ValidationMessage For="@(() => model.vendor_group_id )" />
                            </ValidationTemplate>
                        </SelectInt>

                        <TextInput label="Vendor Name" @bind-text="@model.vendor_name">
                            <ValidationMessage For="@(() => model.vendor_name)" />
                        </TextInput>
                        <TextInput label="Company Name" @bind-text="@model.company_name" />

                        <TextInput label="Mobile Phone" @bind-text="@model.mobile_phone" />
                        <TextInput label="Office Phone" @bind-text="@model.office_phone" />
                        <SelectProvince @bind-selected_value="@model.province_id" show_empty="true">
                            <ValidationMessage For="@(()=>model.province_id)" />
                        </SelectProvince>
                        <SelectStatus @bind-selected_value="@model.status" label="Status" />

                    </UIContainerBox>
                    <UIContainerBox Title="ADDRESS & NOTE">
                     
                            <Tab>
                                <TabHeader>
                                    <TabHeaderItem>Address</TabHeaderItem>
                                    <TabHeaderItem>Note</TabHeaderItem>
                                </TabHeader>
                                <TabBody>
                                    <TabItem>
                                        <textarea class="uk-textarea  uk-text-left" placeholder="Address" @bind="model.address" rows="2">@model.address</textarea>
                                    </TabItem>
                                    <TabItem>
                                        <textarea class="uk-textarea  uk-text-left" placeholder="Note" @bind="model.note" rows="2">@model.note</textarea>
                                    </TabItem>
                                </TabBody>
                            </Tab>
                   
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComButtonLoading is_loading="@is_saving">
                    <Button type="submit" icon="save" class_name="uk-button uk-button-primary button-large">Save</Button>
                    <Button class_name="uk-button uk-button-danger button-large" icon="reply">Cancel</Button>
                    </ComButtonLoading>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}
@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    VendorModel model = new VendorModel();
    List<VendorGroupModel> vendor_group = new List<VendorGroupModel>();
    string controller_api = "Vendor"; 
    public string ControllerApi
    {
        get
        {
            string query = controller_api;
            query = query + $"({id})?";
            query = query + "$expand=province($select=id,province_name),";
            query = query + "$expand=vendor_group($select=id,vendor_group_name_en,vendor_group_name_kh)";

            return query;

        }
    }



    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData("");
        await LoadVendorGroup();
        is_loading = false;
    }

    async Task LoadData(string api_url = "")
    {

        is_loading_data = true;
        if (id > 0)
        {
            string url = $"Vendor({id})?";
            url += $"$expand=province($select=id,province_name),";
            url += $"vendor_group($select=id,vendor_group_name_en,vendor_group_name_kh)";
            var resp = await http.ApiGet(url);
            if (resp.IsSuccess)
            {
                model = JsonSerializer.Deserialize<VendorModel>(resp.Content.ToString());
            }
        }
        is_loading_data = false;

    }
    async Task LoadVendorGroup(string api_url = "")
    {

        is_loading_data = true;

        if (string.IsNullOrEmpty(api_url))
        {

            api_url = "VendorGroup";
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {

            vendor_group = JsonSerializer.Deserialize<List<VendorGroupModel>>(resp.Content.ToString());

        }
        is_loading_data = false;

    }

    async Task Save_Click(EditContext editContext)
    {
       
        model.vendor_group = null;
        VendorModel d = model;
        if (!is_saving)
        {
            is_saving = true;

            Object obj = new Object();
            VendorModel save_outlet = JsonSerializer.Deserialize<VendorModel>(JsonSerializer.Serialize(d));

            var res = await http.ApiPost($"{controller_api}/save", save_outlet);
            if (res.IsSuccess)
            {
                var v = JsonSerializer.Deserialize<VendorModel>(res.Content.ToString());

                toast.Add("Saving successfully", MatToastType.Success);

                nav.NavigateTo($"vendor/{v.id}");
            }
            else
            {
                is_saving = false;
                toast.Add(res.Content.ToString(), MatToastType.Warning);
            }
        }

    }



}
