@inject IHttpService http
@inject IJSRuntime js
@inject IMatToaster toast
@inject NavigationManager nav
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@is_loading" />
<ButtonGroup>
    <Button title="Print" icon="print" is_visible="@(model.is_deleted == false && model.status == true)" OnClick="Print_Click" />
    <Button roles="@gv.GetRole("stock_transfer_edit")" OnClick="@(()=>nav.NavigateTo($"stocktransfer/edit/{model.id}"))" icon="edit" title=@lang["Edit"] is_visible="@(!model.is_deleted && !model.is_fulfilled)" />
</ButtonGroup>

<ComAttachFileButton RoleAdd="@gv.GetRole("stock_transfer_add")"
                     RoleEdit="@gv.GetRole("stock_transfer_edit")"
                     RoleDelete="@gv.GetRole("stock_transfer_delete")"
                     ApiFilter="@($"stock_transfer_id eq {model.id} ")"
                     File="@file"
                     IsVisible="@(!model.is_deleted)" />

<AddButton roles="@gv.GetRole("stock_transfer_add")" url="stocktransfer/new">@lang["New Stock Transfer"]</AddButton>
<MoreButton is_loading="@model.is_loading">
    <MoreButtonItem roles="@gv.GetRole("stock_transfer_add")" icon="file_copy" url="@($"stocktake/clone/{model.id}")">@lang["Clone"]</MoreButtonItem>
    <MoreButtonItem roles="@gv.GetRole("stock_transfer_delete")" icon="delete" is_visible="@model.can_delete" OnClick="@DeleteInvoice_Click">@lang["Delete"]</MoreButtonItem>
    <MoreButtonItem roles="@gv.GetRole("stock_transfer_delete")" icon="clear" is_visible="@model.is_fulfilled" OnClick="@CancelMarkAsFulfilled">@lang["Cancel Mark as Fulfilled"]</MoreButtonItem>
</MoreButton>



@if (is_open_print)
{
    <ComPreviewReport @bind-IsOpened="@is_open_print" parent_id="200" Title="@lang["Stock Transfer Receipt"]" report_parameters="@($"id={model.id}")" />
}



@code {
    [Parameter] public StockTransferModel model { get; set; }
    [Parameter] public EventCallback<StockTransferModel> modelChanged { get; set; }
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    AttachFilesModel file = new AttachFilesModel();
    bool is_loading;
    protected override void OnInitialized()
    {
        file.stock_transfer_id = model.id;
    }


    bool is_open_print = false;

    void Print_Click()
    {

        is_open_print = true;
    }

    async Task DeleteInvoice_Click()
    {
        is_loading = true;
        if (await js.Confirm(lang["Delete Record"],lang[ "Are you sure you want to delete this record?"], SweetAlertMessageType.question))
        {
            var resp = await http.ApiPost($"stocktransfer/delete/{model.id}");
            if (resp.IsSuccess)
            {
                model.is_deleted = !model.is_deleted;
                await modelChanged.InvokeAsync(model);
                toast.Add(lang["Delete record successfully."], MatToastType.Success);
            }
            else
            {
                toast.Add(lang[resp.Content], MatToastType.Warning);
            }
        }

        is_loading = false;

    }


    public async Task CancelMarkAsFulfilled()
    {
        is_loading = true;

        if (await js.Confirm(lang["Cancel Make As Fulfilled"], lang["Are you sure you want to​ cancel make as fulfilled?"]))
        {

            var resp = await http.ApiPost("stocktransfer/CancelMarkAsFulfilled/" + model.id);
            if (resp.IsSuccess)
            {
                model.is_fulfilled = !model.is_fulfilled;
                await modelChanged.InvokeAsync(model);
                toast.Add(lang["Cancel Mark as fulfilled successfully"], MatToastType.Success);
            }
        }

        is_loading = false;

    }
}
