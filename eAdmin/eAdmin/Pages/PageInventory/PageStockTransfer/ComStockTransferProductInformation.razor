@inject IJSRuntime js
@inject IHttpService http
@inject ISnackbar toast
@inject IStringLocalizer<Resource> lang
<div class="wrp-selected-items">

    @if (model != null)
    {
        <Table ShowTotalCount="false"
               Items="@model.active_stock_transfer_products"
               ShowPager="false"
               ShowPagination="false"
               ShowPaging="false"
               CustomClass="set-verticle-top_custo">
            <TableHeader>
                <ThCenter>@lang["Image"]</ThCenter>
                <ThCenter>@lang["Code"]</ThCenter>
                <ThAuto>@lang["Description"]</ThAuto>
                <ThCenter>@lang["Quanlity on Hand"]</ThCenter>
                <ThCenter>@lang["Quanlity"]</ThCenter>
                <ThCenter>@lang["Unit"]</ThCenter>
                <ThRight>@lang["Price"]</ThRight>
                <ThRight>@lang["Amount"]</ThRight>
                <th></th>
            </TableHeader>
            <RowTemplate Context="p">
                <ComStockTransferProductRow model="@model" stock_transfer_product="@p" stock_transfer_productChanged="ProductChanged" OnRemove="@(()=>RemoveProduct(p))" OnClone="@(()=>CloneProduct(p))" />
            </RowTemplate>
        </Table>
    }
 
</div>

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public StockTransferModel model { get; set; }
    [Parameter] public EventCallback<StockTransferModel> modelChanged { get; set; }
    public bool is_remove { get; set; }
    async Task ProductChanged(StockTransferProductModel sp)
    {
        await modelChanged.InvokeAsync(model);
    }


    async Task RemoveProduct(StockTransferProductModel sp)
    {
        if (sp.id == 0)
        {
            model.stock_transfer_products.Remove(sp);
        }
        else
        {
            if (await js.Confirm(lang["Delete Record"], lang["Are you sure to delete this record?"]))
            {
                sp.is_deleted = true;
            }
        }
        
        await modelChanged.InvokeAsync(model);
    }
    async Task CloneProduct(StockTransferProductModel sp)
    {
        var json = JsonSerializer.Serialize(sp);
        var data = JsonSerializer.Deserialize<StockTransferProductModel>(json);
        data.id = 0;
        model.stock_transfer_products.Add(data);

        await modelChanged.InvokeAsync(model);
    }
}