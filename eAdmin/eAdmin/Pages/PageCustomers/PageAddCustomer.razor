@page "/customer/new"
@page "/customer/edit/{id}"
@page "/customer/clone/{clone_id}"
@inherits PageCore

<Loading is_loading="@is_loading" />
@if (!is_error)
{
    @if (!is_loading)
    {
        <Title Value="@title"></Title>
        <PageContainer roles="@gv.GetRole($"{((!string.IsNullOrEmpty(clone_id)) || (!string.IsNullOrEmpty(clone_id) && !string.IsNullOrEmpty(id)) ? "customer_add" : "customer_edit") }")">
            <PageHeader>
                <HeaderLeft>
                    <PageTitle ShowFilter="false">
                        <HeaderTemplate>
                            @if (!string.IsNullOrEmpty(id))
                            {
                                <span>@model.customer_code - @model.customer_name_en</span>
                                <LabelActive is_visible="@(!model.is_deleted && model.status)" />
                                <LabelDeleted is_visible="@(model.is_deleted)" />
                                <LabelInActive is_visible="@(!model.is_deleted && !model.status)" />
                            }
                            else
                            {
                                <span>@title</span>
                            }
                        </HeaderTemplate>
                    </PageTitle>
                </HeaderLeft>
                <HeaderRight ShowBackButton="true">
                </HeaderRight>
            </PageHeader>
            <EditForm Model="@model" OnValidSubmit="@(()=>Save_Click(false))" @attributes="@formAttributes">
                <DataAnnotationsValidator />
                <PageBody>
                    <UIGridCenter>
                        <ComAddCustomerForm business_branches="@business_branches" model="@model" />
                    </UIGridCenter>
                </PageBody>
                <PageFooter>
                    <FooterCenter>
                        <ComSavingFormButton is_loading="@is_saving"
                                             is_show_save_submit="true"
                                             is_show_save_new="true"
                                             OnSaveNew="@(()=>is_save_and_new = true)"
                                             is_show_cancel_action="true"
                                             OnCancel="@OnCancel" />
                    </FooterCenter>
                </PageFooter>
            </EditForm>
        </PageContainer>

        @if (is_customer_exist)
        {
            <ComExistingCustomerInformation data="@existing_customer_info" is_opened="@is_customer_exist" OnClose="@(()=>is_customer_exist=false)" OnSaveNewRecord="@SaveNewRecord" />
        }
    }
}
else
{
    <Error title="@lang["Customer"]">@error_text</Error>
}
@code{
    [Parameter] public string id { get; set; }
    [Parameter] public string clone_id { get; set; }
    [Parameter] public bool is_customer_exist { get; set; }
    CustomerModel model = new CustomerModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();

    ApiResponseModel existing_customer_info = new ApiResponseModel();
    bool is_save_and_new, is_save_and_order;

    public string api_url
    {
        get
        {
            return $"customer({id})?$expand=customer_business_branchs";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!is_loading)
        {
            is_loading = true;

            if ((id != "" && id != null) || (clone_id != "" && clone_id != null))
            {
                if (id != "" && id != null)
                {
                    var res = await http.ApiGet(api_url);
                    if (res.IsSuccess)
                    {
                        model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                        if (model.is_deleted)
                        {
                            error_text = lang["This customer was deleted so cannot edit it."];
                            is_error = true;
                            is_loading = false;

                            return;
                        }
                        else
                        {
                            is_error = false;
                        }
                        title = $"Edit : {model.customer_name_en}";
                    }
                    else
                    {
                        toast.Add(res.Content.ToString(), MatToastType.Warning);
                    }
                }
                else
                {

                    var res = await http.ApiGet($"customer({clone_id})?$expand=customer_business_branchs");
                    if (res.IsSuccess)
                    {
                        model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                        model.customer_code = "New";
                        model.id = new Guid();
                        model.created_date = DateTime.Now;
                        title = $"Clone : {model.customer_name_en}";
                    }
                    else
                    {
                        toast.Add(res.Content.ToString(), MatToastType.Warning);
                    }
                }
            }
            else
            {
                title = "Add New Customer";
            }
            await LoadBusinessBranch();
            is_loading = false;
        }
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$expand=customer_business_branchs&$filter=is_deleted eq false and status eq true");
        if (res.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
            if (!string.IsNullOrEmpty(id) || !string.IsNullOrEmpty(clone_id))
            {
                foreach (var p in model.customer_business_branchs)
                {
                    foreach (var b in business_branches.Where(r => r.id == p.business_branch_id).ToList())
                    {
                        b.is_selected = true;
                    }
                }
            }
        }
    }

    async Task Save_Click(bool allow_duplicate_name = false)
    {
        if (!is_saving)
        {
            is_saving = true;
            //save customer business branchs
            model.customer_business_branchs.Clear();
            foreach (var a in business_branches.ToList())
            {
                if (a.is_selected)
                {
                    model.customer_business_branchs.Add(new CustomerBusinessBranchModel()
                    {
                        business_branch_id = a.id,
                        customer_id = model.id
                        
                    });
                }
            }
            Console.WriteLine(JsonSerializer.Serialize(model));
            var res = await http.ApiPost($"customer/save?allow_duplicate_name={allow_duplicate_name}", model);
            if (res.IsSuccess)
            {

                if (res.Content.ToString() == "Customer Code already exist!")
                {
                    toast.Add(res.Content.ToString(), MatToastType.Warning);
                }
                else
                {
                    model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                    toast.Add("Saving Customer successfully", MatToastType.Success);
                    if (is_save_and_new)
                    {
                        model = new CustomerModel();
                        id = "";
                        title = "Add New Customer";
                    }
                    else if (is_save_and_order)
                    {
                        nav.NavigateTo($"sale/customer/{model.id}");
                    }
                    else
                    {
                        nav.NavigateTo($"customer/{model.id}");
                    }
                }
            }
            else
            {

                is_saving = false;
                //check response code status and
                if (res.status_code >= 400 && res.status_code <= 499)
                {
                    is_customer_exist = true;
                    existing_customer_info = JsonSerializer.Deserialize<ApiResponseModel>(res.Content.ToString());

                    toast.Add(existing_customer_info.message, MatToastType.Warning);

                }
                else
                {
                    toast.Add(res.Content.ToString(), MatToastType.Warning);
                }

            }
            //testing
            is_saving = false;
        }
    }

    async Task SaveNewRecord()
    {
        is_customer_exist = false;
        await Save_Click(true);

    }

    void OnCancel()
    {
        if (id != null)
        {
            nav.NavigateTo($"customer/{id}");
        }
        else
        {
            nav.NavigateTo("customer");
        }
    }
}
