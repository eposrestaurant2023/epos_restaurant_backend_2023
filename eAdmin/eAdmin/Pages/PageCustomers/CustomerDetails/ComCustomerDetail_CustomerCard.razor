@inherits PageCore
@inject IDialogService DialogService
<div>
    <UIGridCenter>
        @if (is_loading)
        {
            <MudGrid>
                <MudItem xs="12" md="6" lg="6" xl="6">
                    <div class="pa-1">
                        <MudSkeleton/>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="181px" />
                    </div>
                </MudItem>
                <MudItem xs="12" md="6" lg="6" xl="6">
                    <div class="pa-1">
                    <MudSkeleton/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="181px" />
                    </div>
                </MudItem>
            </MudGrid>
           
        }
        @if(!is_loading)
        {
           
                <MudGrid>
                    <MudItem xs="12" md="6" lg="6" xl="6">
                        <MudCard Outlined>
                            <MudCardContent Class="d-flex align-center justify-center"  Style="height:181px">
                                <div>
                                    <MudText Typo="Typo.body2">
                                        @lang["New Card"]
                                    </MudText>
                                    <MudIconButton OnClick="OnAddNewClick" Size="Size.Large" Icon="@Icons.Material.Outlined.AddCircleOutline" Color="MudBlazor.Color.Default" />
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    
                    @if(customer_card_list.Count() > 0)
                    {
                        @foreach (var item in customer_card_list)
                        {
                            <MudItem xs="12" md="6" lg="6" xl="6">
                                <MudCard>
                                    <MudCardHeader Class="mb-2 pb-2">
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">
                                                @item.card_name 
                                            </MudText>
                                               
                                            
                                            
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Disabled="@item.is_expired" Color="MudBlazor.Color.Default" OnClick="(()=>OnEditCardClick(item))"/>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="mt-2 pt-2">
                                        <MudText Typo="Typo.subtitle1" Style="text-align:center;">
                                             @item.discount_value.ToString(gv.quantity_format) %
                                        </MudText>
                                        <MudText Typo="Typo.body2" Style="text-align:center;font-size:18px">
                                            @item.card_code
                                        </MudText>
                                        <MudText Typo="Typo.subtitle1">
                                            @lang["Expiry"]
                                        </MudText>
                                        <MudPaper Class="d-flex justify-space-between" Elevation="0">
                                            
                                           
                                            <MudText Typo="Typo.body2" Class="align-self-center">
                                            @item.expiry_date.ToString(gv.date_format)
                                            </MudText>
                                            @if (item.is_expired)
                                            {
                                                <MudChip Disabled="true" Size="Size.Small" Color="MudBlazor.Color.Error">@lang["Expired"]</MudChip>
                                        }
                                        </MudPaper>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            
                               
                        }
                    }
                </MudGrid>
            
        }
        </UIGridCenter>
</div>



@code {
    [Parameter] public Guid customer_id { get; set; }
    List<CustomerCardModel> customer_card_list = new List<CustomerCardModel>();
    string dialog_title = "New Card";
    protected override async Task OnInitializedAsync()
    {

        await LoadData();

    }
    async Task LoadData()
    {
        is_loading=true;
        var res = await http.ApiGetOData($"CustomerCard?$orderby=created_date desc&$filter=customer_id eq {customer_id}");
        if (res.IsSuccess)
        {
            customer_card_list = JsonSerializer.Deserialize<List<CustomerCardModel>>(res.Content.ToString());
        }
        is_loading = false;
    }
    async Task OnAddNewClick()
    {
        
        var parameters = new DialogParameters();
        parameters.Add("model", new CustomerCardModel());
        parameters.Add("customer_id", customer_id);
        var options = new DialogOptions { DisableBackdropClick = true };
        var result = await DialogService.Show<ComCustomerDetail_AddCustomerCard>(lang[dialog_title],parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data == true)
            {
                await LoadData();
            }
        }

    }
    async Task OnEditCardClick(CustomerCardModel card)
    {
        var parameters = new DialogParameters();
        CustomerCardModel temp = new CustomerCardModel();
        var res = await http.ApiGet($"customerCard({card.id})");
        if(res.IsSuccess){
            temp = JsonSerializer.Deserialize<CustomerCardModel>(res.Content.ToString());
        }
        parameters.Add("model", temp);
        parameters.Add("customer_id", customer_id);
       
        dialog_title = lang["Edit"] +$" {temp.card_code}";
        var options = new DialogOptions { DisableBackdropClick = true };
        var result = await DialogService.Show<ComCustomerDetail_AddCustomerCard>(lang[dialog_title],parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data == true)
            {
                await LoadData();
            }
        }
    }
}
