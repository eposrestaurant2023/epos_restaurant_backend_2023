@inject IHttpService http;
@if (is_loading)
{
    <Spinner />
}
else
{
    if (model != null)
    {
        <UISummaryBox ImageUrl="@model.photo">
            <ContentLeft>
                <table>
                    <tr>
                        <th>Customer</th>
                        <td>
                            <ComAuthorize roles="@gv.GetRole("customer_view")" url="@($"customer/{model.id}")">
                                @model.customer_code_name
                            </ComAuthorize>
                        </td>
                    </tr>
                    <tr>
                        <th>Customer (Kh)</th>
                        <td>@model.customer_name_kh</td>
                    </tr>
                    <tr>
                        <th>Customer Group</th>
                        <td>@model.customer_group?.customer_group_name_en</td>
                    </tr>
                    <tr>
                        <th>Gender</th>
                        <td>@model.gender</td>
                    </tr>
                </table>
            </ContentLeft>
            <ContentRight>
                <table>

                    <tr>
                        <th>Phone Number</th>
                        <td>@model.phone_1</td>
                    </tr>

                    <tr>
                        <th>Status</th>
                        <td>
                            <LabelActive is_visible="@model.status" />
                            <LabelInActive is_visible="@(!model.status)" />
                        </td>
                    </tr>

                    <tr>
                        <th></th>
                        <td>
                            <div class="uk-text-large">000</div>
                            <div class="uk-text-small uk-text-italic">Credit Balance</div>
                        </td>
                    </tr>
                </table>
            </ContentRight>
        </UISummaryBox>
    }
}

@code {

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int id { get; set; }
    [Parameter] public string customer_name { get; set; }
    [Parameter] public EventCallback<string> customer_nameChanged { get; set; }



    CustomerModel model = new CustomerModel();
    [Parameter] public EventCallback<Guid> idChanged { get; set; }
    bool is_loading;


    protected override async Task OnInitializedAsync()
    {

        is_loading = true;
        var resp = await http.ApiGet($"Customer({id})");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<CustomerModel>(resp.Content.ToString());
            await customer_nameChanged.InvokeAsync(model.customer_name_en);
            await idChanged.InvokeAsync(model.id);
        }
        is_loading = false;
    }

}
