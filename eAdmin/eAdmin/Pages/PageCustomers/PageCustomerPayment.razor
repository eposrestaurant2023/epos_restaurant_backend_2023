@page "/payment/customer/{customer_id}"
@inherits PageCore
<Loading is_loading="@(is_loading || is_loading_data || is_saving)" />
@if (!is_loading)
{
<PageContainer>
    <PageHeader>
        <HeaderLeft>
            <PageTitle ShowFilter="false">
                <HeaderTemplate>
                    <span>@lang["Customer Payments"] # @customer.customer_code_name</span>
                </HeaderTemplate>
            </PageTitle>
        </HeaderLeft>
        <HeaderRight>
            <RefreshButton OnClick="@(async()=>await LoadData())" />
        </HeaderRight>
    </PageHeader>
    <PageBody>
        <div>
            <h3 class="title uk-display-inline-block">
                <Icon icon="done_all" />
                <span class="title">@lang["Apply All"]</span>
            </h3>
            <Grid ClassName="uk-grid-small uk-grid-divider uk-child-width-1-2">
                <div>
                    <div class="uk-form-horizontal">
                        <div class="uk-margin-small">
                            <label class="uk-form-label"><Icon icon="layers" size="16px" />@lang["Select"]</label>
                            <div class="uk-form-controls">
                                <ComInputCheckBox @bind-value="@select_all" />
                            </div>
                        </div>
                    </div>

                    <div class="uk-form-horizontal">
                        <div class="uk-margin-small">
                            <label class="uk-form-label"><Icon icon="layers" size="16px" />@lang["Referance #"]</label>
                            <div class="uk-form-controls">
                                <TextInput @bind-text="@reference_number" placeholder="@lang["Referance Number"]" />
                            </div>
                        </div>
                    </div>
                    <DateInput label="@lang["Payment Date"]" @bind-value="@payment_date" icon="layers" />
                </div>
                <div>
                    <div class="section-content">
                        <div class="uk-form-horizontal">
                            <div class="uk-margin-small">
                                <label class="uk-form-label"><Icon icon="layers" size="16px" />@lang["Payment Type"]</label>
                                <div class="uk-form-controls">
                                    <SelectPaymentType @bind-selected_value="@payment_type_id" is_inline="true" />
                                </div>
                            </div>
                        </div>
                        <div class="uk-form-horizontal">
                            <div class="uk-margin-small">
                                <label class="uk-form-label"><Icon icon="layers" size="16px" />@lang["Payment Note"]</label>
                                <div class="uk-form-controls">
                                    <TextInput @bind-text="@payment_note" type="textarea" placeholder="@($"{lang["Enter note"]}...")" row="3" is_height_auto="true" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Grid>
        </div>
        <hr />
        <section class="wrp-sale-invoice-body">
            <h3 class="title uk-display-inline-block">
                <Icon icon="receipt" />
                <span class="title">@lang["Customer Payments"]</span>
            </h3>
            <Spacing Number="10" />
            <div class="wrp-selected-items">
                @if (customer_payments != null)
                {
                    <Table ShowTotalCount="false"
                           Items="@customer_payments"
                           ShowPager="false"
                           ShowPagination="false"
                           ShowPaging="false"
                           CustomClass="set-verticle-top_custo"
                           EmptyText=@lang["There's no record in the system"]>
                        <TableHeader>
                            <ThCenter>
                                @lang["Select"]
                            </ThCenter>
                            <ThCenter>
                                <div>@lang["Document #"]</div>
                                <div class="sub-header-table">@lang["Date"]</div>
                            </ThCenter>
                            <Th>
                                <div>@lang["Business Branch"]</div>
                                <div class="sub-header-table">@lang["Outlet"]</div>
                            </Th>
                            <ThRight>@lang["Total Amount"]</ThRight>
                            <ThRight>@lang["Paid Amount"]</ThRight>
                            <ThRight>@lang["Balance"]</ThRight>
                            <Th>@lang["Reference #"]</Th>
                            <Th>@lang["Payment Date"]</Th>
                            <Th>@lang["Payment Type"]</Th>
                            <ThRight>@lang["Payment Amount"]</ThRight>
                            <ThAuto>@lang["Note"]</ThAuto>
                            <th class="uk-width-auto"></th>
                        </TableHeader>
                        <RowTemplate Context="p">
                            <TdCenter ClassName="uk-flex-center">
                                <ComInputCheckBox @bind-value="@p.is_selected" />
                            </TdCenter>
                            <TdCenter>
                                <div>
                                    <ComAuthorize roles="@gv.GetRole("receipt_list_management")" url="@($"receiptlist/{p.sale.id}")">@p.sale.document_number</ComAuthorize>
                                </div>
                                <div class="sub-info-row-table">
                                    @p.sale.working_date.ToString(gv.date_format)
                                </div>
                            </TdCenter>
                            <td>
                                <div>
                                    @p.sale.business_branch?.business_branch_name_en
                                </div>
                                <div class="sub-info-row-table">
                                    @p.sale.outlet?.outlet_name_en
                                </div>
                            </td>
                            <TdRight>
                                @p.sale.total_amount.ToString(gv.main_currency_format)
                            </TdRight>
                            <TdRight>
                                @p.sale.paid_amount.ToString(gv.main_currency_format)
                            </TdRight>
                            <TdRight>
                                @p.sale.balance.ToString(gv.main_currency_format)
                            </TdRight>
                            <td>
                                <TextInput @bind-text="@p.sale_payment.reference_number" width="120px" is_read_only="@(!p.is_selected)" />
                            </td>
                            <td>
                                <DateInput @bind-Value="@p.sale_payment.payment_date" is_inline="true" is_read_only="@(!p.is_selected)" />
                            </td>
                            <td>
                                <SelectPaymentType @bind-selected_value="@p.sale_payment.payment_type_id" payment_type="@p.sale_payment.payment_type" is_inline="true" width="w-150" is_read_only="@(!p.is_selected)" />
                            </td>
                            <td>
                                <NumberInput @bind-text="@p.sale_payment.payment_amount" is_read_only="@(!p.is_selected)"/>
                            </td>
                            <td>
                                <TextInput @bind-text="@p.sale_payment.payment_note" type="textarea" placeholder="@($"{lang["Enter note"]}...")" row="2" is_read_only="@(!p.is_selected)" is_height_auto="true" />
                            </td>
                            <TdCenter>
                                <Icon icon="visibility" OnClick="@(()=>nav.NavigateTo($"receiptlist/{p.sale.id}"))" />
                            </TdCenter>
                        </RowTemplate>
                    </Table>
                }
            </div>
        </section>

    </PageBody>
    <PageFooter>
        <FooterCenter>
            <ComSavingFormButton is_loading="@is_saving" OnSave="OnSaveClick" is_show_save_action="true" is_show_save_submit="false"/>
        </FooterCenter>
    </PageFooter>
</PageContainer>
}

@code {
    [Parameter] public string customer_id { get; set; }
    public List<CustomerPaymentModel> customer_payments = new List<CustomerPaymentModel>();
    public List<SaleModel> sales = new List<SaleModel>();
    public CustomerModel customer = new CustomerModel();
    string controller_api = "sale";

    private bool _select_all;
    public bool select_all
    {
        get
        {
            return _select_all;
        }
        set
        {
            _select_all = value;
            customer_payments.ForEach(r => r.is_selected = _select_all);
        }
    }

    private string _reference_number;

    public string reference_number
    {
        get { return _reference_number; }
        set {
            _reference_number = value;
            customer_payments.ForEach(r=>r.sale_payment.reference_number = _reference_number);
        }
    }

    private DateTime _payment_date = DateTime.Now;

    public DateTime payment_date
    {
        get { return _payment_date; }
        set {
            _payment_date = value;
            customer_payments.ForEach(r => r.sale_payment.payment_date = _payment_date);
        }
    }
    private int _payment_type_id = 0;

    public int payment_type_id
    {
        get {
            if (_payment_type_id == 0)
                return gv.default_payment_type_id;
            else
                return _payment_type_id;
        }
        set {
            _payment_type_id = value;
            customer_payments.ForEach(r => r.sale_payment.payment_type_id = _payment_type_id);
        }
    }

    private string _payment_note;

    public string payment_note
    {
        get { return _payment_note; }
        set {
            _payment_note = value;
            customer_payments.ForEach(r => r.sale_payment.payment_note = _payment_note);
        }
    }



    public string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by) || state.pager.order_by == "id")
            {
                state.pager.order_by = "closed_date";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?";
            url += $"$expand=outlet($select=id,outlet_name_en,outlet_name_kh),business_branch($select=business_branch_name_en,business_branch_name_kh)";
            url += $"&$filter=customer_id eq {customer_id} and (is_partially_paid eq true or is_paid eq false)";
            url += $"&$count=true";
            return url;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await GetCustomerInfo();
        await LoadData();
        is_loading = false;
    }

    public async Task LoadData(string api_url = "")
    {
        is_loading_data = true;
        var default_view = gv.GetDefaultModuleView("page_sale");
        if (default_view != null)
        {
            state.page_title = lang[default_view.title];
        }

        var resp = await http.ApiGetOData(ControllerApi);
        if (resp.IsSuccess)
        {
            sales = JsonSerializer.Deserialize<List<SaleModel>>(resp.Content.ToString());
            if (sales.Any())
            {
                foreach (var sale in sales)
                {
                    customer_payments.Add(new CustomerPaymentModel { sale = sale, sale_payment = new SalePaymentModel { sale_id = sale.id, payment_type_id = gv.default_payment_type_id } });
                }
            }
        }
        is_loading_data = false;
    }
    public async Task GetCustomerInfo()
    {
        var resp = await http.ApiGet($"customer({customer_id})?$select=customer_name_en,customer_name_kh,customer_code");
        if (resp.IsSuccess)
        {
            customer = JsonSerializer.Deserialize<CustomerModel>(resp.Content.ToString());

        }
    }

    public async Task OnSaveClick()
    {
        is_saving = true;
        if (!customer_payments.Any())
        {
            toast.Add("There is no payment record.", MatToastType.Warning);
            is_saving = false;
            return;
        }
        List<SalePaymentModel> data_save = new List<SalePaymentModel>();
        foreach (var p in customer_payments.Where(r=>r.is_selected == true))
        {
            if (p.sale.balance < p.sale_payment.payment_amount)
            {
                toast.Add("Payment amount cannot greater than Balance Amount", MatToastType.Warning);
                is_saving = false;
                return;
            }
            else
            {
                p.sale_payment.sale_id = p.sale.id;

                data_save.Add(p.sale_payment);
            }

        }

        var post = await http.ApiPost("SalePayment/save/multiple", data_save);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully", MatToastType.Success);
            nav.NavigateTo($"customer/{customer_id}");
        }
        else
        {
            toast.Add(post.Content.ToString(), MatToastType.Warning);
        }

        is_saving = false;
    }

    public class CustomerPaymentModel
    {
        public SaleModel sale { get; set; }
        public SalePaymentModel sale_payment { get; set; }
        public bool is_selected { get; set; }
    }
}
