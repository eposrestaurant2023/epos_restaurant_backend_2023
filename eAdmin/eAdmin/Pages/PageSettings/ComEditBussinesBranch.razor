
@inherits PageCore;
<EditFormContext Cancel_Click="@onCancelClick" model="@model" is_opened="is_open" title="@modal_title" Save_Click="SavePaymentTerm_Click" is_submitting="@is_saving" modal_width="800px">
    <UIContainerBox Title="@lang["Photo"]" ClassName="uk-text-center">
        <UIFlexCenter>
            <FileUpload @bind-ImageUrl="@model.logo" />
        </UIFlexCenter>
    </UIContainerBox>
    <TextInput label="@lang["Name"]" @bind-text="@model.business_branch_name_en">
        <ValidationMessage For="@(()=>model.business_branch_name_en)" />
    </TextInput>
    <TextInput label="@lang["Name Kh"]" @bind-text="@model.business_branch_name_kh" />
    <TextInput label="@lang["Phone"]" @bind-text="@model.phone_1" />
    <TextInput label="@lang["Phone"]" @bind-text="@model.phone_2" />
    <TextInput label="@lang["Email"]" @bind-text="@model.email" />
    <TextInput label="@lang["Contact Name"]" @bind-text="@model.contact_name" />
    <TextInput label="Note" @bind-text="@model.note" type="textarea" />
    <SelectStatus @bind-selected_value="@model.status" />
</EditFormContext>

@code{
    [Parameter] public string modal_title { get; set; }
    [Parameter] public BusinessBranchModel model { get; set; } = new BusinessBranchModel();
    [Parameter] public bool is_open { get; set; }
    [Parameter] public EventCallback<bool> is_openChanged { get; set; }
    [Parameter] public EventCallback<BusinessBranchModel> Save_Click { get; set; }

    async Task onCancelClick()
    {
        await is_openChanged.InvokeAsync(false);
    }
    async Task SavePaymentTerm_Click()
    {
        is_saving = true;
        var res = await http.ApiPost("BusinessBranch/save", model);
        if (res.IsSuccess)
        {
            model = JsonSerializer.Deserialize<BusinessBranchModel>(res.Content.ToString());
            var resp = await http.ApiGet("GlobalVariable?$expand=bussiness_branches");
            if (resp.IsSuccess)
            {
                var data = JsonSerializer.Deserialize<GlobalVariableModel>(resp.Content.ToString());

            }

            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);
            await Save_Click.InvokeAsync(model);
            await is_openChanged.InvokeAsync(false);
        }
        is_saving = false;
    }
}
