@page "/setting/unit"
@inject IHttpService http;
@inject IMatToaster toast;
@inject IStringLocalizer<Resource> lang
<Loading is_loading="@(is_loading || is_saving)" />
@if (!is_loading)
{
    <Title Value="@lang["Unit"]"></Title>
    <PageContainer>
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Unit of Measurement (UoM)"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
                <RefreshButton OnClick="@OnInitializedAsync" />
            </HeaderRight>
        </PageHeader>

        <PageBody>
            <UIGridCenter>
                @if (unit_categories.Any())
                {
                    @foreach (var b in unit_categories)
                    {
                        <ComAccordion>
                            <Header>
                                @b.category_name
                            </Header>
                            <Content>
                                <ComAddUnit units="@b.units" />
                                <hr />
                                <div class="uk-text-right">
                                    <Button OnClick="@(()=>AddUnit(b))">@lang["Add Unit"]</Button>
                                </div>
                            </Content>
                        </ComAccordion>

                    }
                }
                else
                {
            <ComAlert type="warning">@lang["There is no unit. Please enter unit first."]</ComAlert>
                }
            </UIGridCenter>
        </PageBody>
        <PageFooter>
            <FooterCenter>
                <ComSavingFormButton is_loading="@is_saving" OnSave="@Save_Click" is_show_cancel="false" is_show_save_submit="false" is_show_save_action="true"/>
            </FooterCenter>
        </PageFooter>
    </PageContainer>
}

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    List<UnitCategoryModel> unit_categories = new List<UnitCategoryModel>();
    bool is_loading, is_saving;

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {
        var resp = await http.ApiGetOData($"UnitCategory?$expand=units($filter=is_deleted eq false)");
        if (resp.IsSuccess)
        {
            unit_categories = JsonSerializer.Deserialize<List<UnitCategoryModel>>(resp.Content.ToString());
        }
        else
        {
            toast.Add(lang["Loading unit fail."], MatToastType.Warning);
        }
    }

    void AddUnit(UnitCategoryModel b)
    {
        b.units.Add(new UnitModel() { type_name = lang["Reference"], is_deleted = false, unit_name = "", unit_category_id = b.id});
    }

    async Task Save_Click()
    {
        if (unit_categories.SelectMany(r => r.units).Where(r => r.is_deleted == false && r.unit_name.Trim() == "").Any())
        {
            toast.Add(lang["Please enter unit name"], MatToastType.Warning);
            return;
        }
        is_saving = true;
        var resp = await http.ApiPost("UnitCategory/save/multiple", unit_categories);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Save Unit successfully"], MatToastType.Success);
            await LoadData();
        }
        else
        {
            toast.Add(lang["Save Unit Fail"], MatToastType.Warning);
        }
        is_saving = false;
    }
}
