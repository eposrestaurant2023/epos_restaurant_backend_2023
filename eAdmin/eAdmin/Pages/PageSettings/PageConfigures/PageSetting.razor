@page "/configure"
@inherits PageCore
@using eAdmin.Pages.PageSettings.PageConfigures

<Loading is_loading="@is_loading" />

@if (!is_loading)
{
    <Title Value="General Setting"></Title>
    <PageContainer roles="@gv.GetRole("general_setting_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @state.page_title
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="false" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Tab>
                <TabHeader>
                    <TabHeaderItem>General Setting</TabHeaderItem>
                    @foreach (var bs in business_branches.Where(r=>r.is_deleted == false))
                    {
                        <TabHeaderItem>@bs.business_branch_name_en</TabHeaderItem>
                    }
                </TabHeader>
                <TabBody>
                    <TabItem>
                        <ComAccordion>
                            <Header>Show Comfirm Password</Header>
                            <Content>
                                <ComSetting_GroupShowComfirmPassword group_name="show confirm" OnEdit="@OnEdit" settings="@settings" />
                            </Content>
                        </ComAccordion>
                        <ComAccordion>
                            <Header>Host</Header>
                            <Content>
                                <ComSetting_GroupShowComfirmPassword group_name="host" OnEdit="@OnEdit" settings="@settings" />
                            </Content>
                        </ComAccordion>
                        <ComAccordion>
                            <Header>Report</Header>
                            <Content>
                                <ComSetting_GroupShowComfirmPassword group_name="report" OnEdit="@OnEdit" settings="@settings" />
                            </Content>
                        </ComAccordion>
                    </TabItem>
                    <TabItem>
                        ESOFTIX PP
                    </TabItem>
                    <TabItem>
                        ESOFTIX SR
                    </TabItem>
                    <TabItem>BBN EN</TabItem>
                </TabBody>
            </Tab>
            
        </PageBody>
    </PageContainer>
    @if (is_open)
    {
        <ComEditSetting Save_Click="@Save_Click" business_branches="@business_branches" setting="setting" is_dialog_open="@is_open" Cancel_click="@(()=> { is_open = false;setting = new SettingModel(); })" title="@setting.setting_title" />
    }
}

@code{
    [Parameter] public string keyword { get; set; } = "";
    List<SettingModel> settings = new List<SettingModel>();
    SettingModel setting = new SettingModel();
    PagerModel pg = new PagerModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    bool is_open;
    int TotalRecord = 0;
    string StateKey = "278484567Gs47775KJHGytkjhTonB2547935";
    string controller_api = "Setting";

    public string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by))
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "All Setting";
        }
        await LoadData(state.api_url);
        await LoadDataBusinessBranch();
        is_loading = false;
    }
    async Task LoadDataBusinessBranch()
    {
        var res = await http.ApiGetOData("BusinessBranch");
        if (res.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
        }
    }
    void Save_Click()
    {
        is_open = false;
    }

    void OnEdit(SettingModel s)
    {
        title = "Edit :" + s.setting_title;
        is_open = true;
        setting = s;
    }

    async Task LoadData(string api_url = "")
    {
        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
            await SetState(StateKey, state);
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            settings = JsonSerializer.Deserialize<List<SettingModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }
        is_loading = false;
    }

    async Task OnSearch(string keyword)
    {
        state.pager = new PagerModel();
        SetFilterValue2(state.filters, "keyword", keyword);
        await LoadData();
    }
}


