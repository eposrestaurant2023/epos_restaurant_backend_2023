@inherits PageCore;
 
    <EditFormContext is_open_button_save_and_new="true" NewSave_Click="@(()=>SavePaymentType_Click(true))" Cancel_Click="Cancel_click" model="@payment_type" is_opened="is_dialog_open" title="@modal_title" Save_Click="@(()=>SavePaymentType_Click(false))" modal_width="800px">
        <FileUpload @bind-ImageUrl="@payment_type.photo" />
        <TextInput label="Payment Type Name" @bind-text="@payment_type.payment_type_name_en">
            <ValidationMessage For="@(()=>payment_type.payment_type_name_en)" />
        </TextInput>   
        <TextInput label="Payment Type Name" @bind-text="@payment_type.payment_type_name_kh">
            <ValidationMessage For="@(()=>payment_type.payment_type_name_kh)" />
        </TextInput>
        <NumberInputInt @bind-text="@payment_type.sort_order" label="Sort Order" width="100%" />
        <TextInput label="Note" @bind-text="@payment_type.note" type="textarea" />
        <SelectCurrency show_empty="true" @bind-selected_value="@payment_type.currency_id" empty_text="Select Currency">
            <ValidationMessage For="@(()=>payment_type.currency_id)"/>
        </SelectCurrency>
        <SelectStatus @bind-selected_value="@payment_type.status"/>
        @foreach (var b in business_branches)
        {
            <div><ComInputCheckBox @bind-value="b.is_selected" label="@b.business_branch_name_en" /></div>
            
        }
    </EditFormContext>

@code{
    [Parameter] public string modal_title { get; set; } = "";
    [Parameter] public bool is_dialog_open { get; set; } = false;
    [Parameter] public EventCallback<bool> is_dialog_openChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Save_Click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    [Parameter] public PaymentTypeModel payment_type { get; set; } = new PaymentTypeModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();

    bool is_save_new = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadBusinessBranch();
    }


    protected async Task SavePaymentType_Click(bool _is_save_new = false)
    {
        is_saving = true;
        payment_type.business_branch_payment_types.Clear();
        foreach (var a in business_branches.ToList())
        {
            if (a.is_selected)
            {
                payment_type.business_branch_payment_types.Add(new BusinessBranchPaymentTypeModel()
                {
                    business_branch_id = a.id,
                    payment_type_id = payment_type.id
                });
            }
        }

        var post = await http.ApiPost("PaymentType/Save", payment_type);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully!", MatToastType.Success);
            if (!_is_save_new)
            {
                payment_type = new PaymentTypeModel();
                is_dialog_open = false;
            }
            else
            {

                payment_type = new PaymentTypeModel();
                modal_title = "Add New";
                foreach (var bb in business_branches)
                {
                    bb.is_selected = false;
                }
                payment_type.business_branch_payment_types.Add(new BusinessBranchPaymentTypeModel() { });
            }
            is_save_new = false;
        }
        else
        {
            toast.Add(post.Content.ToString(), MatToastType.Warning);
        }
        await Save_Click.InvokeAsync();
        await is_dialog_openChanged.InvokeAsync(is_dialog_open);
        is_saving = false;
    }

    public async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$expand=business_branch_payment_types&$filter=is_deleted eq false and status eq true");
        if (res.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
            if (payment_type != null)
            {
                foreach(var p in payment_type.business_branch_payment_types)
                {
                    foreach(var b in business_branches.Where(r=>r.id==p.business_branch_id).ToList())
                    {
                        b.is_selected = true;
                    }
                }
            }
        }
    }
}