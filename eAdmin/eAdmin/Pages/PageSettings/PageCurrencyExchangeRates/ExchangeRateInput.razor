@inject IStringLocalizer<Resource> lang
@if (label != "")
{
    <div class="@(is_horizontal?"uk-form-horizontal":"")">
        <div class="uk-margin-small">
            <div class="@wrp_class">
                <label class="uk-form-label">
                    @lang[label]
                </label>
                <div class="uk-form-controls">

                    <input type="text" value="@value" placeholder="@placeholder" @onchange="@((ui) =>  onValueChanged((string)ui.Value))" step="any" class="uk-input uk-form-small @class_name" style="width:@width" />

                    @ChildContent
                </div>
            </div>
        </div>
    </div>
}

@code{

    [CascadingParameter] public GlobalVariableModel gv { get; set; }

    [Parameter] public string placeholder { get; set; } = "";
    [Parameter] public string label { get; set; } = "";
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public bool is_horizontal { get; set; } = true;
    [Parameter] public string text_format { get; set; } = "0.####";
    [Parameter] public string width { get; set; } = "";
    [Parameter] public string class_name { get; set; } = "uk-form-small";
    [Parameter] public string wrp_class { get; set; } = "uk-margin-small";
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public decimal value { get; set; }
    [Parameter] public EventCallback<decimal> valueChanged { get; set; }
    async Task onValueChanged(string _value)
    {
        decimal _result = 0;
        if (!string.IsNullOrEmpty(_value))
        {
            _result = Convert.ToDecimal(_value);
        }
        await valueChanged.InvokeAsync(_result);
    }
    string strText;

    //protected override void OnInitialized()
    //{


    //    strText = value.ToString(text_format);
    //}



    //private async Task TextChange(string n)
    //{

    //    if (String.IsNullOrEmpty(n))
    //    {
    //        n = "0";
    //    }
    //    else
    //    {
    //        n = n.Replace("$", "").Replace(",", "");

    //        double result = 0;
    //        if (decimal.TryParse(n, out result))
    //        {
    //            value = result;
    //        }
    //        else
    //        {
    //            value = 0;
    //        }
    //    }


    //    await textChanged.InvokeAsync(text);
    //}

}


