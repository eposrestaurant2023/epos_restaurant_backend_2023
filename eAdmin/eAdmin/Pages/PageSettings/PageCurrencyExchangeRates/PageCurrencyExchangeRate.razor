@page "/currencyexchangerate"
@inherits PageCore
<Loading is_loading="@(is_loading || is_loading_data || is_saving)" />

@if (!is_loading)
{
    <Microsoft.AspNetCore.Components.Web.Extensions.Head.Title Value="@(lang["Currency Exchange Rate"])"></Microsoft.AspNetCore.Components.Web.Extensions.Head.Title>
    <PageContainer roles="@gv.GetRole("currency_exchange_rate_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Currency Exchange Rate"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var r in gv.business_branch_by_role)
                {
                    <UISummaryBox Title="@(r.business_branch_name_en)" ShowImage="false" IsFullContent="true">
                        <ContentFull>
                            <div class="uk-grid-margin-small-bottom">@lang["Base Currency"] : <span class="uk-text-bold">@lang[base_currency.currency_name_en]</span></div>

                            @if (models.Any())
                            {
                                 <h5 style="margin:10px,0px;">@lang["Exchange Rate"]</h5>
                                   <hr/>
                                foreach (BusinessBranchCurrencyModel b in models.Where(m => m.business_branch_id == r.id &&  m.currency.is_base_exchange_currency == false).OrderByDescending(r => r.currency.is_main).ToList())
                                {
                                    <ExchangeRateInput value="@(Convert.ToDecimal(b.exchange_rate_input))" valueChanged="@((value)=>RateChange( r.id, b,Convert.ToDouble( value)))" label="@($"{lang[base_exchange_currency.currency_name_en]} => {lang[b.currency?.currency_name_en]}")" />
                                }
                              
                                <h5>@lang["Change Exchange Rate"]</h5>
                                  <hr/>
                                @foreach (BusinessBranchCurrencyModel b in models.Where(m => m.business_branch_id == r.id &&  m.currency.is_base_exchange_currency == false).OrderByDescending(r => r.currency.is_main).ToList())
                                { 
                                    <ExchangeRateInput value="@(Convert.ToDecimal(b.change_exchange_rate_input))" valueChanged="@((value)=>Change_RateChange( r.id, b, Convert.ToDouble(value)))" label="@($"{lang[base_exchange_currency.currency_name_en]} => {lang[b.currency?.currency_name_en]}")"  />
                                }
                            }
                            <Spacing Number="16" />
                        </ContentFull>
                    </UISummaryBox>
                }
            </UIGridCenter>

            <UIGridCenter>
             
            </UIGridCenter>
        </PageBody>
        <PageFooter>
            <FooterCenter>
                <ComSavingFormButton is_loading="@is_saving" OnSave="@Save_Click" is_show_cancel="false" is_show_save_action="true" is_show_save_submit="false"/>
            </FooterCenter>
        </PageFooter>
    </PageContainer>
}

@code{
    public List<BusinessBranchCurrencyModel> models { get; set; } = new List<BusinessBranchCurrencyModel>();

    public CurrencyModel base_currency { get { return gv.currencies.Where(r => r.is_main).FirstOrDefault(); } }
    public CurrencyModel base_exchange_currency
    {
        get
        {
            return gv.currencies.Where(r => r.is_base_exchange_currency).FirstOrDefault();
        }
    }
    public double base_exchange_rate(Guid _bid)
    {
        double rate = models.Where(r => r.currency_id == base_exchange_currency.id && r.business_branch_id==_bid).FirstOrDefault().exchange_rate;
        return rate == 0 ? 1 : rate;

    }

    public double base_change_exchange_rate(Guid _bid)
    {

        
        double rate = models.Where(r => r.currency_id == base_exchange_currency.id && r.business_branch_id==_bid).FirstOrDefault().change_exchange_rate;
        return rate == 0 ? 1 : rate;
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading = true;
        is_loading_data = true;
        var res = await http.ApiGetOData("BusinessBranchCurrency?$expand=currency,business_branch($select=id,business_branch_name_en,business_branch_name_kh)&$filter=is_deleted eq false");
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(res.Content.ToString());
        }
        is_loading_data = false;
        is_loading = false;
    }


    async Task Save_Click()
    {
        //remove exchange record that dont have in current role 
        List<BusinessBranchCurrencyModel> currency_exchange_list = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(JsonSerializer.Serialize(models));
        List<BusinessBranchCurrencyModel> save_models = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(JsonSerializer.Serialize(models));
        foreach(var m in currency_exchange_list.Select(r => r.business_branch_id).Distinct())
        {
            if(!gv.business_branch_by_role.Where(r=>r.id == m).Any())
            {
                save_models.RemoveAll(r => r.business_branch_id == m);
            }
        }

        if(save_models.Where(r=>r.exchange_rate ==0 || r.change_exchange_rate == 0  ).Any())
        {
            toast.Add(lang["Please enter exchange rate"], MudBlazor.Severity.Warning);
            return;
        }

        is_saving = true;
        save_models.ForEach(r => r.business_branch = null);
        save_models.ForEach(r => r.currency = null);

        var resp = await http.ApiPost("BusinessBranchCurrency/save/multiple", save_models);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);

        }
        else
        {
            toast.Add(lang["Save data Fail"], MudBlazor.Severity.Warning);
        }
        is_saving = false;
    }




    void RateChange(Guid business_branch_id, BusinessBranchCurrencyModel curr, double val)
    {
        curr.exchange_rate_input = val;
        foreach (var c in models.Where(r => r.business_branch_id == business_branch_id && r.currency.is_base_exchange_currency == false).ToList())
        {


            updateExchange(business_branch_id,c, (( c.currency_id==curr.currency_id) ?val:  c.exchange_rate_input));
        }
    }

    void updateExchange(Guid business_branch_id,  BusinessBranchCurrencyModel a, double rate_input)
    {

        if (base_currency == base_exchange_currency)
        {
            a.exchange_rate = a.exchange_rate_input;

        }
        else
        {


            if (a.business_branch_id == business_branch_id && a.currency.is_main)
            {
                models.Where(r=>r.business_branch_id==business_branch_id && r.currency.is_base_exchange_currency).FirstOrDefault().exchange_rate = 1 / a.exchange_rate_input;

            }
            else
            {
                a.exchange_rate = a.exchange_rate_input * base_exchange_rate(business_branch_id);
            }
        }
    }



    void Change_RateChange(Guid business_branch_id, BusinessBranchCurrencyModel curr, double val)
    {
        curr.change_exchange_rate_input = val;
        foreach (var c in models.Where(r => r.business_branch_id == business_branch_id && r.currency.is_base_exchange_currency == false).ToList())
        {


            Change_updateExchange(business_branch_id,c, (( c.currency_id==curr.currency_id) ?val:  c.change_exchange_rate_input));
        }
    }

    void Change_updateExchange(Guid business_branch_id,  BusinessBranchCurrencyModel a, double rate_input)
    {

        if (base_currency == base_exchange_currency)
        {
            a.change_exchange_rate = a.change_exchange_rate_input;

        }
        else
        {


            if (a.business_branch_id == business_branch_id && a.currency.is_main)
            {
                models.Where(r=>r.business_branch_id==business_branch_id && r.currency.is_base_exchange_currency).FirstOrDefault().change_exchange_rate = 1 / a.change_exchange_rate_input;

            }
            else
            {
                a.change_exchange_rate = a.change_exchange_rate_input * base_change_exchange_rate(business_branch_id);
            }
        }
    }

}

