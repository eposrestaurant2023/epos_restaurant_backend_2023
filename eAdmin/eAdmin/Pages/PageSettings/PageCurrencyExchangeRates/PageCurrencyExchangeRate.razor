@page "/currencyexchangerate"
@inherits PageCore
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@(lang["Currency Exchange Rate"])"></Title>
    <PageContainer roles="@gv.GetRole("currency_exchange_rate_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Currency Exchange Rate"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                @*<RefreshButton OnClick="@(async()=>await LoadData())" />*@
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var r in gv.business_branch_by_role)
                {
                    <UISummaryBox Title="@(r.business_branch_name_en)" ShowImage="false" IsFullContent="true">
                        <ContentFull>
                            <div class="uk-grid-margin-small-bottom">@lang["Base Currency"] : <span class="uk-text-bold">@base_currency.currency_name_en</span></div>

                            @if (models.Any())
                            {
                                foreach (BusinessBranchCurrencyModel b in models.Where(m => m.business_branch_id == r.id && m.currency_id != base_currency.id).OrderByDescending(r => r.currency.is_main).ToList())
                                {
                                    <div>1  @base_exchange_currency.currency_name_en </div>
                                    <span> @b.currency.currency_name_en | @b.exchange_rate | @b.exchange_rate_input</span> 

                                    <ExchangeRateInput value="@b.exchange_rate_input" valueChanged="@((value)=>RateChange( r.id, b,value))" label="@b.currency?.currency_name_en" />
                                }
                            }
                            <Spacing Number="16" />
                            @*<div class="uk-margin-small-bottom">@lang["Base Exchange Rate Currency"] : <span class="uk-text-bold">@base_exchange_rate_currency.currency_name_en</span></div>
        @foreach (var b in models.Where(m => m.business_branch_id == r.id && m.currency_id != base_exchange_rate_currency.id).ToList())
         {
             <NumberInput label="@b.currency?.currency_name_en" @bind-text="@b.change_exchange_rate_input" />
         }*@
                        </ContentFull>
                    </UISummaryBox>
                }
            </UIGridCenter>
        </PageBody>
        <PageFooter>
            <FooterCenter>
                @*<ComSavingFormButton is_loading="@is_saving" OnSave="@SaveClick" is_show_cancel="false" />*@
            </FooterCenter>
        </PageFooter>
    </PageContainer>
}

@code{
    public List<BusinessBranchCurrencyModel> models { get; set; } = new List<BusinessBranchCurrencyModel>();

    public CurrencyModel base_currency { get { return gv.currencies.Where(r => r.is_main).FirstOrDefault(); } }
    public CurrencyModel base_exchange_currency
    {
        get
        {
            return gv.currencies.Where(r => r.is_base_exchange_currency).FirstOrDefault();
        }
    }
    public double base_exchange_rate(Guid _bid)
    {

        return models.Where(r => r.currency_id == base_currency.id && r.business_branch_id==_bid).FirstOrDefault().exchange_rate;

    }


    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {
        var res = await http.ApiGetOData("BusinessBranchCurrency?$expand=currency,business_branch($select=id,business_branch_name_en,business_branch_name_kh)");
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<BusinessBranchCurrencyModel>>(res.Content.ToString());
        }
    }


    void RateChange(Guid business_branch_id, BusinessBranchCurrencyModel curr, double val)
    {

        foreach (var c in models.Where(r => r.business_branch_id == business_branch_id && r.currency.is_base_exchange_currency == false).ToList())
        {
            updateExchange(business_branch_id,c, ((c.business_branch_id == business_branch_id && c.currency_id==curr.currency_id) ?val:  c.exchange_rate_input));
        }
    }

    void updateExchange(Guid business_branch_id,  BusinessBranchCurrencyModel a, double val)
    {
        a.exchange_rate_input = val;
        if (base_currency == base_exchange_currency)
        {
            a.exchange_rate = a.exchange_rate_input;

        }
        else
        {
            if (a.business_branch_id == business_branch_id && a.currency_id != base_currency.id)
            {
                a.exchange_rate = a.exchange_rate_input * base_exchange_rate(business_branch_id);
            }
            else
            {
                a.exchange_rate = 1 / a.exchange_rate_input;
            }
        }
    }


}

