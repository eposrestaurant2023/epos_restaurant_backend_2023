@page "/tablegroupandtable/{business_branch_id}/new"
@page "/tablegroupandtable/edit/{id:int}"
@inherits PageCore

<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="@lang["Table Group & Table"]"></Title>
    <PageContainer roles="@gv.GetRole("table_group_table")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <div>@(id > 0 ? lang["Edit"] : lang["New"])  @lang["Table Group & Table"] @business_branch.business_branch_name_en</div>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true" />
        </PageHeader>

        <EditForm Model="@model" OnValidSubmit="@Save_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="@lang["Photo"]" ClassName="uk-text-center">
                        <UIFlexCenter>
                            <FileUpload @bind-ImageUrl="@model.photo" />
                        </UIFlexCenter>
                    </UIContainerBox>
                    <UIContainerBox Title="@lang["Table Group Information"]">
                        <TextInput @bind-text="@model.table_group_name_en" label="@lang["Name En"]">
                            <ValidationMessage For="@(() => model.table_group_name_en )" />
                        </TextInput>
                        <TextInput @bind-text="@model.table_group_name_kh" label="@lang["Name Kh"]" />
                        <SelectOutlet show_empty="true" @bind-selected_value="@model.outlet_id" @bind-outlet="@model.outlet" business_branch_id="@business_branch.id">
                            <ValidationMessage For="@(() => model.outlet_id)" />
                        </SelectOutlet>
                        <ComInputCheckBox @bind-value="@model.status" label="@lang["Status"]" />
                    </UIContainerBox>
                    <UIContainerBox Title="@lang["Table Information"]">
                        <div class="uk-child-width-1-2 uk-grid-small" uk-grid>
                            <div>
                                <NumberInputInt label="@lang["Min"]" @bind-text="@min" placeholder="@lang["Min"]" />
                            </div>
                            <div>
                                <NumberInputInt label="@lang["Max"]" @bind-text="@max" placeholder="@lang["Max"]" />
                            </div>
                        </div>
                        <div class="uk-child-width-1-2 uk-grid-small" uk-grid>
                            <div>
                                <NumberInputDouble label="@lang["Width"]" @bind-text="@width" />
                            </div>
                            <div>
                                <NumberInputDouble label="@lang["Height"]" @bind-text="@height" />
                            </div>
                        </div>
                        <div class="uk-child-width-1-2 uk-grid-small" uk-grid>
                            <div>
                                <TextInput label="@lang["Prefix"]" @bind-text="@prefix" placeholder="@lang["Prefix"]" />
                            </div>
                            <div>
                                <TextInput label="@lang["Format"]" @bind-text="@number_format" placeholder="@lang["Format"]" />
                            </div>
                        </div>
                        <Spacing Number="10" />
                        <div class="uk-width-1">
                            <Button type="button" OnClick="@Add_Table">@lang["Add Table"]</Button>
                        </div>
                        <Spacing Number="10" />
                        <div class="uk-overflow-auto table-scroll">
                            <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <ThAuto>@lang["Table #"]</ThAuto>
                                    <ThCenter width="100px">@lang["Width"]</ThCenter>
                                    <ThCenter width="100px">@lang["Height"]</ThCenter>
                                    <th>@lang["Shape"]</th>
                                    <th>@lang["Price Rule"]</th>
                                    <Th></Th>
                                </tr>
                                <tr>
                                    <ThAuto>@lang["Apply All"]</ThAuto>
                                    <ThCenter>
                                    </ThCenter>
                                    <ThCenter>
                                    </ThCenter>
                                    <th>
                                        <SelectShape @bind-selected_value="@shape" />
                                    </th>
                                    <th>
                                        <SelectPriceRule @bind-selected_value="@price_rule" outlet="@model.outlet" is_inline="true" show_empty="true" width="150px" />
                                    </th>
                                    <th></th>
                                </tr>
                                @foreach (var s in model.tables.Where(r => r.is_deleted == false).ToList())
                                {

                                    <tr>
                                        <td>
                                            <TextInput label="" @bind-text="@s.table_name" />
                                        </td>
                                        <TdCenter>
                                            <NumberInputDouble @bind-text="@s.width" />
                                        </TdCenter>
                                        <TdCenter>
                                            <NumberInputDouble @bind-text="@s.height" />
                                        </TdCenter>
                                        <td>
                                            <SelectShape @bind-selected_value="@s.shape" />
                                        </td>
                                        <td>
                                            <SelectPriceRule selected_value="@s.price_rule_id" outlet="@model.outlet" is_inline="true" show_empty="true" width="150px" />
                                        </td>
                                        <td>
                                            <Icon icon="delete" OnClick="@(()=>Delete_Table(s))" />
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="tablegroupandtable" />
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>

}

@code{
    [Parameter] public int id { get; set; } = 0;
    [Parameter] public string business_branch_id { get; set; }
    TableGroupModel model = new TableGroupModel();
    BusinessBranchModel business_branch { get; set; }
    string prefix = "T";
    string number_format = "00";
    int min = 1;
    double width = 60, height = 60;
    int max = 10;
    Guid outlet_id = Guid.Empty;

    string ControllerApi = "TableGroup";
    bool ShowModel = false;
    private int? _price_rule;

    public int? price_rule
    {
        get { return _price_rule; }
        set
        {
            _price_rule = value;
            model.tables.ForEach(r => r.price_rule_id = _price_rule);
        }
    }

    private string? _shape;

    public string? shape
    {
        get { return _shape; }
        set
        {
            _shape = value;
            model.tables.ForEach(r => r.shape = _shape);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        @if (id > 0 && string.IsNullOrEmpty(business_branch_id))
        {
            await LoadData();
        }
        else
        {
            business_branch = gv.bussiness_branches.Where(r => r.id == Guid.Parse(business_branch_id)).FirstOrDefault();
        }
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        string api_url = ControllerApi;
        api_url = api_url + $"({id})?";
        api_url = api_url + "$expand=outlet($select=id,outlet_name_en,outlet_name_kh,business_branch_id;$expand=business_branch($select=id,business_branch_name_en,business_branch_name_kh);$filter= is_deleted  eq false),";
        api_url = api_url + "tables($select = id,table_name,height,width,position_x_percent,shape,position_y_percent,price_rule_id;$filter= is_deleted  eq false)";


        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<TableGroupModel>(resp.Content.ToString());
            business_branch = model.outlet.business_branch;

        }
        is_loading_data = false;
    }

    async Task Save_Click(EditContext editContext)
    {
        if (model.outlet_id == Guid.Empty)
        {
            toast.Add(lang["Please select outlet"], MudBlazor.Severity.Warning);
            is_saving = false;
            return;
        }

        TableGroupModel d = model;
        if (!is_saving)
        {
            is_saving = true;
            Object obj = new Object();
            d.outlet = null;
            TableGroupModel save_table_group = JsonSerializer.Deserialize<TableGroupModel>(JsonSerializer.Serialize(d));
            var res = await http.ApiPost($"{ControllerApi}/save", save_table_group);
            if (res.IsSuccess)
            {
                obj = JsonSerializer.Deserialize<TableGroupModel>(res.Content.ToString());

                toast.Add(lang["Saving successfully"], MudBlazor.Severity.Success);
                nav.NavigateTo($"tablegroupandtable");
            }
            else
            {
                is_saving = false;
                toast.Add(res.Content.ToString(), MudBlazor.Severity.Warning);
            }
            is_saving = false;
        }
    }


    void Add_Table()

    {
        if (min > max)
        {
            toast.Add(lang["Please enter valid Min and Max number"], MudBlazor.Severity.Warning);
            return;
        }
        while (min <= max)
        {
            model.tables.Add(new TableModel()
            {
                table_name = prefix + min.ToString(number_format),
                width = width,
                height = height,
                shape = shape
            });
            min = min + 1;
        }
    }

    void Delete_Table(TableModel s)
    {
        if (s.id == 0)
        {
            model.tables.Remove(s);
        }
        else
        {
            s.is_deleted = true;
        }
    }


}
