@page "/tablegroupandtable/new"
@page "/tablegroupandtable/edit/{id:int}"
 @inject IHttpService http;
@inject NavigationManager nav;
@inject IMatToaster toast;
 


<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Table Group & Table"></Title>
    <PageContainer roles="@gv.GetRole("table_group_table")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @if (id > 0)
                        {
                            <div>Edit Table Group & Table</div>
                        }

                        else
                        {
                            <div>New Table Group & Table</div>
                        }

                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">

            </HeaderRight>
        </PageHeader>

        <EditForm Model="@model" OnValidSubmit="@Save_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="Table Group Infor">
                        <TextInput @bind-text="@model.table_group_name_en" label="Table Group Name En">
                            <ValidationMessage For="@(() => model.table_group_name_en )" />
                        </TextInput>
                        <TextInput @bind-text="@model.table_group_name_kh" label="Table Group Name Kh" />
                        <SelectOutlet @bind-selected_value="@model.outlet_id">
                            <ValidationMessage For="@(() => model.outlet_id)" />
                        </SelectOutlet>
                        <ComInputCheckBox @bind-value="@model.status" label="Status" />

                    </UIContainerBox>
                    <UIContainerBox Title="Table Info">
                        <div class="uk-child-width-1-2 uk-grid-small" uk-grid>
                            <div>
                                <NumberInputInt label="Min" @bind-text="@min" placeholder="Min" />
                            </div>
                            <div>
                                <NumberInputInt label="Max" @bind-text="@max" placeholder="Max" />
                            </div>
                        </div>
                        <div class="uk-child-width-1-2 uk-grid-small" uk-grid>
                            <div>
                                <TextInput label="Prefix" @bind-text="@prefix" placeholder="Prefix" />
                            </div>
                            <div>
                                <TextInput label="Format" @bind-text="@number_format" placeholder="Format" />
                            </div>
                        </div>
                        <Spacing Number="10"/>
                        <div class="uk-width-1">
                            <Button type="button" OnClick="@Add_Table">Add Table</Button>
                        </div>
                      
                       
                      
                     
                     
                        <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                            <tr>
                                <Th>Table No</Th>
                                <Th></Th>
                            </tr>
                            @foreach (var s in model.tables.Where(r => r.is_deleted == false).ToList())
                            {

                                <tr>
                                    <td>
                                        <TextInput label="" @bind-text="@s.table_name" />
                                    </td>
                                    <td>
                                        <Icon icon="delete" OnClick="@(()=>Delete_Table(s))" />
                                    </td>

                                </tr>
                            }
                        </table>


                    </UIContainerBox>


                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="tablegroupandtable"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>

}

@code{
    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    [Parameter] public int id { get; set; }
    TableGroupModel model = new TableGroupModel();
 
 

    string prefix = "T";
    string number_format = "00";
    int min = 1;
    int max = 10;
    bool is_loading,is_loading_data,is_saving;

    public Dictionary<string, object> formAttributes { get; set; } = new Dictionary<string, object>()
        {
                { "class", "uk-form-horizontal" }
        };

    string ControllerApi = "TableGroup";
    bool ShowModel = false;
 

    protected override async Task OnInitializedAsync()
    {


        is_loading = true;

        await LoadData();

        is_loading = false;
    }



    async Task LoadData()
    {

        is_loading_data = true;


        string api_url = ControllerApi;
        api_url = api_url + $"({id})?";
        api_url = api_url + "$expand=outlet($select=id,outlet_name_en,outlet_name_kh;$filter= is_deleted  eq false),";
        api_url = api_url + "tables($select = id,table_name,height,width,position_x_percent,position_y_percent;$filter= is_deleted  eq false)";


        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {

            model = JsonSerializer.Deserialize<TableGroupModel>(resp.Content.ToString());

        }
        is_loading_data = false;

    }


    async Task Save_Click(EditContext editContext)
    {
        TableGroupModel d = model;
        if (!is_saving)
        {
            is_saving = true;
            Object obj = new Object();
            d.outlet = null;
            TableGroupModel save_table_group = JsonSerializer.Deserialize<TableGroupModel>(JsonSerializer.Serialize(d));
            var res = await http.ApiPost($"{ControllerApi}/save", save_table_group);
            if (res.IsSuccess)
            {
                obj = JsonSerializer.Deserialize<TableGroupModel>(res.Content.ToString());

                toast.Add("Saving successfully", MatToastType.Success);
                nav.NavigateTo($"tablegroupandtable");
            }
            else
            {
                is_saving = false;
                toast.Add(res.Content.ToString(), MatToastType.Warning);
            }
            is_saving = false;
        }
    }


    void Add_Table()

    {
        if (min > max)
        {
            toast.Add("Please enter valid Min and Max number", MatToastType.Warning);
            return;
        }
        while (min <= max)
        {
            model.tables.Add(new TableModel()
            {
                table_name = prefix + min.ToString(number_format)

            });
            min = min + 1;
        }



    }

    void Delete_Table(TableModel s)
    {
        if (s.id == 0)
        {
            model.tables.Remove(s);
        }
        else
        {
            s.is_deleted = true;
        }
    }


}
