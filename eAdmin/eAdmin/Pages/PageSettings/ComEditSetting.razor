@inject IHttpService http
@inject IMatToaster toast

<EditFormContext Save_Click="@Save_Click" Cancel_Click="Cancel_click" model="business_branches" is_opened="is_dialog_open" title="@title" is_submitting="setting.is_saving" modal_width="800px">
    @if (setting.input_type == "date")
    {
        <ComSelectDateFormat label="Date Format" @bind-selected_value="@setting.setting_title" />
    }
    else if (setting.input_type == "datetime")
    {
        <ComSelectDateTimeFormat label="Date Time Format" @bind-selected_value="@setting.setting_title" />
    }
    else
    {
        <TextInput is_read_only="true" label="Setting Title" @bind-text="@setting.setting_title" placeholder="Setting Value" type="@setting.input_type" />
    }
    @foreach (var b in business_branches)
    {
        <div>@b.business_branch_name_en</div>
        foreach (var bs in b.business_branch_settings.Where(r => r.business_branch_id == b.id).ToList())
        {
            <TextInput label="Setting Value" placeholder="Setting Value" @bind-text="@bs.setting_value" />
        }        
    }
</EditFormContext>


@code{
    [Parameter] public SettingModel setting { get; set; }
    [Parameter] public bool is_dialog_open { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public EventCallback<SettingModel> SaveSetting { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> LoadData { get; set; }
    [Parameter] public List<BusinessBranchModel> business_branches { get; set; }
    List<BusinessBranchSettingModel> bus_branch_settings { get; set; } = new List<BusinessBranchSettingModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData.InvokeAsync();
        await LoadBusinessBranch();
    }

    async Task Save_Click()
    {
        setting.business_branch_settings.Clear();
        foreach (var a in business_branches.ToList())
        {
            //a.business_branch_settings.ToList().RemoveAll(r=>r.setting_value.Trim() == "");
            foreach (var bs in a.business_branch_settings.Where(r=>r.business_branch_id == a.id && r.setting_id == setting.id).ToList())
            {
                a.business_branch_settings.Add(new BusinessBranchSettingModel()
                {
                    business_branch_id = a.id,
                    setting_value = bs.setting_value,
                    setting_id = setting.id
                });
            }
        }
        var post = await http.ApiPost("BusinessBranch/Save/multiple",business_branches);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully", MatToastType.Success);
            setting = new SettingModel();
        }
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$expand=business_branch_settings&$filter=is_deleted eq false and status eq true");
        if (res.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
            if (business_branches != null)
            {
                foreach (var b in business_branches)
                {
                    b.business_branch_settings.Add(new BusinessBranchSettingModel()
                    {
                        business_branch_id = b.id,
                        setting_id = setting.id
                    });
                }
            }
        }
    }
} 