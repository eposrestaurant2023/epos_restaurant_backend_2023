@inject IHttpService http
@inject IMatToaster toast

<EditFormContext Save_Click="@SaveSetting_Click" Cancel_Click="Cancel_click" model="@bus_branch_settings" is_opened="is_dialog_open" title="@title" is_submitting="setting.is_saving" modal_width="800px">

    <TextInput is_read_only="true" label="Setting Title" @bind-text="@setting.setting_title" placeholder="Setting Value" />
    <hr/>
    <TextInput is_read_only="true" label="Business Branch" @bind-text="@bus_branch.business_branch_name_en" />
    @foreach (var bs in bus_branch_settings.Where(r => r.business_branch_id == bus_branch.id && r.setting_id == setting.id).ToList())
    {
        @if (setting.input_type == "date")
        {
            <ComSelectDateFormat label="Date Format" @bind-selected_value="@bs.setting_value" />
        }
        else if (setting.input_type == "datetime")
        {
            <ComSelectDateTimeFormat label="Date Time Format" @bind-selected_value="@bs.setting_value"/>
        }
        else
        {
            <TextInput label="Setting Value" @bind-text="@bs.setting_value" placeholder="Setting Value" type="@setting.input_type" />
        }
        <hr />
    }
</EditFormContext>

@code{
    [Parameter] public SettingModel setting { get; set; }
    [Parameter] public bool is_dialog_open { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Save_Click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    [Parameter] public BusinessBranchModel bus_branch { get; set; }
    List<BusinessBranchSettingModel> bus_branch_settings { get; set; } = new List<BusinessBranchSettingModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadBusinessBranch();
    }

    async Task SaveSetting_Click()
    {
        var post = await http.ApiPost("BusinessBranchSetting/Save/multiple",bus_branch_settings);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully", MatToastType.Success);
            is_dialog_open = false;
            await Save_Click.InvokeAsync();
            bus_branch_settings = new List<BusinessBranchSettingModel>();
        }
    }
    async Task LoadBusinessBranch()
    {
        var resp = await http.ApiGetOData($"BusinessBranchSetting?$filter=setting_id eq {setting.id}");
        if (resp.IsSuccess)
        {
            bus_branch_settings = JsonSerializer.Deserialize<List<BusinessBranchSettingModel>>(resp.Content.ToString());
        }
    }
} 