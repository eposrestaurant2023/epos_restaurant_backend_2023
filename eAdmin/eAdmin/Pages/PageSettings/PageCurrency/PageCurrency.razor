@page "/currency"
@inherits PageCore

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@(lang["Currency"])"></Title>
    <PageContainer roles="@gv.GetRole("currency_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Currency"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <LinkButton url="currencyexchangerate" icon="attach_money" background="uk-button-primary" Class_Name="button-large">@lang["Update Exchange Rate"]</LinkButton>
                <LinkButton url="currency/new" icon="add" background="uk-button-primary" Class_Name="button-large">@lang["New"]</LinkButton>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var d in gv.business_branch_by_role)
                {
                    <div class="container-layout">
                        <div class="title-header">
                            <div class="uk-panel">
                                <div class="uk-float-left">
                                    <span>
                                        @d.business_branch_name_en
                                    </span>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div>
                            <table class="uk-table cus_hearder_table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <Th>@lang["Name En"]</Th>
                                    <Th>@lang["Name Kh"]</Th>
                                    <Th>
                                        @lang["Currency format"]
                                    </Th>
                                    <Th>@lang["Report format"]</Th>
                                    <Th>@lang["Exchange Rate"]</Th>
                                    <th>

                                    </th>
                                </tr>
                                @foreach (var bp in models.Where(r=>r.is_deleted==false))
                                {
                                    if (bp.business_branch_currencies.Where(r => r.business_branch_id == d.id).Any())
                                    {
                                    <tr>
                                        <td>
                                            @bp.currency_name_en <br /> 
                                            <Label is_visible="@bp.is_main" Text="@lang["Main Currency"]" Background="orange" /></td>
                                        <td>@bp.currency_name_kh</td>
                                        <td>
                                           @bp.currency_format 
                                        </td>
                                        <td>
                                           @bp.report_format
                                        </td>
                                        <td>
                                         @bp.business_branch_currencies.Where(r => r.business_branch_id == d.id).FirstOrDefault().exchange_rate.ToString(bp.currency_format)
                                        </td>

                                        <TdActions is_loading="@(bp.is_deleting || bp.business_branch_currencies.Where(r => r.business_branch_id == d.id).FirstOrDefault().is_deleting)">
                                             
                                         
                                            <TableActionItem icon="attach_money" url="currencyexchangerate">@lang["Update Exchange Rate"]</TableActionItem>
                                            <TableActionItem  roles="@gv.GetRole("currency_edit")" icon="check"  OnClick="@(() => MarkAsMainCurrency(bp))">@lang["Mark as Main Currency"]</TableActionItem>
                                            <TableActionItem roles="@gv.GetRole("currency_edit")" icon="edit"  OnClick="@(() => OnEdit(bp.id))">@lang["Edit"]</TableActionItem>
                                            <TableActionItem is_visible="@(!bp.is_build_in)" roles="@gv.GetRole("currency_delete")" icon="delete" OnClick="@(() => OnDelete(bp))">@lang["Delete"]</TableActionItem>
                                             
                                        </TdActions>
                                    </tr>
                                    }

                                }
                            </table>
                        </div>
                    </div>
                }
            </UIGridCenter>
        </PageBody>
    </PageContainer>
}

@code{
    List<CurrencyModel> models = new List<CurrencyModel>();

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading = true;
        var res = await http.ApiGetOData("Currency?$expand=business_branch_currencies($filter=is_deleted eq false)");
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<CurrencyModel>>(res.Content.ToString());
            gv.currencies = models;
        }
        is_loading = false;
    }

    void OnEdit(int id)
    {
        nav.NavigateTo($"currency/edit/{id}");

    }

    async Task OnDelete(CurrencyModel c)
    {
        if (await js.Confirm(lang["Delete Record"], lang["Are you sure you want to delete this currency?"]))
        {

            //do delete
            is_loading_data = true;
            c.is_deleting = true;
            var resp = await http.ApiPost("Currency/delete/" + c.id);
            if (resp.IsSuccess)
            {
                c.is_deleted = true;
                toast.Add(lang["Delete record successfully"], MudBlazor.Severity.Success);
            }else
            {
                toast.Add(lang["Delete record fail"], MudBlazor.Severity.Warning);
            }
            is_loading_data = false;
            c.is_deleting = false;
        }


    }
    async Task MarkAsMainCurrency(CurrencyModel c)
    {
        if (await js.Confirm(lang["Update currency"], lang["Are you sure you want to mark this currency as main currency?"]))
        {

            //do delete
            is_loading_data = true;
            c.is_deleting = true;
            var resp = await http.ApiPost("Currency/MarkAsMainCurrency/" + c.id);
            if (resp.IsSuccess)
            {

                toast.Add(lang["Mark as main currency successfully"], MudBlazor.Severity.Success);

                await LoadData();

            }else
            {
                toast.Add(lang["Mark as main currency fail"], MudBlazor.Severity.Warning);
            }
            is_loading_data = false;
            c.is_deleting = false;
        }


    }



}

