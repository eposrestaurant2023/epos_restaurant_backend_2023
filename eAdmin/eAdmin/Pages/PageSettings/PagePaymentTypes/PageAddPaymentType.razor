@page "/paymenttype/new"
@page "/paymenttype/edit/{id:int}"
@page "/paymenttype/clone/{clone_id:int}"

@inherits PageCore;
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="@lang[page_title]"></Title>
    <PageContainer roles="@gv.GetRole($"{(id > 0 ? "payment_type_edit" : "payment_type_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>
                            @if (clone_id > 0)
                            {
                                @(lang["Clone"] + ":" + model.payment_type_name_en)
                            }
                            else
                            {
                                @(id > 0 ? $"{lang["Edit"]} : {model.payment_type_name_en}" : lang["New Payment Type"])
                            }
                        </span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true"></HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@SavePaymentType_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="@lang["Payment Type"]">
                        <TextInput @bind-text="@model.payment_type_name_en" is_read_only="model.is_build_in" label="@lang["Name En"]">
                            <ValidationMessage For="@(() => model.payment_type_name_en )" />
                        </TextInput>
                        <TextInput @bind-text="@model.payment_type_name_kh" is_read_only="model.is_build_in" label="@lang["Name Kh"]" />
                        <NumberInputInt @bind-text="@model.sort_order" label="@lang["Sort Order"]" width="100%" />
                        <TextInput label="@lang["Note"]" @bind-text="@model.note" type="textarea" />

                        @if (!model.is_build_in)
                        {
                            <SelectCurrency show_empty="true" @bind-selected_value="@model.currency_id" empty_text="@lang["Select Currency"]" label="@lang["Currency"]">
                                <ValidationMessage For="@(() => model.currency_id)" />
                            </SelectCurrency>
                            <ComSelectPaymentTypeGroup @bind-selected_value="@model.payment_type_group" />
                            <ComInputCheckBox label="@lang["FOC"]" @bind-value="@model.is_foc" />
                            <ComInputCheckBox label="@lang["Is single payment"]" @bind-value="@model.is_single_payment" />
                            <SelectStatus @bind-selected_value="@model.status" />
                        }

                    </UIContainerBox>
                    @if (!model.is_build_in)
                    {
                    <UIContainerBox Title="@lang["Rooms"]" is_visible="@(model.payment_type_group=="Pay to Room")" is_show_add_button="true" OnAddClick="@AddNewRoom">
                        <table class="uk-table cus_hearder_table view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                            <tr>
                                <Th>@lang["Room No"]</Th>
                                <Th>@lang["Sort Order"]</Th>
                                <Th></Th>
                            </tr>

                            @foreach (var d in room_list.OrderBy(r => r.sort_order).ThenBy(r => r.room_number))
                            {
                                <tr>
                                    <td>
                                        <TextInput @bind-text="@d.room_number" placeholder="@lang["Room Number"]" />

                                    </td>
                                    <td><NumberInputInt @bind-text="@d.sort_order" placeholder="@lang["Room Number"]" /></td>
                                    <td><Icon icon="delete" OnClick="@(()=>room_list.Remove(d))" /> </td>
                                </tr>
                            }

                        </table>
                        <Button OnClick="@AddNewRoom">@lang["Add New Room"]</Button>
                    </UIContainerBox>
                    <UIContainerBox Title="@lang["Business Branches"]">
                        @foreach (var b in business_branches)
                        {
                            <div><ComInputCheckBox @bind-value="@b.is_selected" label="@b.business_branch_name_en" label_inline="true" /></div>
                        }
                    </UIContainerBox>
                    }




                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="paymenttype" />
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>

}

@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    PaymentTypeModel model = new PaymentTypeModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();

    List<RoomListModel> room_list = new List<RoomListModel>();


    string ControllerApi = "PaymentType";
    public string api_url
    {
        get
        {
            string query = ControllerApi;
            query = query + $"({(id == 0 ? clone_id : id)})?";
            query = query + "$expand=business_branch_payment_types($select=payment_type_id,business_branch_id)";
            return query;
        }
    }
    string page_title;

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        if(clone_id > 0)
        {
            page_title = lang["Clone"] + ":" + model.payment_type_name_en;
        }
        else
        {
            if (id > 0)
            {
                page_title = $"{lang["Edit"]}: { model.payment_type_name_en}";
            }
            else{
                page_title = lang["New Payment Type"];
            }
        }
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PaymentTypeModel>(resp.Content.ToString());
            if (clone_id > 0)
            {
                model.id = 0;
                model.is_build_in = false;
                model.created_date = DateTime.Now;
            }
        }
        try
        {
            room_list = JsonSerializer.Deserialize<List<RoomListModel>>(model.room_numbers);
        }
        catch
        {
            room_list = new List<RoomListModel>();
        }
        is_loading_data = false;
    }

    async Task LoadBusinessBranch()
    {
        is_loading_data = true;
        var resp = await http.ApiGetOData("BusinessBranch?$expand=business_branch_payment_types($select=payment_type_id,business_branch_id)&$filter=is_deleted eq false");
        if (resp.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(resp.Content.ToString());

            foreach (var bp in model.business_branch_payment_types)
            {
                foreach (var b in business_branches.Where(r => r.id == bp.business_branch_id))
                {
                    b.is_selected = true;
                }
            }
        }
        is_loading_data = false;
    }

    async Task SavePaymentType_Click()
    {
        is_saving = true;
        model.business_branch_payment_types.Clear();
        if(model.payment_type_group =="Pay to Room")
        {
            model.room_numbers = JsonSerializer.Serialize(room_list);
        }
        foreach (var a in business_branches.ToList())
        {
            if (a.is_selected)
            {
                model.business_branch_payment_types.Add(new BusinessBranchPaymentTypeModel()
                {
                    business_branch_id = a.id,
                    payment_type_id = id,
                    status = model.status
                });
            }
        }
        var post = await http.ApiPost("PaymentType/Save", model);
        if (post.IsSuccess)
        {
            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);
            nav.NavigateTo("paymenttype");
            model = new PaymentTypeModel();
        }
        else
        {
            toast.Add(post.Content.ToString(), MudBlazor.Severity.Warning);
        }
        is_saving = false;
    }

    void AddNewRoom()
    {
        room_list.Add(new RoomListModel() { room_number = lang["Room"] + (room_list.Count() + 1).ToString() });
    }

    public class RoomListModel
    {
        public string room_number { get; set; }
        public int sort_order { get; set; } = 0;
    }
}
