@page "/paymenttype/new"
@page "/paymenttype/edit/{id:int}"
@page "/paymenttype/clone/{clone_id:int}"
@inject IJSRuntime js
@inherits PageCore;
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Outlet & Station"></Title>
    <PageContainer roles="@gv.GetRole($"{(id > 0 ? "payment_type_edit" : "payment_type_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>
                            @if (clone_id > 0)
                            {
                                @("Clone : " + model.payment_type_name_en)
                            }
                            else
                            {
                                @(id>0? $"Edit : {model.payment_type_name_en}" : "New Payment Type")
                            }
                        </span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true"></HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@SavePaymentType_Click">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="Payment Type">
                        <TextInput @bind-text="@model.payment_type_name_en" label="Payment Type Name En">
                            <ValidationMessage For="@(() => model.payment_type_name_en )" />
                        </TextInput>
                        <TextInput @bind-text="@model.payment_type_name_kh" label="Payment Type kh" />
                        <NumberInputInt @bind-text="@model.sort_order" label="Sort Order" width="100%" />
                        <TextInput label="Note" @bind-text="@model.note" type="textarea" />
                        <SelectCurrency show_empty="true" @bind-selected_value="@model.currency_id" empty_text="Select Currency" label="Currency">
                            <ValidationMessage For="@(()=>model.currency_id)" />
                        </SelectCurrency>
                        <SelectStatus @bind-selected_value="@model.status" />

                        @foreach (var b in business_branches)
                        {
                            <div><ComInputCheckBox @bind-value="@b.is_selected" label="@b.business_branch_name_en" label_inline="true"/></div>
                        }
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                   
                        <Button type="submit" icon="save">Save</Button>
                        <LinkButton url="paymenttype" icon="reply" Class_Name="uk-button-danger">Cancel</LinkButton>
                  
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>

}

@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    PaymentTypeModel model = new PaymentTypeModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    string ControllerApi = "PaymentType";
    public string api_url
    {
        get
        {
            string query = ControllerApi;
            query = query + $"({(id == 0 ? clone_id : id)})?";
            query = query + "$expand=business_branch_payment_types($select=payment_type_id,business_branch_id)";
            return query;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PaymentTypeModel>(resp.Content.ToString());
            if (clone_id > 0)
            {
                model.id = 0;
                model.created_date = DateTime.Now;
            }
        }
        is_loading_data = false;
    }

    async Task LoadBusinessBranch()
    {
        is_loading_data = true;
        var resp = await http.ApiGetOData("BusinessBranch?$expand=business_branch_payment_types($select=payment_type_id,business_branch_id)&$filter=is_deleted eq false");
        if (resp.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(resp.Content.ToString());

            foreach (var bp in model.business_branch_payment_types)
            {
                foreach (var b in business_branches.Where(r => r.id == bp.business_branch_id))
                {
                    b.is_selected = true;
                }
            }
        }
        is_loading_data = false;
    }


    async Task SavePaymentType_Click()
    {
        is_saving = true;
        model.business_branch_payment_types.Clear();
        foreach (var a in business_branches.ToList())
        {
            if (a.is_selected)
            {
                model.business_branch_payment_types.Add(new BusinessBranchPaymentTypeModel()
                {
                    business_branch_id = a.id,
                    payment_type_id = id,
                    status = model.status
                });
            }
        }

        var post = await http.ApiPost("PaymentType/Save", model);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully!", MatToastType.Success);
            nav.NavigateTo("paymenttype");
            model = new PaymentTypeModel();
        }
        else
        {
            toast.Add(post.Content.ToString(), MatToastType.Warning);
        }
        is_saving = false;
    }
}
