@page "/paymenttype"
@inherits PageCore;

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@state.page_title"></Title>
    <PageContainer roles="@gv.GetRole("payment_type_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle>
                    <HeaderTemplate>
                        @state.page_title
                    </HeaderTemplate>
                    <FilterTemplate>
                        <PageFilter title="Status">
                            <ModuleView module_views="@gv.GetModuleView("page_payment_type")" OnClick="@ViewClick" />
                        </PageFilter>
                    </FilterTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <LinkButton url="paymenttype/new" roles="@gv.GetRole("payment_type_add")" icon="add" background="uk-button-primary" Class_Name="button-large">New</LinkButton>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                    <div class="container-layout">
                        <div>
                            <table class="uk-table cus_hearder_table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <Th>@lang["Image"]</Th>
                                    <ThAuto>@lang["Payment Type"]</ThAuto>
                                    <ThAuto>@lang["Group"]</ThAuto>
                                    <ThCenter>@lang["Status"]</ThCenter>
                                    <Th></Th>
                                </tr>
                                    @foreach (var s in payment_types)
                                    {
                                <tr>
                                    <td>
                                        <Image ImageUrl="@(http.ImageUrl(s.photo))" IsBackgroundImage="true" Width="50px" Height="50px" />
                                    </td>
                                    <td>
                                        @if (s.is_build_in == false)
                                        {
                                            @if (!s.is_deleted)
                                            {
                                                <ComAuthorize OnClick="@(()=>OnEdit(s.id))" roles="@gv.GetRole("payment_type_edit")">
                                                    @s.payment_type_name_en
                                                </ComAuthorize>
                                                foreach (var bp in business_branch_payment_types.Where(r => r.payment_type_id == s.id).ToList())
                                                {
                                                    foreach (var bb in business_branches.Where(r => r.is_deleted == false && r.id == bp.business_branch_id).ToList())
                                                    {
                                                        <div style="color:#bab4b4;font-style:italic">
                                                            <span>@bb.business_branch_name_en</span>
                                                        </div>
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                <div>
                                                    @s.payment_type_name_en
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                    <div>
                                        @s.payment_type_name_en
                                    </div>
                                            foreach (var bp in business_branch_payment_types.Where(r => r.payment_type_id == s.id).ToList())
                                            {
                                                foreach (var bb in business_branches.Where(r => r.is_deleted == false && r.id == bp.business_branch_id).ToList())
                                                {
                                                    <div style="color:#bab4b4;font-style:italic">
                                                        <span>@bb.business_branch_name_en</span>
                                                    </div>
                                                }
                                            }
                                        }
                                    </td>
                                    <td>@s.payment_type_group</td>
                                    <TdCenter>
                                        @if (s.is_build_in)
                                        {
                                            <LabelDeleted is_visible="@s.is_deleted" />
                                            <LabelActive is_visible="@(!s.is_deleted && s.status)" is_loading="@s.is_change_status" />
                                            <LabelInActive is_visible="@(!s.is_deleted && !s.status)" is_loading="@s.is_change_status" />
                                        }
                                        else
                                        {
                                            <LabelDeleted is_visible="@s.is_deleted" />
                                            <LabelActive is_visible="@(s.status && !s.is_deleted)" OnClick="(() => OnToogleStatusLabel(s))" roles="@gv.GetRole("payment_type_edit")" is_loading="@s.is_change_status" />
                                            <LabelInActive is_visible="@(!s.status && !s.is_deleted)" OnClick="(() => OnToogleStatusLabel(s))" roles="@gv.GetRole("payment_type_edit")" is_loading="@s.is_change_status" />
                                        }
                                    </TdCenter>
                                    <TdActions is_loading="@s.is_loading">
                                        <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="edit" is_visible="@(!s.is_deleted && !s.is_build_in)" OnClick="@(()=>OnEdit(s.id))">@lang["Edit"]</TableActionItem>
                                        <TableActionItem roles="@gv.GetRole("payment_type_add")" icon="file_copy" OnClick="@(()=>Clone_Click(s.id))">@lang["Clone"]</TableActionItem>
                                        <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="highlight_off" is_visible="@(s.status && !s.is_deleted &&!s.is_build_in)" OnClick="@(()=>OnToogleStatus(s))">
                                            @lang["Inactive"]</TableActionItem>
                                        <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="check" is_visible="@(!s.status && !s.is_deleted && !s.is_build_in)" OnClick="@(() => OnToogleStatus(s))">
                                            @lang["Active"]</TableActionItem>
                                        <TableActionItem roles="@gv.GetRole("payment_type_delete")" icon="delete" is_visible="@(!s.is_deleted && !s.is_build_in)" OnClick="@(() => OnDelete(s))">@lang["Delete"]</TableActionItem>
                                        <TableActionItem roles="@gv.GetRole("payment_type_restore")" icon="refresh" is_visible="@(s.is_deleted)" OnClick="@(()=>OnRestore(s))">@lang["Restore"]</TableActionItem>
</TdActions>
                                </tr>
                                    }
                            </table>
                        </div>
                    </div>
            </UIGridCenter>
        </PageBody>
    </PageContainer>
}
@code{

    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    List<PaymentTypeModel> payment_types = new List<PaymentTypeModel>();
    List<BusinessBranchPaymentTypeModel> business_branch_payment_types = new List<BusinessBranchPaymentTypeModel>();
    string controller_api = "PaymentType";
    public string StateKey
    {
        get
        {

            return "278484567G25478kjdyvgetrjhTonB3PCz2Ts" + gv.current_login_user.id; //Storage and Session Key  
        }
    }
    string api_query = "?$expand=business_branch_payment_types";

    string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by))
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}{api_query}&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "Payment Type";
            var default_view = gv.GetDefaultModuleView("page_payment_type");
            if (default_view != null)
            {
                state.page_title = lang[default_view.title];
                state.filters = default_view.filters;
            }
        }
        await LoadData();
        await LoadBusinessBranch();
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData("BusinessBranch?$expand=business_branch_payment_types&$filter=is_deleted eq false");
        business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
    }

    async Task LoadData(string api_url = "")
    {
        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            payment_types = JsonSerializer.Deserialize<List<PaymentTypeModel>>(resp.Content.ToString());
            gv.payment_types = payment_types;
        }

        var res = await http.ApiGetOData("BusinessBranchPaymentType");
        if (res.IsSuccess)
        {
            business_branch_payment_types = JsonSerializer.Deserialize<List<BusinessBranchPaymentTypeModel>>(res.Content.ToString());
        }
        is_loading = false;
    }

    async Task Activebutton(BusinessBranchModel b)
    {
        b.is_change_status = true;
        await Task.Delay(1000);
        b.status = !b.status;

        var resp = await http.ApiPost($"BusinessBranch/Save", b);
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MudBlazor.Severity.Success);
        }
        b.is_change_status = false;
    }

    void OnEdit(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"paymenttype/edit/{id}");
        is_loading_data = false;
    }

    void Clone_Click(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"paymenttype/clone/{id}");
        is_loading_data = false;
    }

    async Task OnDelete(PaymentTypeModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Delete Record"], lang["Are you sure you want to delete this record?"]))
        {
            var resp = await http.ApiPost($"PaymentType/delete/{p.id}");
            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add(lang["Delete record successfully"], MudBlazor.Severity.Success);
        }
        p.is_loading = false;
    }

    async Task OnRestore(PaymentTypeModel p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Restore Record"], lang["Are you sure you want to restore this record?"]))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add(lang["Restore record successfully"], MudBlazor.Severity.Success);
        }
        p.is_loading = false;
    }

    async Task OnToogleStatus(PaymentTypeModel p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }

    async Task OnToogleStatusLabel(PaymentTypeModel p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }

    async Task SaveStatus(PaymentTypeModel p)
    {
        var resp = await http.ApiPost($"PaymentType/status/{p.id}");
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MudBlazor.Severity.Success);
            await LoadData();
        }
    }

    async Task ViewClick(ModuleViewModel m)
    {
        state.filters.Clear();
        state.filters = m.filters;
        state.pager.order_by = m.default_order_by;
        state.pager.order_by_type = m.default_order_by_type;
        state.page_title = m.title;
        state.pager.current_page = 1;
        await LoadData();
    }
}





