@inject IHttpService http;
@inject ISnackbar toast;
@inject IDialogService dialog;
@inject IStringLocalizer<Resource> lang
<div class="cus_appbar">
    <MudAppBar Color="@MudBlazor.Color.Inherit" Fixed="false" Dense="true" Elevation="25">
        <MudSpacer />
        <MudButton Variant="Variant.Filled" OnClick="@OnAddSlideShow" EndIcon="@Icons.Material.Filled.Add" Color="@MudBlazor.Color.Info" Size="Size.Medium">Add New</MudButton>
    </MudAppBar>
</div>
<Spacing Number="10"/>
@if (is_loading)
{
    <Spinner />
}
else
{
    if (models.Any())
    {

        <MudCarousel Class="mud-width-full" ItemsSource="@models" Context="d" Style="height:60vh;" ShowArrows="true" ShowBullets="true" AutoCycle="false">
            <ItemTemplate>
                <div style="        background-image: linear-gradient( 252 252 252 / 46%), rgba(225 210 210 / 56%) ), url( @http.ImageUrl( d.photo) );
        height: 600px;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        position: relative;
    ">
                    <div class="d-flex align-content-center flex-wrap justify-center" style="height:100%">
                        <div>
                            <MudText Class="mx-auto" Typo="Typo.h6">@d.caption</MudText>
                            <div class="d-flex justify-center">
                                <div> <MudButton OnClick="@(()=>OnEditSlideshow(d))" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit">@lang["Edit"]</MudButton></div>
                                <div class="ml-1"><MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Delete" Color="MudBlazor.Color.Error" OnClick="@(()=>OnDelete(d))">@lang["Delete"]</MudButton></div>
                            </div>
                        </div>
                    </div>
    </div>
                    
            </ItemTemplate>
        </MudCarousel>


    }
    else
    {
        <MudText Typo="Typo.body2">There is no slideshow image </MudText>
    }
}

@code {
    [Parameter]
    public Guid business_branch_id { get; set; }

    List<CustomerDisplaySlideShowModel> models = new();
    BusinessBranchSettingModel setting_model = new();
    bool is_loading;

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task OnAddSlideShow()
    {

        var parameters = new DialogParameters { ["model"] = new CustomerDisplaySlideShowModel() };

        var d = dialog.Show<ComAddCustomerDisplay>("Add New", parameters);
        var result = await d.Result;

        if (!result.Cancelled)
        {

            models.Add((CustomerDisplaySlideShowModel)result.Data);
            await SaveSetting();
            StateHasChanged();
        }
    }


    async Task OnEditSlideshow(CustomerDisplaySlideShowModel model)
    {

        var parameters = new DialogParameters { ["model"] = model };

        var d = dialog.Show<ComAddCustomerDisplay>(lang["Edit"], parameters);
        var result = await d.Result;

        if (!result.Cancelled)
        {
            model= (CustomerDisplaySlideShowModel)result.Data;
            await SaveSetting();
            StateHasChanged();
        }
    }   

    async Task OnDelete(CustomerDisplaySlideShowModel model)
    {

        bool? result = await dialog.ShowMessageBox(
            "Warning", 
            lang["Are you sure you want to delete this record?"], 
            yesText:lang["Delete"], cancelText:lang["Cancel"]);


        if (result!=null)
        {
            models.Remove(model);
            await SaveSetting();
            StateHasChanged();
        }
    }

    async Task SaveSetting(){
        setting_model.setting_value = JsonSerializer.Serialize(models);
            await http.ApiPost("BusinessBranchSetting/save", setting_model);
    }


    async Task LoadData()
    {

        var resp = await http.ApiGetOData($"BusinessBranchSetting?$filter=setting_id eq 97 and business_branch_id eq {business_branch_id}");
        if (resp.IsSuccess)
        {

            var data = JsonSerializer.Deserialize<List<BusinessBranchSettingModel>>(resp.Content.ToString());
            if (data.Any())
            {
                setting_model = data.FirstOrDefault();
                models = JsonSerializer.Deserialize<List<CustomerDisplaySlideShowModel>>(data.FirstOrDefault().setting_value);
                
            }
        }
        else
        {
            toast.Add(lang["Load customer display data fail."], MudBlazor.Severity.Warning);
        }


    }

    void OnDeleted(CustomerDisplaySlideShowModel d)
    {
        models.Remove(d);
    }


}
