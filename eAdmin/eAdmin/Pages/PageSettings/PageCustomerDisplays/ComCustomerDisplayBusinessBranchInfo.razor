@inject IHttpService http;
@inject IStringLocalizer<Resource> lang
@if (is_loading)
{
    <Spinner/>
}else
{
<div style="background-image: linear-gradient( rgba(0 0 0 / 46%), rgba(0 0 0 / 39%) ), url(@image_url);
        height: 600px;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        position: relative;
    ">
    <div class="d-flex justify-center" style="text-align:center;">
        <div>
            <div>
                <Spacing Number="50" />
                <img src="@(http.ImageUrl( model.logo))" class="image_logo_bussiness"/>
            </div>
            <Spacing Number="10"/>
            <div>
                <MudText Typo="Typo.h6" Style="color:#fff;">
                    @model.business_branch_name_en
                </MudText>
                <MudText Typo="Typo.body2" Style="color:#fff;">
                    @model.phone_1
                    @if (!string.IsNullOrEmpty(model.phone_2))
                    {
                        <span>@model.phone_2</span>
                    }
                </MudText>
                @if (!string.IsNullOrEmpty(model.email))
                {
                    <MudText Typo="Typo.body2" Style="color:#fff;">@model.email</MudText>
                }
                @if (!string.IsNullOrEmpty(model.address_en))
                {
                    <MudText Typo="Typo.body2" Style="color:#fff;">Address:  @model.address_en</MudText>
                }
                <Spacing Number="10" />
            </div>
            <div>
                <ComFileUploadButton label="@lang["Change Background"]" ImageUrlChanged="@OnUploadBackground"/> 
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter] 
    public BusinessBranchModel model { get; set; }

    BusinessBranchSettingModel setting = new();

    string image_url = "";
    bool is_loading;

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {

        var resp = await http.ApiGetOData($"BusinessBranchSetting?$filter=setting_id eq 98 and business_branch_id eq {model.id}");
        if (resp.IsSuccess)
        {

            var data = JsonSerializer.Deserialize<List<BusinessBranchSettingModel>>(resp.Content.ToString());
            if (data.Any())
            {
                setting = data.FirstOrDefault();
                image_url = http.ImageUrl(setting.setting_value);
            }
        }



    }

    async Task OnUploadBackground(string image_name)
    {
        setting.setting_value = image_name; 
        image_url = http.ImageUrl( image_name);
        await SaveSetting();
        StateHasChanged();
    }
    async Task SaveSetting(){
         
            await http.ApiPost("BusinessBranchSetting/save", setting);
    }
    

}