@page "/pricerule"
@inherits PageCore

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@(lang["Price Rule"])"></Title>
    <PageContainer roles="@gv.GetRole("price_rule_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Price Rule"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <LinkButton url="pricerule/new" icon="add" background="uk-button-primary">@lang["New"]</LinkButton>

                </MudHidden>

                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <LinkButton url="pricerule/new" icon="add" background="uk-button-primary"></LinkButton>

                </MudHidden>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var d in gv.business_branch_by_role)
                {
                    <div class="container-layout">
                        <div class="title-header">
                            <div class="uk-panel">
                                <div class="uk-float-left">
                                    <span>
                                        @d.business_branch_name_en
                                    </span>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div>
                            <table class="uk-table cus_hearder_table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <Th>@lang["Name"]</Th>
                                    <Th>
                                        @lang["Is Default"]                                        
                                    </Th>
                                    <th>
                                        @lang["Status"]
                                    </th>
                                    <th>

                                    </th>
                                </tr>
                                @foreach (var bp in models.Where(r =>r.business_branch_id == d.id))
                                { 
                                        <tr>
                                            <td>@bp.price_rule?.price_name</td>
                                            <td>
                                                <ComInputCheckBox is_read_only="@bp.is_default" value="@bp.is_default" valueChanged="@(()=>CheckIsDefault(bp))" />
                                            </td>
                                            <td>
                                                <LabelActive is_visible="@bp.price_rule.status"/>
                                                <LabelInActive is_visible="@(!bp.price_rule.status)"/>
                                            </td>
                                            <TdActions is_loading="@bp.is_loading">
                                                <TableActionItem roles="@gv.GetRole("price_rule_edit")" icon="edit" is_visible="@(!bp.is_deleted)" OnClick="@(()=>OnEdit(bp))">@lang["Edit"]</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_add")" icon="file_copy" OnClick="@(()=>Clone_Click(bp))">@lang["Clone"]</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_delete")" icon="delete" is_visible="@(!bp.is_deleted && !bp.is_default)" OnClick="@(() => OnDelete(bp))">Delete</TableActionItem>
                                            </TdActions>
                                        </tr> 
                                }
                            </table>
                        </div>
                    </div>
                }
            </UIGridCenter>
        </PageBody>
    </PageContainer>
}

@code{
    List<BusinessBranchPriceRule> models = new List<BusinessBranchPriceRule>();

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading = true;
        var res = await http.ApiGetOData("BusinessBranchPriceRule?$expand=price_rule($filter=is_deleted eq false and status eq true)");
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<BusinessBranchPriceRule>>(res.Content.ToString());
        }

        var price_rule = await http.ApiGetOData("PriceRule?$filter=is_deleted eq false and status eq true");
        if (res.IsSuccess)
        {
            gv.price_rules = JsonSerializer.Deserialize<List<PriceRuleModel>>(price_rule.Content.ToString());
        }

        is_loading = false;
    }




    async Task OnToogleStatus(BusinessBranchPriceRule p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }

    async Task OnToogleStatusLabel(BusinessBranchPriceRule p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }

    async Task SaveStatus(BusinessBranchPriceRule p)
    {
        var PriceRule = new BusinessBranchPriceRule();
        PriceRule = p;
        PriceRule.status = !PriceRule.status;
        var resp = await http.ApiPost($"BusinessBranchPriceRule/status/{p.business_branch_id}/{p.price_rule_id}");
        if (resp.IsSuccess)
        {
            toast.Add(lang["Change status successfully"], MudBlazor.Severity.Success);
        }
    }


    void OnEdit(BusinessBranchPriceRule p)
    {
        is_loading_data = true;
        nav.NavigateTo($"pricerule/edit/{p.price_rule_id}");
        is_loading_data = false;
    }
    void Clone_Click(BusinessBranchPriceRule p)
    {
        is_loading_data = true;
        nav.NavigateTo($"pricerule/clone/{p.price_rule_id}");
        is_loading_data = false;
    }
    async Task OnDelete(BusinessBranchPriceRule p)
    {
        p.is_loading = true;
        if (await js.Confirm(lang["Delete Record"], lang["Are you sure you want to delete this record?"]))
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/delete/{p.business_branch_id}/{p.price_rule_id}");
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Delete record successfully"], MudBlazor.Severity.Success);
            }
            else {
                toast.Add(resp.Content.ToString(), MudBlazor.Severity.Warning);
            }
        }
        p.is_loading = false;
    }

    async Task CheckIsDefault(BusinessBranchPriceRule p)
    {
        if (p.is_default)
        {
            toast.Add(lang["Your cannot remove the default"], MudBlazor.Severity.Warning);
        }
        else
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/is_default/{p.business_branch_id}/{p.price_rule_id}");
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add(lang["Update data successfully"], MudBlazor.Severity.Success);
            }
        }

    }
}

