@page "/pricerule"
@inherits PageCore;
@inject IStringLocalizer<Resource> lang

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@(lang["Price Rule"])"></Title>
    <PageContainer roles="@gv.GetRole("price_rule_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @lang["Price Rule"]
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <LinkButton url="pricerule/new" icon="add" background="uk-button-primary" Class_Name="button-large">@lang["New"]</LinkButton>
                <RefreshButton OnClick="@(async()=>await LoadBusinessBranch())" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var d in business_branches.Where(r => r.is_deleted == false).ToList())
                {
                    <div class="container-layout">
                        <div class="title-header">
                            <div class="uk-panel">
                                <div class="uk-float-left">
                                    <span>
                                        @d.business_branch_name_en
                                    </span>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div>
                            <table class="uk-table cus_hearder_table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <Th>@lang["Name"]</Th>
                                    <Th>
                                        @lang["Is Default"]                                        
                                    </Th>
                                </tr>
                                @foreach (var bp in d.business_branch_prices.Where(r => r.is_deleted == false && r.business_branch_id == d.id))
                                {
                                    @foreach (var s in price_rules.Where(r => r.id == bp.price_rule_id))
                                    {
                                        <tr>
                                            <td>@s.price_name</td>
                                            <td>
                                                <ComInputCheckBox is_read_only="@bp.is_default" value="@bp.is_default" valueChanged="@(()=>CheckIsDefault(bp))" />
                                            </td>
                                        </tr>
                                    }
                                }
                            </table>
                        </div>
                    </div>
                }
            </UIGridCenter>
        </PageBody>
    </PageContainer>
}

@code{
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    List<PriceRuleModel> price_rules = new List<PriceRuleModel>();

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        is_loading = false;
    }

    async Task LoadData()
    {
        var res = await http.ApiGetOData("PriceRule?$expand=business_branch_prices");
        if (res.IsSuccess)
        {
            price_rules = JsonSerializer.Deserialize<List<PriceRuleModel>>(res.Content.ToString());
        }
    }

    async Task LoadBusinessBranch()
    {
        is_loading = true;
        var resp = await http.ApiGetOData($"BusinessBranch?$expand=business_branch_prices&$filter=is_deleted eq false");
        if (resp.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(resp.Content.ToString());
        }
        is_loading = false;
    }

    async Task OnToogleStatus(BusinessBranchPriceRule p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }

    async Task OnToogleStatusLabel(BusinessBranchPriceRule p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }

    async Task SaveStatus(BusinessBranchPriceRule p)
    {
        var PriceRule = new BusinessBranchPriceRule();
        PriceRule = p;
        PriceRule.status = !PriceRule.status;
        var resp = await http.ApiPost($"BusinessBranchPriceRule/status/{p.business_branch_id}/{p.price_rule_id}");
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            await LoadBusinessBranch();
        }
    }


    void OnEdit(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"PriceRule/edit/{id}");
        is_loading_data = false;
    }
    void Clone_Click(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"PriceRule/clone/{id}");
        is_loading_data = false;
    }
    async Task OnDelete(BusinessBranchPriceRule p)
    {
        p.is_loading = true;
        if (await js.Confirm("Delete Price Rule", "Are you sure you want to delete this record?"))
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/delete/{p.business_branch_id}/{p.price_rule_id}");
            if (resp.IsSuccess)
            {
                await LoadBusinessBranch();
                toast.Add("Delete Price Rule successfully", MatToastType.Success);
            }
        }
        p.is_loading = false;
    }

    async Task CheckIsDefault(BusinessBranchPriceRule p)
    {
        if (p.is_default)
        {
            toast.Add("Can not Change Is Default. ", MatToastType.Warning);
        }
        else
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/is_default/{p.business_branch_id}/{p.price_rule_id}");
            if (resp.IsSuccess)
            {
                await LoadBusinessBranch();
                toast.Add("Change Is Default successfully", MatToastType.Success);
            }
        }

    }
}

