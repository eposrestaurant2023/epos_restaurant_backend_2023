@page "/pricerule"
@inherits PageCore;

<Loading is_loading="@(is_loading || is_loading_data)" />

@if (!is_loading)
{
    <Title Value="@state.page_title"></Title>
    <PageContainer roles="@gv.GetRole("price_rule_management")">
        <div style="word-break:break-word">
            @ControllerApi
        </div>
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        Price Rule
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <LinkButton url="PriceRule/new" icon="add" roles="@gv.GetRole("price_rule_add")" background="uk-button-primary" Class_Name="button-large button-create">New</LinkButton>
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <UIGridCenter>
                @foreach (var d in business_branches.Where(r => r.is_deleted == false).ToList())
                {
                    <div class="container-layout">
                        <div class="title-header">
                            <div class="uk-panel">
                                <div class="uk-float-left">
                                    <span>
                                        @d.business_branch_name_en
                                    </span>
                                </div>
                                <div class="uk-float-right">
                                    <div>
                                        <span>
                                            <LabelActive roles="@gv.GetRole("business_edit")" OnClick="@(()=>Activebutton(d))" is_visible="@d.status" is_loading="@d.is_change_status" />
                                            <LabelInActive roles="@gv.GetRole("business_edit")" OnClick="@(()=>Activebutton(d))" is_visible="@(!d.status)" is_loading="@d.is_change_status" />
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div>
                            <table class="uk-table cus_hearder_table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                                <tr>
                                    <ThAuto>Name</ThAuto>
                                    <ThCenter>Status</ThCenter>
                                    <Th></Th>
                                </tr>
                                @foreach (var bp in business_branch_prices.Where(r=>r.is_deleted == false && r.business_branch_id == d.id))
                                {
                                    @foreach (var s in price_rules.Where(r => r.id == bp.price_rule_id))
                                    {
                                        <tr>
                                            <td>
                                                <ComAuthorize OnClick="@(()=>OnEdit(s.id))" roles="@gv.GetRole("price_rule_edit")">
                                                    @s.price_name
                                                </ComAuthorize>
                                            </td>
                                            <TdCenter>
                                                @if (bp.is_default)
                                                {
                                                    <LabelDeleted is_visible="@bp.is_deleted" />
                                                    <LabelActive is_visible="@(!bp.is_deleted && bp.status)" is_loading="@s.is_change_status" />
                                                    <LabelInActive is_visible="@(!bp.is_deleted && !bp.status)" is_loading="@s.is_change_status" />
                                                }
                                                else
                                                {
                                                    <LabelDeleted is_visible="@bp.is_deleted" />
                                                    <LabelActive is_visible="@(!bp.is_deleted && bp.status)" OnClick="(() => OnToogleStatusLabel(bp))" roles="@gv.GetRole("price_rule_edit")" is_loading="@s.is_change_status" />
                                                    <LabelInActive is_visible="@(!bp.is_deleted && !bp.status)" OnClick="(() => OnToogleStatusLabel(bp))" roles="@gv.GetRole("price_rule_edit")" is_loading="@s.is_change_status" />
                                                }
                                            </TdCenter>
                                            <TdActions is_loading="@s.is_loading">
                                                <TableActionItem roles="@gv.GetRole("price_rule_edit")" icon="edit" is_visible="@(!bp.is_deleted)" OnClick="@(()=>OnEdit(s.id))">Edit</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_add")" icon="file_copy" OnClick="@(()=>Clone_Click(s.id))">Clone</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_edit")" icon="highlight_off" is_visible="@(bp.status && !bp.is_deleted && !bp.is_default)" OnClick="@(()=>OnToogleStatus(bp))">Inactive</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_edit")" icon="check" is_visible="@(!bp.status && !bp.is_deleted && !bp.is_default)" OnClick="@(() => OnToogleStatus(bp))">Active</TableActionItem>
                                                <TableActionItem roles="@gv.GetRole("price_rule_delete")" icon="delete" is_visible="@(!bp.is_deleted)" OnClick="@(() => OnDelete(bp))">Delete</TableActionItem>
                                            </TdActions>
                                        </tr>
                                    }
                                }
                            </table>
                        </div>
                    </div>
                }
            </UIGridCenter>
        </PageBody>
    </PageContainer>
}
@code{

    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    List<PriceRuleModel> price_rules = new List<PriceRuleModel>();
    List<BusinessBranchPriceRule> business_branch_prices = new List<BusinessBranchPriceRule>();
    string controller_api = "PriceRule";
    string StateKey = "278484567G21458loiuytytkjhTonB3PCz2Ts";
    string api_query = "?$expand=business_branch_prices";
    string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by))
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}{api_query}&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;

        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "Price Rule";
            var default_view = gv.GetDefaultModuleView("page_price_rule");
            if (default_view != null)
            {
                state.page_title = default_view.title;
                state.filters = default_view.filters;
            }
        }
        await LoadData();
        await LoadBusinessBranch();

    }

    async Task LoadData(string api_url = "")
    {
        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
        }
        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            price_rules = JsonSerializer.Deserialize<List<PriceRuleModel>>(resp.Content.ToString());
        }

        var res = await http.ApiGetOData($"BusinessBranchPriceRule?$filter=is_deleted eq false");
        if (res.IsSuccess)
        {
            business_branch_prices = JsonSerializer.Deserialize<List<BusinessBranchPriceRule>>(res.Content.ToString());
        }
        is_loading = false;
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$filter=is_deleted eq false");
        business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
    }

    async Task Activebutton(BusinessBranchModel b)
    {
        b.is_change_status = true;
        await Task.Delay(1000);
        b.status = !b.status;

        var resp = await http.ApiPost($"BusinessBranch/Save", b);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
        }
        b.is_change_status = false;
    }

    void OnEdit(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"PriceRule/edit/{id}");
        is_loading_data = false;
    }

    void Clone_Click(int id)
    {
        is_loading_data = true;
        nav.NavigateTo($"PriceRule/clone/{id}");
        is_loading_data = false;
    }

    async Task OnDelete(BusinessBranchPriceRule p)
    {
        //p.is_loading = true;
        if (await js.Confirm("Delete Price Rule", "Are you sure you want to delete this record?"))
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/delete/{p.business_branch_id}/{p.price_rule_id}");
            if (resp.IsSuccess)
            {
                await LoadData();
                toast.Add("Delete Price Rule successfully", MatToastType.Success);
            }
        }
        //p.is_loading = false;
    }

    async Task OnRestore(BusinessBranchPriceRule p)
    {
        //p.is_loading = true;
        if (await js.Confirm("Restore Price Rule", "Are you sure you want to restore this record?"))
        {
            var resp = await http.ApiPost($"BusinessBranchPriceRule/delete/{p.business_branch_id}/{p.price_rule_id}");

            if (resp.IsSuccess)
            {
                await LoadData();
            }
            toast.Add("Restore Price Rule successfully", MatToastType.Success);
        }
        //p.is_loading = false;
    }

    async Task OnToogleStatus(BusinessBranchPriceRule p)
    {
        //p.is_loading = true;
        await SaveStatus(p);
        //p.is_loading = false;
    }

    async Task OnToogleStatusLabel(BusinessBranchPriceRule p)
    {
        //p.is_change_status = true;
        await SaveStatus(p);
        //p.is_change_status = false;
    }

    async Task SaveStatus(BusinessBranchPriceRule p)
    {
        var PriceRule = new BusinessBranchPriceRule();
        PriceRule = p;
        PriceRule.status = !PriceRule.status;
        var resp = await http.ApiPost($"BusinessBranchPriceRule/status/{p.business_branch_id}/{p.price_rule_id}");
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            await LoadData();
        }
    }
}
