@page "/pricerule/new"
@page "/pricerule/edit/{id:int}"
@page "/pricerule/clone/{clone_id:int}"
@inject IJSRuntime js
@inherits PageCore;
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Outlet & Station"></Title>
    <PageContainer roles="@gv.GetRole($"{(id > 0 ? "price_rule_edit" : "price_rule_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>
                            @if (clone_id > 0)
                            {
                                @("Clone : " + price.price_name)
                            }
                            else
                            {
                                @(id>0? $"Edit : {price.price_name}" : "New Price Rule")
                            }
                        </span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true"></HeaderRight>
        </PageHeader>
        <EditForm Model="@price" OnValidSubmit="@SavePriceRule_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                    <UIContainerBox Title="Price Rule">
                        <TextInput label="Name" @bind-text="@price.price_name">
                            <ValidationMessage For="@(()=>price.price_name)" />
                        </TextInput>
                        <SelectStatus @bind-selected_value="@price.status" />
                        @foreach (var b in business_branches)
                        {
                            <div><ComInputCheckBox is_read_only="@(b.business_branch_prices.Where(r=>r.price_rule_id == id && r.business_branch_id == b.id && r.is_default == true).Count() > 0)" @bind-value="b.is_selected" label="@b.business_branch_name_en" label_inline="false" /></div>
                        }
                    </UIContainerBox>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="pricerule" />
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}

@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    PriceRuleModel price = new PriceRuleModel();
    List<BusinessBranchModel> business_branches = new List<BusinessBranchModel>();
    string ControllerApi = "PriceRule";
    string page_title = "";
    public string api_url
    {
        get
        {
            string query = ControllerApi;
            query = query + $"({(id == 0 ? clone_id : id)})?";
            query = query + "$expand=business_branch_prices($select=price_rule_id,business_branch_id,is_default)";
            return query;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        if (clone_id > 0)
        {
            page_title = "Clone : " + price.price_name;
        }
        else
        {
            page_title = id > 0 ? $"Edit : {price.price_name}" : page_title = "New Price Rule";
        }
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {
            price = JsonSerializer.Deserialize<PriceRuleModel>(resp.Content.ToString());
            if (clone_id > 0)
            {
                price.id = 0;
                price.created_date = DateTime.Now;
                foreach (var s in price.business_branch_prices)
                {
                    s.is_default = false;
                }
            }
        }
        is_loading_data = false;
    }

    async Task LoadBusinessBranch()
    {
        is_loading_data = true;
        var resp = await http.ApiGetOData("BusinessBranch?$expand=business_branch_prices($select=price_rule_id,business_branch_id,is_default)&$filter=is_deleted eq false");
        if (resp.IsSuccess)
        {
            business_branches = JsonSerializer.Deserialize<List<BusinessBranchModel>>(resp.Content.ToString());

            foreach (var bp in price.business_branch_prices)
            {
                foreach (var b in business_branches.Where(r => r.id == bp.business_branch_id))
                {
                    b.is_selected = true;
                }
            }
        }
        is_loading_data = false;
    }

    async Task SavePriceRule_Click()
    {
        is_saving = true;
        price.business_branch_prices.Clear();
        foreach (var a in business_branches.ToList())
        {
            if (a.is_selected)
            {
                price.business_branch_prices.Add(new BusinessBranchPriceRule()
                {
                    business_branch_id = a.id,
                    price_rule_id = id,
                    is_default = a.business_branch_prices.Where(r => r.business_branch_id == a.id && r.price_rule_id == id).Select(r => r.is_default).FirstOrDefault()
                });
            }
        }
        if (business_branches.Where(r => r.is_selected == true).Count() > 0)
        {
            var post = await http.ApiPost("PriceRule/Save", price);
            if (post.IsSuccess)
            {
                toast.Add("Save Successfully!", MatToastType.Success);
                nav.NavigateTo("pricerule");
                price = new PriceRuleModel();
            }
            else
            {
                toast.Add(post.Content.ToString(), MatToastType.Warning);
            }
        }
        else
        {
            toast.Add("Please choose business branch.", MatToastType.Warning);
        }
        is_saving = false;
    }
}
