@page "/configure"
@inherits PageCore

<Loading is_loading="@is_loading" />


@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}
@if (!is_loading)
{
    <Title Value="General Setting"></Title>
    <PageContainer roles="@gv.GetRole("general_setting_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @state.page_title
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="false" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Table OnPagerChange="@SelectChange"
                   OnPageChange="@ChangePager"
                   isLoading="@is_loading_data"
                   PerPage="@state.pager.per_page"
                   TotalItem="@TotalRecord"
                   CurrentPage="@state.pager.current_page"
                   ShowPaging="true"
                   ShowCounter="true"
                   ShowPager="true"
                   ShowTotalCount="true"
                   ShowPagination="true"
                   Items="@settings"
                   EmptyIcon="setting"
                   EmptyText="No Data Found">
                <TableHeader>
                    @HeaderTemplate("setting_title", "Setting title")
                    @HeaderTemplate("setting_value", "setting value")
                    <ThAuto>Descript</ThAuto>
                    <th></th>
                </TableHeader>
                <RowTemplate Context="s">
                    <td>
                        @s.setting_title
                    </td>
                    <td>
                        <div class="text-pre-wrap">@s.setting_value</div>
                    </td>
                    <td>
                        <div class="text-pre-wrap">@s.setting_description</div>
                    </td>
                    <td>
                        <Icon roles="@gv.GetRole("general_setting_edit")" title="Edit" icon="edit" OnClick="@(()=>OnEdit(s))" />
                    </td>
                </RowTemplate>
            </Table>
        </PageBody>
    </PageContainer>
    @if (is_open)
    {
        <ComEditSetting setting="setting" is_dialog_open="is_open" Cancel_click="@(()=> { is_open = false;setting = new SettingModel(); })" title="@setting.setting_title" SaveSetting="Save_Click" />
    }
}

@code{
    [Parameter] public string keyword { get; set; } = "";
    List<SettingModel> settings = new List<SettingModel>();
    SettingModel setting = new SettingModel();
    PagerModel pg = new PagerModel();
    bool is_open;
    int TotalRecord = 0;
    string StateKey = "278484567Gs47775KJHGytkjhTonB2547935";
    string controller_api = "Setting";

    public string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by))
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "All Setting";
        }
        await LoadData(state.api_url);
        is_loading = false;
    }

    void OnEdit(SettingModel s)
    {
        title = "Edit :" + s.setting_title;
        is_open = true;
        setting = s;
    }

    async Task Save_Click(SettingModel s)
    {
        var post = await http.ApiPost(controller_api + "/save", s);
        if (post.IsSuccess)
        {
            toast.Add("Save Successfully", MatToastType.Success);
            setting = new SettingModel();
            is_open = false;
        }
    }

    async Task LoadData(string api_url = "")
    {
        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
            await SetState(StateKey, state);
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            settings = JsonSerializer.Deserialize<List<SettingModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }
        is_loading = false;
    }

    async Task OrderBy(string col_name = "")
    {

        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");

        await LoadData();
    }

    async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task ChangePager(int _page)
    {
        state.pager.current_page = _page;
        await LoadData();
    }

    async Task OnSearch(string keyword)
    {
        state.pager = new PagerModel();
        SetFilterValue2(state.filters, "keyword", keyword);
        await LoadData();
    }
}


