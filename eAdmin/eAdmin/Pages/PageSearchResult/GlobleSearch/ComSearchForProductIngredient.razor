@inherits PageCore;

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}

@if (products.Count() > 0)
{

    <h3 class="title-search">
        @lang["Ingredient"]
    </h3>
    <hr />
    <Table Items="@products"
           PerPage="@state.pager.per_page"
           TotalItem="@TotalRecord"
           CurrentPage="@state.pager.current_page"
           OnPagerChange="@SelectChange"
           OnPageChange="@ChangePager"
           isLoading="@is_loading_data"
           ShowPager="true"
           ShowCounter="true"
           ClassName="uk-table-small uk-table-striped uk-table-hover"
           ScrollClass="uk-overflow-auto">
        <TableHeader>
            <ThCenter>@lang["Image"]</ThCenter>
            @HeaderTemplate("product_code", lang["Code"], "uk-text-center")
            @HeaderTemplate("product_name_en", lang["Name En(Kh)"], "col-auto")
            @HeaderTemplate("product_category/product_category_en", lang["Category"])
            <ThCenter>@lang["Unit"]</ThCenter>
            <ThCenter>@lang["Quantity"]</ThCenter>
            <ThRight>@lang["Cost"]</ThRight>
            <ThRight>
                @lang["Status"]
            </ThRight>
            <th class="uk-width-auto"></th>
        </TableHeader>
        <RowTemplate Context="p">
            <TdCenter>
                <Image ImageUrl="@http.ImageUrl(p.photo)" PopupImageUrl="@http.ImageUrl(p.photo)" IsLightBox="true" IsBackgroundImage="true" Width="50px" Height="50px" />
            </TdCenter>
            <TdCenter>
                <div>
                    <ComAuthorize roles="@gv.GetRole("ingredient_view")" url="@($"ingredient/{p.id}")">@p.product_code</ComAuthorize>
                </div>
            </TdCenter>
            <td>
                <div>
                    <ComAuthorize roles="@gv.GetRole("ingredient_view")" url="@($"ingredient/{p.id}")">@p.product_name_en @(!string.IsNullOrEmpty(p.product_name_kh)?$"({p.product_name_kh})":"")</ComAuthorize>
                    <div><LabelMenuProduct is_visible="@p.is_menu_product" /></div>
                </div>

            </td>
            <td>@p.product_category?.product_category_en</td>
            <TdCenter>@p.unit?.unit_name</TdCenter>
            <TdCenter>
                @p.quantity.ToString(gv.quantity_format)
            </TdCenter>
            <TdRight>
                @p.cost.ToString(gv.currency_format)
            </TdRight>
            <TdRight>
                <LabelDeleted is_visible="@p.is_deleted" />
                <LabelActive is_visible="@(!p.is_deleted && p.status)" roles="@gv.GetRole("product_edit")" is_loading="@p.is_loading" />
                <LabelInActive is_visible="@(!p.is_deleted && !p.status)" roles="@gv.GetRole("product_edit")" is_loading="@p.is_loading" />
                <LabelProductInventoryStatus product="@p" is_product_model="true" />
            </TdRight>
            <TdCenter>
                <Icon icon="visibility" url="@($"product/{p.id}")"/>
            </TdCenter>
        </RowTemplate>
    </Table>

}
@code {

    string api_controller = "product";
    [Parameter] public string keyword { get; set; }
    List<ProductModel> products = new List<ProductModel>();



    int TotalRecord = 0;

    public string ControllerApi
    {
        get
        {
            if (state.pager.order_by == "")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string query = "$select=id,is_out_of_stock,is_low_inventory,is_over_stock,product_name_en,product_name_kh,product_code,status,is_deleted,cost,quantity,photo";
            query = query + "&$expand=unit($select=unit_name,id),product_category($select= id,product_category_en,product_category_kh),product_menus($expand=menu($select=id,menu_name_en))";
            string url = $"{api_controller}?{query}&keyword={keyword}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters) + " and is_ingredient_product eq true";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state.filters.Clear();
        state.pager.per_page = 10;
        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });
        await LoadData();

        is_loading = false;
    }

    async Task LoadData()
    {

        string api_url = $"{ControllerApi}";


        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            products = JsonSerializer.Deserialize<List<ProductModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }

    }

    async Task OrderBy(string col_name = "")
    {
        is_loading_data = true;
        state.pager.current_page = 1;
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
        is_loading_data = false;
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task ChangePager(int _page)
    {
        is_loading_data = true;
        state.pager.current_page = _page;

        await LoadData();
        is_loading_data = false;
    }


}
