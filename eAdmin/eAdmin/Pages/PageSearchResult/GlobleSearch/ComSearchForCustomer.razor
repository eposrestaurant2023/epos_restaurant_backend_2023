@inherits PageCore;

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}

@if (customer_List.Count() > 0)
{

    <h3 class="title-search">
        @lang["Customers"]
    </h3>
    <hr />
    <Table Items="@customer_List"
           PerPage="@state.pager.per_page"
           TotalItem="@TotalRecord"
           CurrentPage="@state.pager.current_page"
           OnPagerChange="@SelectChange"
           OnPageChange="@ChangePager"
           isLoading="@is_loading_data"
           ShowPager="true"
           ShowCounter="true"
           ClassName="uk-table-small uk-table-striped uk-table-hover"
           ScrollClass="uk-overflow-auto"
           EmptyText="There is no record.">
        <TableHeader>
            <ThCenter>@lang["Image"]</ThCenter>
            @HeaderTemplate("customer_code", lang["Code"], "uk-text-center")
            @HeaderTemplate("customer_name_en", lang["Name Kh"], "col-auto")
            @HeaderTemplate("phone_1", lang["Phone"], "uk-text-center")
            @HeaderTemplate("gender", lang["Gender"], "uk-text-center")
            @HeaderTemplate("total_receivable", lang["Total Paid"], "uk-text-right")
            <ThCenter>@lang["Status"]</ThCenter>
            <th class="uk-width-auto"></th>
        </TableHeader>
        <RowTemplate Context="p">
            <TdCenter>
                <Image ImageUrl="@http.ImageUrl(p.photo)" PopupImageUrl="@http.ImageUrl(p.photo)" IsLightBox="true" IsBackgroundImage="true" Width="50px" Height="50px" />
            </TdCenter>
            <TdCenter>
                <ComAuthorize roles="@gv.GetRole("customer_management")" url="@($"customer/{p.id}")">@p.customer_code</ComAuthorize>

            </TdCenter>
            <td>
                <div>
                    <ComAuthorize roles="@gv.GetRole("customer_management")" url="@($"customer/{p.id}")">@p.customer_name_en (@p.customer_name_kh)</ComAuthorize>
                </div>
                <LabelCustomerBusinessBranchs customer_business_branchs="@p.customer_business_branchs" />
            </td>

            <TdCenter>
                @p.phone_1
            </TdCenter>
            <td>
                @p.gender
            </td>
            <TdRight>
                @p.total_receivable.ToString(gv.currency_format)
            </TdRight>
            <TdCenter>
                <LabelDeleted is_visible="@p.is_deleted" />
                <LabelActive is_visible="@(!p.is_deleted && p.status)"  roles="@gv.GetRole("customer_edit")" is_loading="@p.is_loading" />
                <LabelInActive is_visible="@(!p.is_deleted && !p.status)" roles="@gv.GetRole("customer_edit")" is_loading="@p.is_loading" text="@lang["Inactive"]" />
            </TdCenter>
            <TdCenter>
                <Icon icon="visibility" url="@($"customer/{p.id}")"/>
            </TdCenter>
        </RowTemplate>
    </Table>

}
@code {

    string api_controller = "Customer";
    [Parameter] public string keyword { get; set; }
    List<CustomerModel> customer_List = new List<CustomerModel>();



    int TotalRecord = 0;

    public string ControllerApi
    {
        get
        {
            if (state.pager.order_by == "")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string query = "$select=id,total_receivable,is_deleted,customer_code,customer_name_en,customer_name_kh,gender,email,address,phone_1,phone_2,photo,status ";
            query = query + "&$expand=customer_business_branchs($expand=business_branch($select=id,business_branch_name_en))";
            string url = $"{api_controller}?{query}&keyword={keyword}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state.filters.Clear();
        state.pager.per_page = 10;
        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });
        await LoadData();

        is_loading = false;
    }

    async Task LoadData()
    {

        string api_url = $"{ControllerApi}";


        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            customer_List = JsonSerializer.Deserialize<List<CustomerModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }

    }

    async Task OrderBy(string col_name = "")
    {
        is_loading_data = true;
        state.pager.current_page = 1;
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
        is_loading_data = false;
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task ChangePager(int _page)
    {
        is_loading_data = true;
        state.pager.current_page = _page;

        await LoadData();
        is_loading_data = false;
    }
  

}
