@inherits PageCore;

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}

@if (Stock_Take.Count() > 0)
{

    <h3 class="title-search">
        Stock Take
    </h3>
    <hr />
    <Table Items="@Stock_Take"
           PerPage="@state.pager.per_page"
           TotalItem="@TotalRecord"
           CurrentPage="@state.pager.current_page"
           OnPagerChange="@SelectChange"
           OnPageChange="@ChangePager"
           isLoading="@is_loading_data"
           ShowPager="true"
           ShowCounter="true"
           ClassName="uk-table-small uk-table-striped uk-table-hover"
           ScrollClass="uk-overflow-auto"
           EmptyText="There is no record.">
        <TableHeader>
            @HeaderTemplate("stock_take_date", "Stock Take Date", "uk-text-center")
            @HeaderTemplate("document_number", "Document#", "uk-text-center")
            @HeaderTemplate("referance_number", "Referance#", "uk-text-center")
            @HeaderTemplate("stock_location/stock_location_name", "Stock Location (Business Branch)", "col-auto")
            <ThRight>Total Amount</ThRight>
            <ThRight>Status</ThRight>
            <th class="uk-width-auto"></th>
        </TableHeader>
        <RowTemplate Context="p">
            <TdCenter>@p.stock_take_date.ToString(gv.date_format)</TdCenter>
            <TdCenter>
                <ComAuthorize roles="@gv.GetRole("stock_take_management")" url="@($"stocktake/{p.id}")">
                    @p.document_number
                </ComAuthorize>
            </TdCenter>
            <TdCenter>@p.reference_number</TdCenter>
            <td>
                @p.stock_location?.stock_location_name (@p.business_branch?.business_branch_name_en)
            </td>

            <TdRight>
                @p.total_amount.ToString(gv.main_currency_format)
            </TdRight>
            <TdRight>
                <ComStockTakeStatus model="@p" />
            </TdRight>
            <TdActions is_loading="@p.is_loading">
                <TableActionItem roles="@gv.GetRole("stock_take_management")" icon="visibility" url="@($"stocktake/{p.id}")">View</TableActionItem>
                <TableActionItem roles="@gv.GetRole("stock_take_edit")" icon="edit" is_visible="@(!p.is_deleted && !p.is_fulfilled)" url="@($"stocktake/edit/{p.id}")">Edit</TableActionItem>
            </TdActions>
        </RowTemplate>
    </Table>

}
@code {

    string api_controller = "StockTake";
    [Parameter] public string keyword { get; set; }
    List<StockTakeModel> Stock_Take = new List<StockTakeModel>();



    int TotalRecord = 0;

    public string ControllerApi
    {
        get
        {
            if (state.pager.order_by == "")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string query = "$select=id,document_number,stock_take_date,reference_number,total_amount,is_fulfilled";
            query = query + "&$expand=business_branch($select=business_branch_name_en),stock_location($select=stock_location_name)";
            string url = $"{api_controller}?{query}&keyword={keyword}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state.filters.Clear();
        state.pager.per_page = 10;
        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });
        await LoadData();

        is_loading = false;
    }

    async Task LoadData()
    {

        string api_url = $"{ControllerApi}";


        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            Stock_Take = JsonSerializer.Deserialize<List<StockTakeModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }

    }

    async Task OrderBy(string col_name = "")
    {
        is_loading_data = true;
        state.pager.current_page = 1;
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
        is_loading_data = false;
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task ChangePager(int _page)
    {
        is_loading_data = true;
        state.pager.current_page = _page;

        await LoadData();
        is_loading_data = false;
    }


}
