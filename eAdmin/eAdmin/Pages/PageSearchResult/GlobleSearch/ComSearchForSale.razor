@inherits PageCore;

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}
@if (sale.Count() > 0)
{

    <h3 class="title-search">
       @lang[" Receipt List"]
    </h3>
    <hr />
    <Table Items="@sale"
           PerPage="@state.pager.per_page"
           TotalItem="@TotalRecord"
           CurrentPage="@state.pager.current_page"
           OnPagerChange="@SelectChange"
           OnPageChange="@ChangePager"
           isLoading="@is_loading_data"
           ShowPager="true"
           ShowCounter="true"
           ClassName="uk-table-small uk-table-striped uk-table-hover"
           ScrollClass="uk-overflow-auto"
           EmptyText="There is no record.">
        <TableHeader>
            @HeaderTemplate("document_number",lang["Document#"], "uk-text-center")
            @HeaderTemplate("customer/customer_name", lang["Customer"], "col-auto")
            @HeaderTemplate("business_branch/business_branch_name_en", lang["Business Branch"])
            @HeaderTemplate("outlet/outlet_name_en", lang["Outlet"])
            <ThRight>@lang["Total Amount"]</ThRight>
            <ThRight>@lang["Paid Amount"]</ThRight>
            <ThRight>@lang["Balance"]</ThRight>
            <th class="uk-width-auto"></th>
        </TableHeader>
        <RowTemplate Context="p">
            <TdCenter>
                <div><a href="@("receiptlist/{p.id}")">@p.document_number</a></div>
            </TdCenter>
            <td>
                <ComProfileInfo url="@($"customer/{p.customer_id}")" photo="@p.customer?.photo">@p.customer?.customer_code_name</ComProfileInfo>
            </td>
            <td>
                @p.business_branch?.business_branch_name_en
            </td>
            <td>
                @p.outlet?.outlet_name_en
            </td>
            <TdRight>
                @p.total_amount.ToString(gv.main_currency_format)
            </TdRight>
            <TdRight>
                @p.paid_amount.ToString(gv.main_currency_format)
            </TdRight>
            <TdRight>
                @p.balance.ToString(gv.main_currency_format)
            </TdRight>
            <TdCenter>
                <Icon icon="visibility" OnClick="@(()=>nav.NavigateTo($"receiptlist/{p.id}"))" />
            </TdCenter>
        </RowTemplate>
    </Table>

}
@code {

    string api_controller = "sale";
    [Parameter] public string keyword { get; set; }
    List<SaleModel> sale = new List<SaleModel>();



    int TotalRecord = 0;

    public string ControllerApi
    {
        get
        {
            if (state.pager.order_by == "")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string query = "$select=id,document_number,balance,paid_amount";
            query = query + "&$expand=customer($select=id,customer_name_en,customer_name_kh,customer_code,photo),outlet($select=id,outlet_name_en,outlet_name_kh),business_branch($select=business_branch_name_en,business_branch_name_kh)";
            string url = $"{api_controller}?{query}&keyword={keyword}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state.pager.per_page = 10;
        state.filters.Add(new FilterModel() { key = "is_deleted", value1 = "false" });
        await LoadData();

        is_loading = false;
    }

    async Task LoadData()
    {

        if (state.filters.Where(r => r.key == "business_branch_id").Count() == 0)
        {
            //Business Branch Filter
            state.filters.Add(new FilterModel()
            {
                key = "business_branch_id",
                value1 = gv.business_branch_ids_filter_1,
                filter_title = "Business Branch",
                filter_operator = "multiple",
                state_property_name = "list_selected_values",
                filter_info_text = gv.business_branch_ids_filter_1,
                is_clear_all = true,
                will_remove = true,
                is_show_on_infor = false
            });
        }

        string api_url = $"{ControllerApi}";
        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            sale = JsonSerializer.Deserialize<List<SaleModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }

    }

    async Task OrderBy(string col_name = "")
    {
        is_loading_data = true;
        state.pager.current_page = 1;
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
        is_loading_data = false;
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task ChangePager(int _page)
    {
        is_loading_data = true;
        state.pager.current_page = _page;

        await LoadData();
        is_loading_data = false;
    }


}
