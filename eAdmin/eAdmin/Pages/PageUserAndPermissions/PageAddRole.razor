@page "/role/new"
@page "/role/edit/{id:int}"
@inject IJSRuntime js
@inherits PageCore;

<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Outlet & Station"></Title>
    <PageContainer roles="@gv.GetRole("role_manager")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>@((id > 0)? "Edit Role" : "New Role")</span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@SaveRole_Click">
            <DataAnnotationsValidator />
            <PageBody>

                <TextInput label="Role Name" @bind-text="@model.role_name" />
                <TextInput type="textarea" label="Description" @bind-text="@model.description" />
                @foreach (var b in businesses)
                {
                <div><ComInputCheckBox @bind-value="@b.is_selected" label="@b.business_branch_name_en" label_inline="true" /></div>
                }

            </PageBody>

            <PageFooter>
                <FooterCenter> 
                    <Button type="submit" icon="save" custom_class="button-large">Save</Button>
                    <LinkButton url="outletstation" icon="reply" Class_Name="uk-button-danger button-large">Cancel</LinkButton> 
                </FooterCenter>
            </PageFooter>

        </EditForm>

    </PageContainer>

}

@code{
    [Parameter] public int id { get; set; }
    List<PermissionOptionModel> permissionoption = new List<PermissionOptionModel>();
    List<BusinessBranchModel> businesses = new List<BusinessBranchModel>();
    RoleModel model = new RoleModel();
    string ControllerApi = "Role";

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        if (id>0)
        {
            var resp = await http.ApiGet($"role({id})?$expand=permission_option_roles($select=permission_option_id,role_id,is_delete)");
            if (resp.IsSuccess)
            {
                model = JsonSerializer.Deserialize<RoleModel>(resp.Content.ToString());
                
            }
        }
        is_loading_data = false;
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$expand=business_branch_roles&$filter=is_deleted eq false");
        businesses = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
    }

    protected async Task SaveRole_Click()
    {
        is_saving = true;
        model.business_branch_roles.Clear();
        foreach (var a in businesses.ToList())
        {
            if (a.is_selected)
            {
                model.business_branch_roles.Add(new BusinessBranchRoleModel()
                {
                    business_branch_id = a.id,
                    role_id = model.id
                });
            }
        }
        var post = await http.ApiPost("Role/Save", model);
        if (post.IsSuccess)
        {
            model = JsonSerializer.Deserialize<RoleModel>(post.Content.ToString());
            toast.Add("Save Successfully!", MatToastType.Success);
            nav.NavigateTo($"role/permission/{model.id}");
        }
        else
        {
            toast.Add(post.Content.ToString(), MatToastType.Warning);
        }

        is_saving = false;
    }

}
