@page "/role/new"
@page "/role/edit/{id:int}"
@inject IJSRuntime js
@inherits PageCore;

<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="@((id > 0)? "Edit Role" : "New Role")"></Title>
    <PageContainer roles="@gv.GetRole($"{(id > 0 ? "role_edit" : "role_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>@((id > 0)? "Edit Role" : "New Role")</span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@SaveRole_Click" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
             
                <UIGridCenter>
                    <UIContainerBox Title="Role">
                        <TextInput label="Role Name" @bind-text="@model.role_name">
                            <ValidationMessage For="@(()=>model.role_name)" />
                        </TextInput>
                        <TextInput type="textarea" label="Description" @bind-text="@model.description" />
                    </UIContainerBox>
                    <UIContainerBox Title="Businesses Branches">
                        @foreach (var b in businesses)
                        {
                            <div><ComInputCheckBox @bind-value="@b.is_selected" label="@b.business_branch_name_en" label_inline="true" /></div>
                        }
                    </UIContainerBox>
                </UIGridCenter>                        
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" cancel_url="role"/>
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>

}

@code{
    [Parameter] public int id { get; set; }
    List<PermissionOptionModel> permissionoption = new List<PermissionOptionModel>();
    List<BusinessBranchModel> businesses = new List<BusinessBranchModel>();
    RoleModel model = new RoleModel();
    string ControllerApi = "Role";

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData();
        await LoadBusinessBranch();
        is_loading = false;
    }

    async Task LoadData()
    {
        is_loading_data = true;
        if (id>0)
        {
            var resp = await http.ApiGet($"role({id})");
            if (resp.IsSuccess)
            {
                model = JsonSerializer.Deserialize<RoleModel>(resp.Content.ToString());

            }
        }
        is_loading_data = false;
    }

    async Task LoadBusinessBranch()
    {
        var res = await http.ApiGetOData($"BusinessBranch?$expand=business_branch_roles&$filter=is_deleted eq false");
        businesses = JsonSerializer.Deserialize<List<BusinessBranchModel>>(res.Content.ToString());
        foreach (var p in businesses)
        {
            foreach (var pb in p.business_branch_roles.Where(r => r.role_id == model.id && r.business_branch_id == p.id))
            {
                p.is_selected = true;
            }
        }
    }

    protected async Task SaveRole_Click()
    {
        is_saving = true;
        if (businesses.Where(r=>r.is_selected == true).Any())
        {
            model.business_branch_roles.Clear();
            foreach (var a in businesses.ToList())
            {
                if (a.is_selected)
                {
                    model.business_branch_roles.Add(new BusinessBranchRoleModel()
                    {
                        business_branch_id = a.id,
                        role_id = model.id
                    });
                }
            }
            var post = await http.ApiPost("Role/Save", model);
            if (post.IsSuccess)
            {
                model = JsonSerializer.Deserialize<RoleModel>(post.Content.ToString());
                toast.Add(lang["Save Successfully"], MatToastType.Success);
                nav.NavigateTo($"role/edit/permission/{model.id}");
            }
            else
            {
                toast.Add(post.Content.ToString(), MatToastType.Warning);
            }
        }
        else
        {
            toast.Add(lang["Please choose business branch"],MatToastType.Warning);
        }

        is_saving = false;
    }

}
