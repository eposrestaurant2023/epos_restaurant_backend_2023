@using eModels 
@using Microsoft.JSInterop;
@inject IJSRuntime js
@inject IMatToaster toast
@inject IHttpService http
@inject NavigationManager nav
@inject IStringLocalizer<Resource> lang
  
<EditFormContext Cancel_Click="Cancel_click" model="user" is_opened="is_dialog_open" title="@modal_title" Save_Click="@SaveUser_Click" is_submitting="user.is_loading" modal_width="800px">

    <FileUpload @bind-ImageUrl="@user.photo" />
    <Spacing Number="10" />
    <TextInput label="@lang["Full Name"]" @bind-text="@user.full_name">
        <ValidationMessage For="@(() => user.full_name)" />
    </TextInput>

    <TextInput label="@lang["User Name"]" @bind-text="@user.username">
        <ValidationMessage For="@(() => user.username)" />
    </TextInput>

    <SelectRole label="@lang["Role Name"]" show_empty="true" @bind-selected_value="@user.role_id">
        <ValidationMessage For="@(()=>user.role_id)" />
    </SelectRole>

    <TextInput label="@lang["Email"]" @bind-text="@user.email" />
    <TextInput label="@lang["Phone Number"]" @bind-text="@user.phone_1" />
    @user.password
    <TextInput label="@lang["Password"]" type="password" @bind-text="@user.password">
        <ValidationMessage For="@(()=>user.password)" />
    </TextInput>
    <NumberInputInt label="@lang["User Code"]" @bind-text="@(user.user_code)">
        <ValidationMessage For="@(()=>user.user_code)" />
    </NumberInputInt>

    @if (user.is_allow_front_end_login)
    {
        <NumberInputInt label="@lang["Pin Code"]" @bind-text="@user.pin_code" />
    }

    <ComInputCheckBox label="@lang["Is Allow Front End Login"]" @bind-value="user.is_allow_front_end_login" />
    <ComInputCheckBox label="@lang["Is Allow Back End Login"]" @bind-value="user.is_allow_backend_login" />

    <SelectStatus label="@lang["Status"]" @bind-selected_value="@user.status" />

    <TextInput label="@lang["Note"]" type="textarea" @bind-text="@user.note" />
</EditFormContext>

@code{

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public UserModel user { get; set; } = new UserModel();

    [Parameter] public bool is_dialog_open { get; set; }

    [Parameter] public EventCallback<bool> Save_User_click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    bool is_loading;

    public string modal_title
    {
        get
        {
            return $"User Profile - {user.full_name}";
        }
    }

    string old_username = "";
    string password_uri = "";


    List<RoleModel> roles = new List<RoleModel>();


    protected override void OnInitialized()
    {
        is_loading = true;

        user = JsonSerializer.Deserialize<UserModel>(JsonSerializer.Serialize(gv.current_login_user));
        old_username = user.username; 
        is_loading = false;
    }
    async Task SaveUser_Click()
    {
        user.is_loading = true;

        if (user.id > 0 && user.id == gv.current_login_user.id)
        {
            if (user.status == false)
            {
                toast.Add("You cannot disable current login user.", MatToastType.Warning);
                return;
            }

            if (user.new_password.Length > 0 && user.new_password.Length < 4)
            {
                toast.Add("Password is too short or empty.", MatBlazor.MatToastType.Success);
                user.is_loading = false;
                return;
            }

            if (user.new_password.Length > 0 || old_username != user.username)
            {
                if (!await js.Confirm("Change your username or password will be auto logout.", "Are you sure to proceed?", SweetAlertMessageType.question))
                {
                    user.is_loading = false;
                    return;
                }
            }
        }

        if (!string.IsNullOrEmpty(user.password))
        {
            password_uri = $"?password={user.password}";
        }
        var res = await http.ApiPost($"user/save{password_uri}", user);

        if (res.IsSuccess)
        {
            var u = JsonSerializer.Deserialize<UserModel>(res.Content.ToString());
            toast.Add("Save Successfully", MatToastType.Success); 
            is_dialog_open = false;
            if (!string.IsNullOrEmpty(user.new_password) || old_username != user.username)
            {
                nav.NavigateTo("/Auth/logout?returnUrl=/", true);
            }
            user.is_loading = false;
        }
        else
        {
            toast.Add(res.Content.ToString(), MatToastType.Warning);
        }
        user.is_loading = false;
    }
}

