@using eModels 
@using Microsoft.JSInterop;
@inject IJSRuntime js; 
@inject IMatToaster toast;
@inject IHttpService http;
@inject NavigationManager nav;
  
<EditFormContext Cancel_Click="Cancel_click" model="user" is_opened="is_dialog_open" title="@modal_title" Save_Click="SaveUser_Click" is_submitting="user.is_loading" modal_width="800px">
    
    <FileUpload @bind-ImageUrl="@user.photo" guid="user_capture_001"/>
    <TextInput label="Full Name" @bind-text="@user.full_name">
        <ValidationMessage For="@(() => user.full_name)" />
    </TextInput>
    <TextInput label="Username" @bind-text="@user.username">
        <ValidationMessage For="@(() => user.username)" />
    </TextInput>
    <TextInput label="Email Address" @bind-text="@user.email">
        <ValidationMessage For="@(() => user.email)" />
    </TextInput>
    <TextInput label="Phone Number" @bind-text="@user.phone_1" />
    <TextInput label="New Password" type="password" @bind-text="@user.new_password" />
</EditFormContext>

@code{

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public UserModel user { get; set; } = new UserModel();

    [Parameter] public bool is_dialog_open { get; set; }

    [Parameter] public EventCallback<bool> Save_User_click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    bool is_loading;

    public string modal_title
    {
        get
        {
            return $"User Profile - {user.full_name}";
        }
    }

    string old_username = "";


    List<RoleModel> roles = new List<RoleModel>();


    protected override void OnInitialized()
    {
        is_loading = true;

        user = JsonSerializer.Deserialize<UserModel>(JsonSerializer.Serialize(gv.current_login_user));
        old_username = user.username;
        is_loading = false;
    }



    async Task SaveUser_Click()
    {
        user.is_loading = true;

        if (user.new_password.Length > 0 && user.new_password.Length < 4)
        {
            toast.Add("Password is too short or empty.", MatToastType.Warning);
            user.is_loading = false;
            return;
        }

        if (user.new_password.Length > 0 || old_username != user.username) {
            
            if (!await js.Confirm("Change Username or Password will be auto logout.", "Are you sure to proceed?", SweetAlertMessageType.question))
            {
                user.is_loading = false;
                return;
            }
        }

        //save user to db

        string password_uri = "";

        if (!string.IsNullOrEmpty(user.new_password))
        {
            password_uri = $"?password={user.new_password}";
        }
        var res = await http.ApiPost($"user/SaveUserProfile{password_uri}", user);
        if (res.IsSuccess)
        {
            var u = JsonSerializer.Deserialize<UserModel>(res.Content.ToString());
            gv.current_login_user = u;
            toast.Add("Save Successfully", MatToastType.Success);
            await Save_User_click.InvokeAsync(true);

        }
        else
        {
            toast.Add(res.Content.ToString(), MatToastType.Warning);

        }
        if (!string.IsNullOrEmpty(user.new_password) || old_username != user.username)
        {
            nav.NavigateTo("/Auth/logout?returnUrl=/", true);
        }
        user.is_loading = false;

    }
}

