@using eModels
@using Microsoft.JSInterop;
@inject IJSRuntime js
@inject ISnackbar toast
@inject IHttpService http
@inject NavigationManager nav
@inject IStringLocalizer<Resource> lang

<EditFormContext Cancel_Click="Cancel_click" model="user" is_opened="is_dialog_open" title="@modal_title" Save_Click="@SaveUser_Click" is_submitting="user.is_loading" modal_width="800px">

    <FileUpload @bind-ImageUrl="@user.photo" />
    <Spacing Number="10" />
    <TextInput label="@lang["Full Name"]" @bind-text="@user.full_name">
        <ValidationMessage For="@(() => user.full_name)" />
    </TextInput>
    <TextInput label="@lang["User Name"]" text="@user.username" is_read_only="true" />
    <TextInput label="@lang["Password"]" type="password" @bind-text="@new_password">
        <ValidationMessage For="@(()=>user.password)" />
    </TextInput>
    <TextInput is_read_only="true" label="@lang["Code"]" @bind-text="@user.user_code" />
    @if (user.is_allow_front_end_login)
    {
        <TextInput label="@lang["Pin Code"]" @bind-text="@user.pin_code" />
    }
    <TextInput label="@lang["Email"]" @bind-text="@user.email" />
    <TextInput label="@lang["Phone Number"]" @bind-text="@user.phone_1" />
</EditFormContext>

@code{

    [CascadingParameter] public GlobalVariableModel gv { get; set; }
    public UserModel user { get; set; } = new UserModel();

    [Parameter] public bool is_dialog_open { get; set; }
    string new_password = "";
    [Parameter] public EventCallback<bool> Save_User_click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Cancel_click { get; set; }
    [Parameter] public EventCallback<UserModel> modelChanged { get; set; }
    [Parameter] public UserModel model { get; set; }
    bool is_loading;

    public string modal_title
    {
        get
        {
            return $"User Profile - {user.full_name}";
        }
    }

    string old_username = "";
    string password_uri = "";


    List<RoleModel> roles = new List<RoleModel>();


    protected override void OnInitialized()
    {
        is_loading = true;

        user = JsonSerializer.Deserialize<UserModel>(JsonSerializer.Serialize(model));
        old_username = user.username;
        is_loading = false;
    }
    async Task SaveUser_Click()
    {
        user.is_loading = true;

        if (user.id > 0 && user.id == gv.current_login_user.id)
        {
            if (user.status == false)
            {
                toast.Add(lang["You cannot disable current login user."],Severity.Warning);
                return;
            }

            if (new_password.Length > 0 && new_password.Length < 2)
            {
                toast.Add(lang["Password is too short or empty"], MudBlazor.Severity.Success);
                user.is_loading = false;
                return;
            }

            if (new_password.Length > 0 || old_username != user.username)
            {
                if (!await js.Confirm(lang["Logout"], lang["You have to logout after change username or password."], SweetAlertMessageType.question))
                {
                    user.is_loading = false;
                    return;
                }
            }
        }

        if (!string.IsNullOrEmpty(new_password))
        {
            password_uri = $"?password={new_password}";
        }
        var res = await http.ApiPost($"user/save{password_uri}", user);

        if (res.IsSuccess)
        {
            var u = JsonSerializer.Deserialize<UserModel>(res.Content.ToString());
            toast.Add(lang["Save successfully"], MudBlazor.Severity.Success);
            is_dialog_open = false;
            if (!string.IsNullOrEmpty(new_password))
            {
                nav.NavigateTo("Auth/logout", false);
            }
            user.is_loading = false;
            model.photo = u.photo;
            model.full_name = u.full_name;
            model.email = u.email;
            model.phone_1 = u.phone_1;
            await modelChanged.InvokeAsync(model);
            await Save_User_click.InvokeAsync(false);
        }
        else
        {
            toast.Add(res.Content.ToString(),Severity.Warning);
        }
        user.is_loading = false;
    }
}

