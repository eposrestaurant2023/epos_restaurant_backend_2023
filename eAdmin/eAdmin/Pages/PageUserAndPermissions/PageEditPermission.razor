@page "/role/edit/permission/{role_id:int}"
@inherits PageCore
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <Title Value="Set Permission"></Title>
    <PageContainer roles="@gv.GetRole($"{(role_id > 0 ? "role_edit" : "role_add")}")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        <span>Set Permission - @role.role_name</span>
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
               
            </HeaderRight>
        </PageHeader>
        <EditForm Model="@role" OnValidSubmit="@SaveRole_Click">
            <DataAnnotationsValidator />
            <PageBody>
                <Spacing Number="20" />
                <Tab>
                    <TabHeader>
                        <TabHeaderItem>@lang["Front End"]</TabHeaderItem>
                        <TabHeaderItem OnClick="@showisbackend">@lang["Back End"]</TabHeaderItem>
                        <TabHeaderItem OnClick="@showisreport">@lang["Report"]</TabHeaderItem>
                    </TabHeader>
                    <TabBody>
                        <TabItem>
                            <UIGridCenter>
                                <UIContainerBox Title="Front End">
                                    <MudTreeView CanActivate="true" @bind-SelectedValues="@SelectedOption" Items="@(new HashSet<PermissionModel>(permissions.Where(r=>r.is_front_end == true)))" T="PermissionModel" CanSelect="true" Context="d">
                                        <ItemTemplate>
                                            <MudTreeViewItem @bind-Selected="@d.is_selected" Items="@(new HashSet<PermissionModel>(d.ChildItem.Where(r=>r.is_front_end == true)))" Value="@d" Text="@d.note">

                                            </MudTreeViewItem>
                                        </ItemTemplate>
                                    </MudTreeView>
                                </UIContainerBox>
                            </UIGridCenter>
                        </TabItem>
                        <TabItem>
                            @if (is_backend)
                            {
                                <UIGridCenter>
                                    <UIContainerBox Title="Back End">
                                        <MudTreeView CanActivate="true" @bind-SelectedValues="@SelectedOption" Items="@(new HashSet<PermissionModel>(permissions.Where(r=>r.is_front_end  == false)))" T="PermissionModel" CanSelect="true" Context="d">
                                            <ItemTemplate>
                                                <MudTreeViewItem @bind-Selected="@d.is_selected" Items="@(new HashSet<PermissionModel>(d.ChildItem.Where(r=>r.is_front_end  == false)))" Value="@d" Text="@d.note">

                                                </MudTreeViewItem>
                                            </ItemTemplate>
                                        </MudTreeView>
                                    </UIContainerBox>
                                </UIGridCenter>

                            }
                        </TabItem>
                        <TabItem>
                            @if (is_report)
                            {
                                <UIGridCenter>
                                    <UIContainerBox Title="Report">
                                        <MudTreeView T="PermissionModel" CanActivate="true" @bind-SelectedValues="@SelectedOption" Items="@(new  HashSet<PermissionModel>(permissions.Where(r=>r.is_report  == true)))" CanSelect="true" Context="d">
                                            <ItemTemplate>
                                                <MudTreeViewItem @bind-Selected="@d.is_selected" Items="@(new HashSet<PermissionModel>(d.ChildItem.Where(r=>r.is_report == true)))" Value="@d" Text="@d.note">

                                                </MudTreeViewItem>
                                            </ItemTemplate>
                                        </MudTreeView>
                                    </UIContainerBox>
                                </UIGridCenter>
                             
                            }
                        </TabItem>
                    </TabBody>
                </Tab>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <ComSavingFormButton is_loading="@is_saving" />
                </FooterCenter>
            </PageFooter>
        </EditForm>
    </PageContainer>
}


@code {
    [Parameter] public int role_id { get; set; }
    public HashSet<PermissionModel> SelectedOption { get; set; } = new HashSet<PermissionModel>();
    List<PermissionModel> permissions{ get; set; } = new List<PermissionModel>();
    RoleModel role = new RoleModel();
    bool is_fronend, is_backend, is_report;
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadPermission();
        await loadRole();
        is_loading = false;
    }

    async Task loadRole()
    {
        var res = await http.ApiGet($"role({role_id})?$expand=permission_option_roles($select=role_id,permission_option_id)");
        if (res.IsSuccess)
        {
            role = JsonSerializer.Deserialize<RoleModel>(res.Content.ToString());
        }
    }

    protected async Task SaveRole_Click()
    {
        is_saving = true;

        var post = await http.ApiPost($"Role/SavePermission", new OptionModel()
        {
            role_id = role_id,
            options = string.Join(",", SelectedOption.Select(r => r.id).ToArray())
        });
        if (post.IsSuccess)
        {
            toast.Add("Saved successfully", MatBlazor.MatToastType.Success);
            nav.NavigateTo("role");
        }
        else
        {
            toast.Add(post.Content.ToString(), MatBlazor.MatToastType.Success);
        }

        is_saving = false;
    }


    public async Task LoadPermission()
    {
        var resp = await http.ApiPost("GetData", new FilterModel()
        {
            procedure_parameter = $"{role_id}",
            procedure_name = "sp_get_permission_option_by_role_id_json"
        });
        if (resp.IsSuccess)
        {
            permissions = JsonSerializer.Deserialize<List<PermissionModel>>(resp.Content.ToString());
        }
    }

    public void showisbackend()
    {
        is_fronend = false;
        is_backend = true;
        is_report = false;
    }

    public void showisreport()
    {
        is_fronend = false;
        is_backend = false;
        is_report = true;
    }

    public class PermissionModel
    {
        public PermissionModel()
        {
            ChildItem = new HashSet<PermissionModel>();
        }
        public int id { get; set; }
        public int? parent_id { get; set; }
        public string note { get; set; }
        public bool is_selected { get; set; } = false;
        public bool is_front_end { get; set; }
        public bool is_report { get; set; }
        public HashSet<PermissionModel> ChildItem { get; set; }

    }

}
