@page "/"
@inject NavigationManager nav;
@inject eKnowledgebase.Services.eKnowledgebaseService s;
<PageTitle>Home Page</PageTitle>

@if (is_loading)
{
    <div>loading...</div>
}else
{
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="background:#0093d9;height:150px;" Class="d-flex align-center justify-center" >
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                   <MudContainer MaxWidth="MaxWidth.Small" >
             <div>
                   <MudText Typo="Typo.h6" Class="main_title">ePOS Resturant Help Center</MudText>
                  <MudTextField FullWidth="true" T="string" Margin="Margin.Dense" Placeholder="Search" Class="cus_search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search"/>
             </div>
      </MudContainer>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
                   <MudContainer MaxWidth="MaxWidth.Large" >
             <div>
                   <MudText Typo="Typo.h6" Class="main_title">ePOS Resturant Help Center</MudText>
                  <MudTextField FullWidth="true" T="string" Margin="Margin.Dense" Placeholder="Search" Class="cus_search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search"/>
             </div>
      </MudContainer>
        </MudHidden>
  
    </MudContainer>
    
    <MudContainer MaxWidth="MaxWidth.Medium">
     <MudGrid Spacing="3">
        @foreach(var d in models.OrderBy(r=>r.sort_order)){ 
          <MudItem xs="12" md="6" lg="4">
              <MudCard @onclick="@(()=> nav.NavigateTo($"app/{d.id}"))" Class="pc mud-width-full mud-height-full">
                <MudAvatar Style="height:70px; width:70px; font-size:2rem;" Image="images/cashier.png"></MudAvatar>
                <MudCardContent>
                    <MudText Typo="Typo.h4">@d.title_en</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        }
    </MudGrid>
    </MudContainer>
}




@code{
    List<eKnowledgebaseModel> models = new();
    bool is_loading;

    [CascadingParameter]
    public AppState state { get; set; }
    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        models = await s.GetModulesAsync();
        is_loading = false;
    }

}

    
}