@page "/article/{id:guid}"

@inject NavigationManager nav;
@inject IConfiguration config;
@inject eKnowledgebase.Services.eKnowledgebaseService s;
<PageTitle>@state.GetTitleText(model)</PageTitle>
<MudDrawer @bind-Open="_drawerOpen"  DisableOverlay="false" Variant="@DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Elevation="2">
    @if (is_first_load)
    {
        <div>loading...</div>
    }
    else
    {
        if (model?.parent_id != null)
        {
            <NavSection url_name="article" id="@model.parent_id" OnItemClick="@OnItemClick" />
        }
    }
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.Large" Class="cus_a">
    @if (is_loading)
    {
        <div>loading...</div>
    }
    else
    {
         <MudHidden  Breakpoint="Breakpoint.MdAndUp">
             <div class="d-flex flex-row align-center">
            <div> <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /></div>
            <div><div class="view_header_app">
             <h3>@state.GetTitleText(model)</h3>
            </div>
           </div>
        </div>
          <Spacing Number="10"/>
          <div style="font-size: 16px;">
                @if (!string.IsNullOrEmpty(model.youtube_url))
        {
         
               <MudPaper Height="400px">
                  <iframe width="560" height="500px" src="@model.youtube_url" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
           </MudPaper>
     
        }
      <Spacing Number="10"/>
      

            @if (state.GetImageUrl(model) != "")
            {
                <img src="@state.GetImageUrl(model)" style="width:100%" />
            }

            @if (state.GetDescriptText(model) != "")
            {
                <Spacing Number="5"/>
                <div class="cus_list"> @((MarkupString)state.GetDescriptText(model))</div>
            }
                      @foreach (var d in models.OrderBy(r => r.sort_order))
        {
            
                @if (state.GetTitleText(d) != "")
                {
                    <MudText Typo="Typo.h4">@state.GetTitleText(d)</MudText>
                    <Spacing Number="5"/>
                }

                @if (state.GetImageUrl(d) != "")
                {
                    <img src="@state.GetImageUrl(d)" style="width:100%" />
                }

                @if (state.GetDescriptText(d) != "")
                {
                    <Spacing Number="5"/>
                    <div class="cus_list">
                        @((MarkupString)state.GetDescriptText(d))
                    </div>
                }

           
        }

          </div>
        </MudHidden>

         <MudHidden Breakpoint="Breakpoint.SmAndDown">

                <MudGrid Spacing="5">
                <MudItem md="3">
                      <MudPaper>
                <MudList Clickable="true">
                    <MudListSubheader Class="title_main_topic">
                       Topics
                    </MudListSubheader>
                    @if (model?.parent_id != null)
                    {
                        <NavSectionList ClassName="seleted_class" url_name="article" OnItemClick="@OnItemClick" id="@model.parent_id"/>
                    }
                </MudList>
            </MudPaper>
                </MudItem>
                <MudItem md="9" Style="font-size: 16px;">
                     <MudText Typo="Typo.h3">
                        @state.GetTitleText(model)
                     </MudText>
                     <Spacing Number="10"/>
                                @if (!string.IsNullOrEmpty(model.youtube_url))
        {
           <MudPaper Height="400px">
                  <iframe width="560" height="500px" src="@model.youtube_url" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
           </MudPaper>
             
       
        }
      <Spacing Number="10"/>
      

            @if (state.GetImageUrl(model) != "")
            {
                <img src="@state.GetImageUrl(model)" style="width:100%" />
            }
            <Spacing Number="10"/>
            @if (state.GetDescriptText(model) != "")
            {
                <div class="cus_list"> @((MarkupString)state.GetDescriptText(model))</div>
            }


            @foreach (var d in models.OrderBy(r => r.sort_order))
        {
           
                @if (state.GetTitleText(d) != "")
                {
                    <MudText Typo="Typo.h4">@state.GetTitleText(d)</MudText>
                    <Spacing Number="5"/>
                }

                @if (state.GetImageUrl(d) != "")
                {
                    <img src="@state.GetImageUrl(d)" style="width:100%" />
                }
                <Spacing Number="10"/>
                @if (state.GetDescriptText(d) != "")
                {
                    <div class="cus_list">
                        @((MarkupString)state.GetDescriptText(d))
                    </div>
                }

           
        }


                </MudItem>
            </MudGrid>





        </MudHidden>
    }
</MudContainer>



@code {

    [CascadingParameter]
    public AppState state { get; set; }

    [Parameter]
    public Guid id { get; set; }
    List<eKnowledgebaseModel> models = new();
    eKnowledgebaseModel model = new();

    bool is_loading;
    bool _drawerOpen = false;
    bool is_first_load = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    protected override async Task OnInitializedAsync()
    {
        is_first_load = false;
        is_loading = true;
        model = await s.GetByID(id);
        models = await s.GetDataByParentID(id);
        is_loading = false;
    }

    async Task OnItemClick(eKnowledgebaseModel m)
    {

        model = m;
        id = m.id;
        models = await s.GetDataByParentID(m.id);
        _drawerOpen = false;
    }

}