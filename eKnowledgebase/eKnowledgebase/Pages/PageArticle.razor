@page "/article/{id:guid}"

@inject NavigationManager nav;
@inject IConfiguration config;
@inject eKnowledgebase.Services.eKnowledgebaseService s;
<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
    @if (is_loading && is_first_load)
    {
        <div>loading...</div>
    }
    else
    {
        if (model?.parent_id != null)
        {
            <NavSection url_name="article" id="@model.parent_id" OnItemClick="@OnItemClick" />
        }
    }
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (is_loading)
    {
        <div>loading...</div>
    }
    else
    {
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <PageTitle>@state.GetTitleText(model)</PageTitle>
        <h3>@state.GetTitleText(model)</h3>
        
            @if (state.GetImageUrl(model) != "")
            {
                <img src="@state.GetImageUrl(model)"/>
            }

        @if (state.GetDescriptText(model) != "")
        {
            <div>@state.GetDescriptText(model)</div>
        }
        @foreach (var d in models.OrderBy(r => r.sort_order))
        {
            <MudPaper Class="ma-4 pa-4">
                @if (state.GetTitleText(d) != "")
                {
                    <MudText Typo="Typo.h3">@state.GetTitleText(d)</MudText>
                }

                @if (state.GetImageUrl(d) != "")
                {
                    <img src="@state.GetImageUrl(d)"/>
                }

                @if (state.GetDescriptText(d) != "")
                {
                    <div>@state.GetDescriptText(d)</div>
                }

            </MudPaper>
        }

    }
</MudContainer>



@code {

    [CascadingParameter]
    public AppState state { get; set; }

    [Parameter]
    public Guid id { get; set; }
    List<eKnowledgebaseModel> models = new();
    eKnowledgebaseModel model = new();

    bool is_loading;
    bool _drawerOpen = true;
    bool is_first_load = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    protected override async Task OnInitializedAsync()
    {
        is_first_load = false;
        is_loading = true;
        model = await s.GetByID(id);
        models = await s.GetDataByParentID(id);
        is_loading = false;
    }

    async Task OnItemClick(eKnowledgebaseModel m)
    {
        is_loading = true;
        model = m;
        id = m.id;
        models = await s.GetDataByParentID(m.id);
        is_loading = false;
    }

}