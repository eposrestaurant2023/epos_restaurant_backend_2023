@inject IHttpService http
@inject IDialogService Dialog
@inject ISnackbar toast;

@if(model==null){ 
       <MudPaper Outlined="true" Class="pa-8 mb-2">
          <MudText Typo="Typo.subtitle1" Align="MudBlazor.Align.Center"> No Customer Select</MudText>
           <div class="text-center">
               <MudButton
                   Target="_blank"
                   Variant="Variant.Filled"
                   OnClick="SelectCustomer_Click"
                   Color="MudBlazor.Color.Tertiary">
                   Select Customer
            </MudButton>
           </div>
       </MudPaper>
  }else {

       <MudCard>
                    <MudCardContent Class="text-center">
                        <MudAvatar Rounded="true" Color="MudBlazor.Color.Secondary" Class="ma-2" Style="height:70px; width:70px; font-size:2rem;">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large"/>
                        </MudAvatar>
                        <MudText>
                            @model.customer_code - @model.customer_name_en
                        </MudText>
                        <MudText Typo="Typo.body2">@model.company_name</MudText>
                            <MudIcon Icon="@Icons.Material.Filled.LocalPhone"/>
                            <MudIcon Icon="@Icons.Material.Filled.Facebook"/>
                            <MudIcon Icon="@Icons.Material.Filled.Send"/>
                            <div>
                                 <MudButton
                                   Target="_blank"
                                   Variant="Variant.Filled"
                                   Color="MudBlazor.Color.Tertiary"
                                   OnClick="@SelectCustomer_Click"
                                   >
                                 Select Customer
                            </MudButton>
                            </div>
                          
                  </MudCardContent>
           

            </MudCard>
  }

             
       
        @ChildContent
@code{

    [Parameter] public CustomerModel model { get; set; }
    [Parameter] public EventCallback<CustomerModel> modelChanged { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Guid customer_id { get; set; }
    [Parameter] public EventCallback<Guid> customer_idChanged { get; set; }

     
    DialogOptions dialog_option = new DialogOptions() {  CloseButton = true };
    async Task SelectCustomer_Click()
    {
         
        var dialog = Dialog.Show<SelectCustomerList>("Search Customer", dialog_option);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
             
            model = (CustomerModel)result.Data;
            await customer_idChanged.InvokeAsync(model.id);
            await modelChanged.InvokeAsync(model);
            toast.Add("Customer has been selected.", Severity.Success);
        }
    }

}
