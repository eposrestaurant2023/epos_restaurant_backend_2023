@inject IHttpService http

<Modal @bind-visible="@Is_visible">
    <ModalContent>
          <MudTextField @bind-Value="keyword" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"/>
    </ModalContent>
    <ModalAction>
        <MudButton Variant="Variant.Filled" OnClick="@Onclose" Class="px-10">Close</MudButton>
    </ModalAction>
</Modal>

@code{

    [CascadingParameter] public AppState app_state { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Customer";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public bool Is_visible { get; set; } = false;
    [Parameter] public EventCallback<bool> Is_visibleChanged { get; set; }
    [Parameter] public string empty_text { get; set; } = "Select Customer";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public Variant variant { get; set; } = Variant.Outlined;
    [Parameter] public Guid selected_value { get; set; } = Guid.Empty;
    [Parameter] public EventCallback<Guid> selected_valueChanged { get; set; }

    [Parameter] public CustomerModel customer { get; set; }
    [Parameter] public EventCallback<CustomerModel> customerChanged { get; set; }
    List<CustomerModel> customers { get; set; } = new List<CustomerModel>();
    string keyword= "";
      public Guid SelectedValue
    {
        get
        {
            return customer == null ? selected_value : customer.id;
        }
    }

    Guid id = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        var res = await http.ApiGetOData("customer?$filter=status eq true and is_deleted eq false&$top=25");
        if(res.IsSuccess){
            customers = JsonSerializer.Deserialize<List<CustomerModel>>(res.Content.ToString());
        }
    }

    private async Task SelectedValueChange(Guid n)
    {
        selected_value = n;
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == Guid.Empty)
        {
            await customerChanged.InvokeAsync(new CustomerModel());
        }
        else
        { 
            await customerChanged.InvokeAsync(customers.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

    async Task Onclose()
    {
        Is_visible = false;
        await Is_visibleChanged.InvokeAsync(Is_visible);
    }
}