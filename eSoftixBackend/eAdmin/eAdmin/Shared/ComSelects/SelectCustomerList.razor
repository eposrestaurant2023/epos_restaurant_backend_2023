@inject IHttpService http;
<Loading is_loading="@is_loading"/>
 
<Modal>
<ModalContent>
 <MudTextField T="string" Placeholder="Search..."    Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="@OnSearch" />
          
           
                <MudList Clickable="true">

                    @foreach (var d in customers)
                    {
                        <MudListItem OnClick="@(()=>SelectCustomer_Click(d))">
                            <MudText Typo="Typo.body1">@d.customer_code - @d.customer_name_en  </MudText>
                        </MudListItem>
                    }

                </MudList>    

</ModalContent>
 
</Modal>  


@code{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    string keyword = "";
    
    bool is_loading;

    List<CustomerModel> customers = new List<CustomerModel>();

        protected override async Task OnInitializedAsync()
        {
            is_loading = true;
             
            await LoadData();
            is_loading = false;
        }

         
        public async Task LoadData()
        {
            is_loading = true;
            string api_url=$"customer?$expand=customer_group($select=customer_group_name_en,customer_group_name_kh)&keyword={keyword}&$top={50}&$orderby=customer_name_en&$filter=is_deleted eq false";
            var resp = await http.ApiGetOData(api_url);
            if (resp.IsSuccess)
            {
                customers = JsonSerializer.Deserialize<List<CustomerModel>>(resp.Content.ToString());
              
            }
            is_loading = false;
        }

        
    async Task OnSearch(string debouncedText)
    {
       is_loading = true;
       keyword = debouncedText;
       await LoadData();
        is_loading = false;
    }
    void SelectCustomer_Click(CustomerModel c)
    {
          MudDialog.Close(DialogResult.Ok(c));
    }
}