
         <MudSelect T="int" Label="Project Type" Value="@SelectedValue" Strict="true" Variant="@variant" ValueChanged="@((id) => SelectedValueChange(id))">
            
            @if (show_empty)
            {
                <MudSelectItem T="int" Value="0">@empty_text</MudSelectItem>
            }
            @foreach (var p in app_state.gv.project_types.Where(r => r.status  && !r.is_deleted))
            {
             
                <MudSelectItem T="int" Value="@p.id">@p.project_type_name</MudSelectItem>
            }
        </MudSelect>

        @ChildContent
@code{
    [CascadingParameter] public AppState app_state { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Project Type";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Project Type";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public Variant variant { get; set; } = Variant.Outlined;
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }

    [Parameter] public ProjectTypeModel project_type { get; set; }
    [Parameter] public EventCallback<ProjectTypeModel> project_typeChanged { get; set; }


    public int SelectedValue
    {
        get
        {
            return project_type == null ? selected_value : project_type.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(int n)
    {
        selected_value = n;
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == 0)
        {
            await project_typeChanged.InvokeAsync(new ProjectTypeModel());
        }
        else
        { 
            await project_typeChanged.InvokeAsync(app_state.gv.project_types.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
