
         <MudSelect T="int" Label="Customer Group" Value="@SelectedValue" Strict="true" Variant="Variant.Outlined" ValueChanged="@((id) => SelectedValueChange(id))" Margin="Margin.Dense">
            
            @if (show_empty)
            {
                <MudSelectItem T="int" Value="0">@empty_text</MudSelectItem>
            }
            @foreach (var p in app_state.gv.customer_groups.Where(r => r.status  && !r.is_deleted))
            {
             
                <MudSelectItem T="int" Value="@p.id">@p.customer_group_name_en</MudSelectItem>
            }
        </MudSelect>

        @ChildContent
@code{
    [CascadingParameter] public AppState app_state { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Customer Group";
    [Parameter] public bool show_empty { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Select Customer Group";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }

    [Parameter] public CustomerGroupModel customer_group { get; set; }
    [Parameter] public EventCallback<CustomerGroupModel> customer_groupChanged { get; set; }


    public int SelectedValue
    {
        get
        {
            return customer_group == null ? selected_value : customer_group.id;
        }
    }

    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(int n)
    {
        selected_value = n;
        await selected_valueChanged.InvokeAsync(selected_value);
        if (selected_value == 0)
        {
            await customer_groupChanged.InvokeAsync(new CustomerGroupModel());
        }
        else
        { 
            await customer_groupChanged.InvokeAsync(app_state.gv.customer_groups.Where(r => r.id == selected_value).FirstOrDefault());
        }

    }

}
