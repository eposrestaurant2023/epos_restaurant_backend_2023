@inherits LayoutComponentBase
@layout MainLayout
@inject IHttpService http;
@inject IDialogService Dialog;
@inject IDialogService DialogService
@inject NavigationManager nav;
@inject ISnackbar toast;


<Loading is_loading="@is_loading"/>
@if (!is_loading)
{
    <MudToolBar DisableGutters="true" Class="mx-4">
    <MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary">eKnowledge Base</MudText>
</MudToolBar>
<MudDivider Class="mb-4"/>

<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudPaper Elevation="25" Class="d-flex align-center py-1 mb-4">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="MudBlazor.Color.Inherit" Class="ml-3 mr-2" />
        <MudText Typo="Typo.subtitle1" Color="MudBlazor.Color.Primary" >Business Branch</MudText>
    </MudPaper>
</MudHidden>
<div class="d-flex flex-grow-1 flex-row ma-4">
 <PageContainer>
     <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudPaper Elevation="25" Class="px-3 py-6 mr-6" MinWidth="250px">
            <MudTextField T="string" Placeholder="Search..."    Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      DebounceInterval="500"
                      OnDebounceIntervalElapsed="@OnSearch" />
           <div class="d-flex d-flex justify-space-between align-center">
               <MudText Typo="Typo.subtitle1" Color="MudBlazor.Color.Primary" >Add Eknowledge Base</MudText>
               <div><MudIconButton Icon="@Icons.Material.Filled.Add" Class="d-flex ml-auto" OnClick="@AddNewEknowledgeParent"/></div>
           </div>
           <MudDivider />


            <MudList Clickable="true" @bind-SelectedItem="selectedItem">
                
                @foreach (var p in eknowledgebase)
                {
                        @if (p.children.Any())
                        {
                            <MudListItem Text="@(p.title_en)">
                               <NestedList>
                                    @foreach (var sp in p.children.Where(r=>r.parent_id == p.id)){

                                         <MudListItem>
                                            <div class="d-flex justify-space-between align-center">
                                                <div>
                                                    <MudLink Href="@($"eknowledgebase/{sp.id}")" Underline="Underline.None">
                                                      <MudText Typo="Typo.body1">@sp.title_en</MudText>
                                                   </MudLink>
                                                </div>
                                                <div>
                                                     <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(()=>DeleteCustomer_Click(sp.id))" Size="Size.Small"/>
                                                     <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(()=>click_edit(sp.id))" Size="Size.Small"/>
                                                </div>
                                            </div>
                                     </MudListItem>
                                    }
                               </NestedList>
                           </MudListItem>
                    }
                        else
                        {
                                @if (p.parent_id == null)
                                {
                                       <MudListItem>
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudLink Href="@($"eknowledgebase/{p.id}")" Underline="Underline.None">
                                                  <MudText Typo="Typo.body1">@p.title_en</MudText>
                                               </MudLink>
                                            </div>
                                            <div>
                                                 <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(()=>DeleteCustomer_Click(p.id))" Size="Size.Small"/>
                                                 <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(()=>click_edit(p.id))" Size="Size.Small"/>
                                            </div>
                                        </div>
                                     </MudListItem>
                                }
                           

                        }
                   
                }
            </MudList>
        </MudPaper>
    </MudHidden>
    <MudPaper Elevation="25" Class="flex-grow-1 pb-4">
       @Body
    </MudPaper>

</PageContainer>
        
</div>

}

    @code{
    [Parameter] public string parent_id { get; set; }
    public List<eKnowledgeBaseModel> eknowledgebase = new List<eKnowledgeBaseModel>();
    string keyword = "";
    public string StateKey = "123484567Gs25245KJHGytkjhTonB3PCz2Ts"; //Storage and Session Key
    bool is_loading;
    bool is_saving;
    string TextValue { get; set; }
    MudListItem selectedItem;
     protected override async Task OnInitializedAsync()
        {
             is_loading = true;
             await LoadData();
             
            
           is_loading = false;
        }

        async Task LoadData(string url=""){
            if(string.IsNullOrEmpty(url)){
                url = "eKnowledgeBase?$filter=parent_id eq null and is_deleted eq false &$expand=children($filter=is_deleted eq false) &top={50}&$orderby=title_en";
            }
            
            var resp = await http.ApiGetOData(url);
            if(resp.IsSuccess){
                eknowledgebase = JsonSerializer.Deserialize<List<eKnowledgeBaseModel>>(resp.Content.ToString());
                nav.NavigateTo($"eknowledgebase/{eknowledgebase.FirstOrDefault()?.children?.FirstOrDefault()?.id}");
            }

        }

        async Task OnSearch(string debouncedText)
        {

           var url = $"eKnowledgeBase?$filter=parent_id eq null and is_deleted eq false &keyword={debouncedText}&$expand=children &top={50}&$orderby=title_en";
            await LoadData(url);

        }

        async Task AddNewEknowledgeParent()
       {
           
            var parameters = new DialogParameters { ["model"]= new eKnowledgeBaseModel()};
            var dialog = Dialog.Show<ComAddEknowledgeBase>("Add New Eknowledge Base",parameters);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                eknowledgebase.Add((eKnowledgeBaseModel)result.Data);
            }

       }

         async Task click_edit(Guid id)
        {
         
         
            var url = $"eKnowledgeBase({id})";
            var resp = await http.ApiGet(url);
            if(resp.IsSuccess){
            
                var e = JsonSerializer.Deserialize<eKnowledgeBaseModel>(resp.Content.ToString());
                    var parameters = new DialogParameters { ["model"]= e};
                     var dialog = Dialog.Show<ComAddEknowledgeBase>("Add New Eknowledge Base",parameters);
                    var result = await dialog.Result;
                    
                    if (!result.Cancelled)
                    {
                       is_loading = true;
                       StateHasChanged();
                        await LoadData();
                       is_loading = false;
                   }
            
        }

              
        }

        async Task click_Delete(Guid id)
        {
            var url = $"eKnowledgeBase/delete/{id}";
            var resp = await http.ApiGet(url);
        }

        public async Task DeleteCustomer_Click(Guid id)
        {
            
            string state = "Are You sure your want to delete?";
            
            bool? result = await DialogService.ShowMessageBox(
            "Delete",
            state,
            yesText: "Ok", cancelText: "Cancel");
            StateHasChanged();
            if ((bool)result)
            {
                is_loading = true;
                var res = await http.ApiPost($"eKnowledgeBase/delete/{id}");
                if (res.IsSuccess)
                {
                    toast.Add("Delete successfuly.", Severity.Success);
                    await LoadData();
                }
                
            }
            
           is_loading = false;
            
           
        }

    }
 