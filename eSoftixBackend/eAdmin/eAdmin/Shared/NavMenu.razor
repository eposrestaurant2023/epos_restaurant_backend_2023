
<ComUserDisplay Style="background-color: var(--mud-palette-drawer-background);color: var(--mud-palette-drawer-text);"/>
<MudDivider Class="mb-4" />
<MudNavMenu>
@if(state.gv.permission_options!=null){ 
    foreach(var s in state.gv.permission_options.Where(r=>r.is_section_header==true && r.show_in_menu == true && r.parent_id ==null).OrderBy(r => r.sort_order))
    {
        <AuthorizeView Roles="@s.roles">
            <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Inherit" Class="ml-4 my-3">@s.note</MudText> 
        </AuthorizeView>
        @foreach(var m1 in state.GetPermissionOption(s))
         {
                
            if (m1.is_match_all)
            {
                <AuthorizeView Roles="@m1.roles">
                 <MudNavLink Href="@m1.url" Match="NavLinkMatch.All" Icon="@m1.icon">@m1.note</MudNavLink>    
                </AuthorizeView>
            }else {
                if(state.gv.permission_options.Where(r=>r.parent_id==m1.id && r.show_in_menu == true).Any())
                {
                          <MudNavGroup Title="@m1.note" Icon="@m1.icon" HideExpandIcon="false">
                            @foreach(var m2 in state.GetPermissionOption(m1))
                            {
                                <AuthorizeView Roles="@m2.roles">
                                    <MudNavLink Href="@m2.url" Icon="@m2.icon">@m2.note</MudNavLink>
                                </AuthorizeView>
                            }
                          </MudNavGroup>    

                }else {
                    <AuthorizeView Roles="@m1.roles">
                        <MudNavLink Href="@m1.url" Icon="@m1.icon">@m1.note</MudNavLink> 
                    </AuthorizeView>

                }
                        
            }
                    
              

        }
        
    }
  } 
</MudNavMenu>





@code {
    [CascadingParameter] public AppState state { get; set; }
    

} 