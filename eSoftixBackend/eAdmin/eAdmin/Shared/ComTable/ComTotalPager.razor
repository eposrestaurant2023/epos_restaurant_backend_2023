 
@if (IsVisible)
    {
            <div class="wrp-pagging-info">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    @foreach (var link in links)
                    {
                        <MudButton  @onclick="@(() => SelectedPageInternal(link))"
                        Style="cursor: pointer;"
                        Class="page-item">
                        <a class="page-link @link.Text">@link.Text</a>
                    </MudButton>
                }
            </MudButtonGroup>
 </div>
    }
 
@code { 
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public decimal PerPage { get; set; } = 10;
    [Parameter] public decimal TotalRecord { get; set; }
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public bool IsVisible { get; set; } = true;

    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links;

    int total_page = 0;
    protected override void OnParametersSet()
    {
        if (PerPage > 0)
        {
            total_page = Convert.ToInt32(Math.Ceiling(TotalRecord / PerPage));
        }

        LoadPages();
    }

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Prev"));

        for (int i = 1; i <= total_page; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        var isNextPageLinkEnabled = CurrentPage != total_page;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }

    class LinkModel
    {
        public LinkModel(int page)
            : this(page, true) { }

        public LinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}