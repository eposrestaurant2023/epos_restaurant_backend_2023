@if (label != "")
{
    <div class="uk-margin-small">
        <label class="uk-form-label" for="@id">
            @if (line_icon != "")
            {
                <LineIcon IconName="@line_icon" />
            }
            else if (icon != "")
            {

                <Icon icon="@icon" />
            }
            @label
        </label>
        <div class="uk-form-controls">
            @if (is_read_only)
            {
                <input type="text" disabled value="@strText" placeholder="@placeholder" step="any" @onblur="@TextLeave" class="uk-input @class_name" style="width:@width" />
            }
            else
            {
                <input type="text" value="@strText" placeholder="@placeholder" @onchange="@((ui) => TextChange((string)ui.Value))" step="any" @onblur="@TextLeave" class="uk-input @class_name" style="width:@width" />
            }

            @ChildContent
        </div>
    </div>
}
else
{
    if (is_read_only)
    {
        <input type="text" disabled value="@strText" placeholder="@placeholder" step="any" @onblur="@TextLeave" class="uk-input @class_name" style="width:@width" />
    }
    else
    {
        <input type="text" value="@strText" placeholder="@placeholder" @onchange="@((ui) => TextChange((string)ui.Value))" step="any" @onblur="@TextLeave" class="uk-input @class_name" style="width:@width" />
    }

    @ChildContent
}

@code{
    [Parameter] public string line_icon { get; set; } = "";
    [Parameter] public string icon { get; set; } = "";
    [Parameter] public int text { get; set; } = 0;

    [Parameter] public string placeholder { get; set; } = "";
    [Parameter] public string label { get; set; } = "";
    [Parameter] public bool is_read_only { get; set; } = false;
    [Parameter] public string text_format { get; set; } = "0.####";
    [Parameter] public string width { get; set; } = "";
    [Parameter] public string class_name { get; set; } = "uk-form-small";

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<int> textChanged { get; set; }
    string strText = "0";

    Guid id = Guid.NewGuid();


    protected override void OnInitialized()
    {

        if (placeholder == "")
        {
            placeholder = label;
        }

        strText = text.ToString(text_format);
    }


    protected override void OnParametersSet()
    {
        strText = text.ToString(text_format);
    }


    private async Task TextChange(string n)
    {
        strText = "10000000";
        if (String.IsNullOrEmpty(n))
        {
            n = "0";
        }
        else
        {
            n = n.Replace("$", "").Replace(",", "");

            int result = 0;
            if (int.TryParse(n, out result))
            {
                text = result;
            }
            else
            {
                text = 0;
            }
        }


        await textChanged.InvokeAsync(text);
    }

    void TextLeave()
    {
        strText = text.ToString(text_format);
    }

}


