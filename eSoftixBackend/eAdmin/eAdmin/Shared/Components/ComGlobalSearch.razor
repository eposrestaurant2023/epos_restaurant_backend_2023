@inject IHttpService http
@inject IConfiguration conf
@inject NavigationManager nav
<MudContainer MaxWidth="MaxWidth.Small">

    <MudAutocomplete T="SearchModel" Placeholder="Search" @bind-Value="@model"
        AdornmentColor="MudBlazor.Color.Default" InputType="InputType.Search" Class="docs-search-bar" DisableUnderLine="true" FullWidth="false"
        Immediate="false" ResetValueOnEmptyText="true" AdornmentIcon="@Icons.Material.Filled.Search"
        SearchFunc="@SearchAsync"  ToStringFunc="@(e=> e==null?null : $"{e.title}")">
            <ItemTemplate Context="s">                          
                <MudListItem Class="list-item" OnClick="@(()=> {nav.NavigateTo(s.url);} )" >
                    <MudItem Class="d-flex">
                        <MudItem Class="list-item-title">
                            @if(!string.IsNullOrEmpty(s.photo) || !string.IsNullOrEmpty(s.alias)){
                                @if(!string.IsNullOrEmpty(s.photo)){
                                     <MudAvatar Image="@($"{conf.GetValue<string>("BaseUrl")}upload/{s.photo}")" Size="Size.Large"/>
                                }else{
                                     <MudAvatar Variant="Variant.Filled" Size="Size.Large" Color="@MudBlazor.Color.Primary">@s.alias</MudAvatar>
                                }
                            }else{
                               <MudAvatar  Class="ma-2">
                                    <MudIcon Icon="@s.icon" Size="@Size.Large"/>
                                </MudAvatar>
                            }
                        </MudItem>
                        <MudItem Class="px-4">
                            @s.title<br/>
                            <MudText Typo="Typo.caption">
                                 @s.description
                            </MudText>
                            <br />
                            <MudText Typo="Typo.caption">
                                 @s.keyword
                            </MudText>
                        </MudItem>
                    </MudItem>

                </MudListItem>
            </ItemTemplate>
        </MudAutocomplete>

</MudContainer>

@code {
    public string keyword { get; set; }

    SearchModel model = new SearchModel();
    List<SearchModel> searchs = new List<SearchModel>();


    private async Task<IEnumerable<SearchModel>> SearchAsync(string value)
    {
        var res =await http.ApiGet($"search?keyword={value}");
        
        if(res.IsSuccess){
            searchs = JsonSerializer.Deserialize<List<SearchModel>>(res.Content.ToString());
        }

        return searchs;
    }
}
