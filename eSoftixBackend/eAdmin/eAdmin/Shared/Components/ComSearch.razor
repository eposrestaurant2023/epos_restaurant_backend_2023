@using Microsoft.AspNetCore.Components.Forms
 
 
<EditForm Model="@dummy" OnSubmit="Search" >
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
     <div class="d-flex">
         <div> <MudTextField @bind-Value="@search_text"  Variant="Variant.Outlined" Placeholder="@place_holder" Margin="Margin.Dense"></MudTextField></div>
         <div>
               @if (show_advance_filter)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="ShowAdvanceFilter"></MudIconButton>
        }
         </div>
     </div>
    
      
      
      
    </MudHidden>
 <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="ShowAdvanceFilter"></MudIconButton>
 </MudHidden>

</EditForm>
 
<FilterFly  OnSearch="@OnFillterClick" IsOpen="@open_advance_filter">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudTextField @bind-Value="@search_text"  Variant="Variant.Outlined" Placeholder="@place_holder"></MudTextField>
      
        </MudHidden>

    @ChildContent
</FilterFly>
 

@code{
    [Parameter] public string place_holder { get; set; } = "Search...";
    public string dummy { get; set; } = "";
    [Parameter] public EventCallback<string> KeywordChanged { get; set; }
    [Parameter] public string search_text { get; set; } = "";
    [Parameter] public string FrmClass { get; set; } = "";
    
    [Parameter] public bool show_advance_filter { get; set; } = true;
    [Parameter] public EventCallback OnFillterClick { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
 
    bool open_advance_filter;
 

    public string placeholder
    {
        get
        {

            return string.IsNullOrEmpty(place_holder) ? "Search" : place_holder;

        }
    }

    async Task Search()
    {

        await KeywordChanged.InvokeAsync(search_text);
    }
    void ShowAdvanceFilter()
    {
        open_advance_filter = true;
    }


     

}
