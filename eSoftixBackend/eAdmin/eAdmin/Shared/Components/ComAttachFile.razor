@using System.IO
@using System.Net.Http
@using System.Net.Http.Headers
@using Microsoft.JSInterop
@using Microsoft.Extensions.Configuration;
@inject IHttpService http;
@inject IConfiguration config
@inject ISnackbar toast
@inject IDialogService confirm
<Loading is_loading="is_loading" />
@if(!IsReadOnly){
<div class="pa-4">
    <MudText Typo="Typo.h6">
        Upload Files @("<") 4Mb
    </MudText>
    <br/>
    <div class="uk-text-left">
        <div>Accept (jpg, png, pdf, docx, xlsx)</div>
        <AuthorizeView Roles="@RoleAdd">
            @if (IsVisible)
            {
                <div class="wrp_input_attach_file">
                   
                    <InputFile id="fileInput" OnChange="HandleSelection" style="display: none;" />
                    <MudButton 
                           HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="MudBlazor.Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                        Upload Files
                    </MudButton>
                    @if (is_loading)
                    {
                        <div class="loading_file_uploads"></div>
                    }
                    @if (!string.IsNullOrWhiteSpace(status_message))
                    {
                        <div class="status_msg uk-text-break">
                            @status_message
                        </div>
                    }
                </div>
            }
        </AuthorizeView>
    </div>
</div>
}
<div class="pa-4 att_file_scroll uk-text-left">
    @if (AttachFiles.Count() > 0)
    {
        @foreach (var f in AttachFiles.Where(r => r.is_deleted == false).OrderByDescending(r => r.created_date))

        {
            <div class="list_attachment_item d-flex">
                <div class="attachment_header">
                    @if (f.file_extension == ".jpg" || f.file_extension == ".png" || f.file_extension == ".jpeg"){
                        <div style="background-image : url(@image_url(f.file_name))" class="bg_attachfile"></div>
                    }else if(f.file_extension == ".docx" || f.file_extension == ".xlsx" || f.file_extension == ".pdf"){
                        <a target="_blank" href="Upload/@f.file_name">
                            <img src="@image_url($"{f.file_extension.Replace(".","")}.png")" class="uk-image" width="70" />
                        </a>
                    }
                </div>
                <div class="attachement_footer">
                    <div>
                    @if (!IsReadOnly)
                    {
                        @if (!f.is_editing)
                        {
                            <div class="uk-text-truncate" uk-tooltip="@f.file_title">@f.file_title</div>
                            <div>@image_size_unit(f.file_size) Mb</div>
                            <div>@f.note</div>
                             
                            @if (f.is_deleting)
                            {
                                <Spinner />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Outlined.Edit" OnClick="@(() => f.is_editing = true)"  />
                                <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="@(() => DeleteAttachFile_Click(f))" />
                            }

                        }
                        else
                        {

                            <EditForm Model="@f" class="form" OnValidSubmit="@(() => SaveAttachFile_Click(f))">
                                <div class="wrp-upload-edit-inputs">
                                    <MudTextField @bind-Value="@f.file_title" Placeholder="File title" /> 
                                    <MudTextField @bind-Value="@f.note" Placeholder="File Description" />
                                </div>

                                <div>
                                    @if (f.is_saving)
                                    {
                                        <Spinner />
                                    }
                                    else
                                    {
                                        <MudButton Class="btn-off-canvas" ButtonType="ButtonType.Submit">Save</MudButton>
                                        <MudButton Class="btn-off-canvas" OnClick="@(() => f.is_editing = false)" ButtonType="ButtonType.Reset">Cancel</MudButton>

                                    }

                                </div>

                            </EditForm>
                        }
                    }
                    else
                    {
                        <div class="uk-text-truncate" uk-tooltip="@f.file_title">@f.file_title</div>
                    }
                </div>
            </div>
         </div>

        }
    }
    else
    {
        <div class="uk-text-center text-muted">
            <MudIcon Icon="@Icons.Outlined.Image" /> No files or images
        </div>
    }
</div>
@code
{
    [CascadingParameter] public GlobalVariableModel gv {get; set;}
    //proper ty
    [Parameter] public string RoleView { get; set; }
    [Parameter] public string RoleAdd { get; set; }
    [Parameter] public string RoleEdit { get; set; }
    [Parameter] public string RoleDelete { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public bool IsReadOnly { get; set; } = false;

    [Parameter] public List<AttachFilesModel> AttachFiles { get; set; }
    [Parameter] public AttachFilesModel file { get; set; }


    //event call back
    [Parameter] public EventCallback<AttachFilesModel> OnUploadAttachFile { get; set; }
    [Parameter] public EventCallback<AttachFilesModel> OnDeleteAttachFile { get; set; }
    [Parameter] public EventCallback<AttachFilesModel> OnEditAttachFile { get; set; }

    InputFileData _data_form = new InputFileData();
    bool IsUploaded,is_loading = false;
    string status_message = "";

    string image_url(string image_base_url) {
        return $"{config["BaseUrl"]}upload/{image_base_url}";
    }

    string image_size_unit(long size)
    {
        var mb = size / (512000 * 2);
        return String.Format("{0:0.00}", mb);
    }

    private async Task HandleSelection(InputFileChangeEventArgs files)
    {

        var uploaded_file = files.GetMultipleFiles().FirstOrDefault();
        is_loading = true;


        //check if file extension 
        FileInfo _file = new FileInfo(uploaded_file.Name);
        var file_extension = _file.Extension.ToLower();
        List<string> accept_extension = new List<string>(new string[] { ".jpg", ".png", ".jpeg", ".xls", ".cvs", ".doc", ".pdf" });
        if (!accept_extension.Contains(file_extension))
        {
            toast.Add("Incorrect File Extension", Severity.Warning);
            is_loading = false;
            return;
        }

        await SendFileUpload(files);
        if (IsUploaded) {

            file.file_name = _data_form.ImageUrl;
            file.file_title = uploaded_file.Name;
            file.file_type = uploaded_file.ContentType;
            file.file_size = uploaded_file.Size;
            file.file_extension = file_extension;
            var resp = await http.ApiPost($"AttachFiles/save", file);
            if (resp.IsSuccess)
            {
                toast.Add("File save successfully", Severity.Success);
                await OnUploadAttachFile.InvokeAsync(JsonSerializer.Deserialize<AttachFilesModel>(resp.Content.ToString()));
            }
            else
            {
                toast.Add(resp.Content.ToString(), Severity.Warning);
            }
        }
        is_loading = false;
    }

    async Task SaveAttachFile_Click(AttachFilesModel f)
    {
        is_loading = true;
        f.is_saving = true;

        if (f != null)
        {

            var resp = await http.ApiPost($"AttachFiles/save", f);
            if (resp.IsSuccess)
            {
                toast.Add("File is save successfully", Severity.Success);

            }
            else
            {
                toast.Add(resp.Content.ToString(), Severity.Warning);
            }
            await OnEditAttachFile.InvokeAsync(JsonSerializer.Deserialize<AttachFilesModel>(resp.Content.ToString()));
        }
        is_loading = false;
        f.is_saving = false;
        f.is_editing = false;
    }


    async Task DeleteAttachFile_Click(AttachFilesModel f)
    {

        is_loading = true;
        f.is_deleting = true;
        var result = await confirm.ShowMessageBox("Delete attach file", "Are you sure you want to delete this attach file?");
        if (Convert.ToBoolean(result))
        {

            f.is_deleted = true;
            var resp = await http.ApiPost($"AttachFiles/delete/{f.id}");
            if (resp.IsSuccess)
            {
                toast.Add("Delete file successfully", Severity.Success);
            }
            else
            {
                toast.Add(resp.Content.ToString(), Severity.Warning);
            }
            await OnDeleteAttachFile.InvokeAsync(JsonSerializer.Deserialize<AttachFilesModel>(resp.Content.ToString()));

        }
        f.is_deleting = false;
        is_loading = false;
    }

    async Task SendFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        _data_form = new InputFileData();
        long maxFileSize = 1024 * 1024 * 2;
        if (file != null)
        {
            if(file.Size > maxFileSize)
            {
                toast.Add("Maximum file size 2MB",Severity.Error);
                return;
            }

            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            string _new_image = string.Format("{0:yyyyMMddHHmmss}", DateTime.Now) + file.Name;


            _data_form.ImageUrl = _new_image;
            _data_form.multipartForm.Add(
                        content: fileContent,
                        name: "\"upload\"",
                        fileName: _new_image);

                        //send file upload
            var client = new HttpClient();

            var url = $"{config["apiBaseUrl"]}upload?folder={_data_form.SaveFolderPath}";
            var resp = await client.PostAsync(url, _data_form.multipartForm);

            if (resp.IsSuccessStatusCode)
            {
                IsUploaded = true;
            }else{
                IsUploaded = false;
            }
        }
    }

}