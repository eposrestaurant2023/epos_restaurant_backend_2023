<div class="uk-margin-small">
    <label class="uk-form-label" for="@id">@label</label>
    <div class="uk-form-controls">
        <select id="@id" value="@selected_value" @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-form-small @width">
            @if (show_empty)
            {
                <option value="0">@empty_text</option>
            }
           @foreach(var d  in outlets)
           {
               <option value="@d.id">@d.outlet_name_en</option>
           }
        </select>
        @ChildContent
    </div>
</div>

@code{

    [Parameter] public List<OutletModel> outlets { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string label { get; set; } = "Outlet";
    [Parameter] public bool show_empty { get; set; } = true;
    [Parameter] public string empty_text { get; set; } = "Select Outlet";

    [Parameter] public string width { get; set; } = "100%";
    [Parameter] public int selected_value { get; set; } = 0;
    [Parameter] public EventCallback<int> selected_valueChanged { get; set; }



    Guid id = Guid.NewGuid();

    private async Task SelectedValueChange(string n)
    {

        await selected_valueChanged.InvokeAsync(Convert.ToInt32(n));

    }

}
