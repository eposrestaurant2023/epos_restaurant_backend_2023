@inherits PageCore
@inject IDialogService Dialog
<UIPanel Title="Title">
    
    <UIPanelHeaderRight>
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@AddNewClick">
            
        </MudIconButton>
    </UIPanelHeaderRight>
    <UIPanelBody>
        @if (!is_loading && contacts != null)
        {
            <MudList>
                @foreach(var c in contacts){
                    <MudListItem Class="list-item">
                    <MudItem Class="d-flex">
                        <MudItem Class="list-item-title">
                            <MudAvatar Image="@($"{config.GetValue<string>("BaseUrl")}upload/{c.photo}")" Size="Size.Large"/>
                        </MudItem>
                        <MudItem Class="px-4">
                            @c.contact_name<br/>
                            <MudText Typo="Typo.caption">
                                 @c.phone_1 / @c.phone_2
                            </MudText>
                            <br />
                            <MudText Typo="Typo.caption">
                                  @c.telegram
                            </MudText>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.caption">
                                 @c.telegram / @c.email_address
                            </MudText>
                            <br />
                            <MudText Typo="Typo.caption">
                                  @c.telegram
                            </MudText>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.caption">
                                 @c.telegram / @c.email_address
                            </MudText>
                        </MudItem>
                            <MudSpacer/>
                         <MudItem>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Direction="Direction.Right">
                                <TableActionItem icon="@Icons.Material.Filled.Visibility" roles="@gv.GetRole("customer_edit")" OnClick="@(()=>EditClick(c))">Edit</TableActionItem>
                                <TableActionItem icon="@Icons.Material.Filled.ContentCopy" roles="@gv.GetRole("customer_edit")" OnClick="@(()=>DeleteClick(c))">Delete</TableActionItem>
                            </MudMenu>
                        </MudItem>
                    </MudItem>
                   
                   
                    
                        
                </MudListItem>
            }
            </MudList>
        }
    </UIPanelBody>
</UIPanel>

@code{
    [Parameter] public string customer_id {get;set;}
    List<ContactModel> contacts { get; set; } = new List<ContactModel>();
    protected override async Task OnInitializedAsync()
    {
        is_loading=true;
        var res = await http.ApiGetOData($"Contact?$filter=customer_id eq {customer_id}");
        if(res.IsSuccess){
            contacts = JsonSerializer.Deserialize<List<ContactModel>>(res.Content.ToString());
        }
        is_loading = false;
    }

    async Task AddNewClick()
    {
        var parameters = new DialogParameters { ["model"]=new ContactModel(){ customer_id = new Guid(customer_id) }};
        var dialog = Dialog.Show<ComCustomerDetailAddContact>("New Contact",parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            contacts.Add((ContactModel)result.Data);
        }
    }
    async Task EditClick(ContactModel c)
    {
        var parameters = new DialogParameters();
        var res = await http.ApiGet($"contact({c.id})");
        if (res.IsSuccess)
        {
            c = JsonSerializer.Deserialize<ContactModel>(res.Content.ToString());
        }
        parameters.Add("model", c);
        var dialog = Dialog.Show<ComCustomerDetailAddContact>("Edit Contact",parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            contacts.Add((ContactModel)result.Data);
        }
    }
     async Task DeleteClick(ContactModel c)
    {
        string message = "Are you sure you want to delete this Contact?";
        bool? result = await Dialog.ShowMessageBox("Warning", message, "Delete", cancelText: "Cancel");
        if (result != null)
        {
            is_loading = true;
            StateHasChanged();
            var res = await http.ApiPost($"contact/delete/{c.id}");
            if(res.IsSuccess)
            {
                contacts.Remove(c);
                AddToast("Delete Successfully");
            }
        }
        is_loading = false;
    }
}