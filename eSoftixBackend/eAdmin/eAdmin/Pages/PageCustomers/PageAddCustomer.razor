@page "/customer/new"
@page "/customer/edit/{id:int}"
@page "/customer/clone/{clone_id:int}"
@inherits PageCore


<Loading is_loading="@is_loading" />

 @if (!is_loading)
{
    <Title Value="@title"></Title>
    <PageContainer roles="@gv.GetRole($"{((clone_id > 0) || (clone_id == 0 && id == 0) ? "customer_add" : "customer_edit") }")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle ShowFilter="false">
                    <HeaderTemplate>
                        @if (id > 0)
                        {
                            <span>@model.customer_code - @model.customer_name_en</span>
                            <LabelActive is_visible="@(!model.is_deleted && model.status)"/>
                            <LabelDeleted is_visible="@(model.is_deleted)"/>
                            <LabelInActive is_visible="@(!model.is_deleted && !model.status)"/>
                        }
                        else
                        {
                            <span>@title</span>
                        }
                    </HeaderTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight ShowBackButton="true">
            </HeaderRight>
        </PageHeader>
        <EditForm Model="@model" OnValidSubmit="@(()=>Save_Click(false))" @attributes="@formAttributes">
            <DataAnnotationsValidator />
            <PageBody>
                <UIGridCenter>
                   <ComAddCustomerForm model="@model"/>
                </UIGridCenter>
            </PageBody>
            <PageFooter>
                <FooterCenter>
                    <Button is_visible="@is_saving"><Spinner /></Button>
                    <Button icon="save" class_name="uk-button uk-button-primary" roles="@gv.GetRole("customer_add")" is_visible="@(!is_saving)" type="submit">Save</Button>
                    <Button icon="save" class_name="uk-button uk-button-primary" OnClick="@(()=>is_save_and_new = true)" roles="@gv.GetRole("customer_add")" is_visible="@(!is_saving)" type="submit">Save & New</Button>
                    <Button icon="save" class_name="uk-button uk-button-primary" OnClick="@(()=>is_save_and_order = true)" roles="@gv.GetRole("customer_add")" is_visible="@(!is_saving)" type="submit">Save & Invoice</Button>
                    <Button OnClick="@OnCancel" is_visible="@(!is_saving)" class_name="uk-button uk-button-danger" icon="reply">Cancel</Button>
                </FooterCenter>
            </PageFooter>
        </EditForm>        
    </PageContainer>

    @if (is_customer_exist)
    {
        <ComExistingCustomerInformation data="@existing_customer_info" is_opened="@is_customer_exist" OnClose="@(()=>is_customer_exist=false)" OnSaveNewRecord="@SaveNewRecord"/>
    }
}
@code{
    [Parameter] public int id { get; set; }
    [Parameter] public int clone_id { get; set; }
    [Parameter] public bool is_customer_exist { get; set; }
    CustomerModel model = new CustomerModel();

    ApiResponseModel existing_customer_info= new  ApiResponseModel();
    bool is_save_and_new , is_save_and_order;

    public string api_url
    {
        get
        {
            return $"customer({id})?$expand=customer_health_issues";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!is_loading)
        {
            is_loading = true;
             
            if (id > 0 || clone_id > 0)
            {
                if (id > 0)
                {
                    var res = await http.ApiGet(api_url);
                    if (res.IsSuccess)
                    {
                        model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                        title = $"Edit : {model.customer_name_en}";
                    }
                    else
                    {
                        toast.Add(res.Content.ToString(), MatToastType.Warning);
                    }
                }
                else
                {
                    var res = await http.ApiPost($"customer/clone/{clone_id}");
                    if (res.IsSuccess)
                    {
                        model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                        title = $"Clone : {model.customer_name_en}";
                    }
                    else
                    {
                        toast.Add(res.Content.ToString(), MatToastType.Warning);
                    }
                }
            }
            else
            {
                title = "Add New Customer";
            }
            is_loading = false;
        }
    }

    async Task Save_Click(bool allow_duplicate_name = false)
    {
        if (!is_saving)
        {
            is_saving = true;
            
            var res = await http.ApiPost($"customer/save?allow_duplicate_name={allow_duplicate_name}", model);
            if (res.IsSuccess)
            {
                if (res.Content.ToString() == "Customer Code already exist!")
                {
                    toast.Add(res.Content.ToString(), MatToastType.Warning);
                }
                else
                {
                    model = JsonSerializer.Deserialize<CustomerModel>(res.Content.ToString());
                    toast.Add("Saving Customer successfully", MatToastType.Success);
                    if (is_save_and_new)
                    {
                        model = new CustomerModel();
                        id = 0;
                        title = "Add New Customer";
                    }
                    else if (is_save_and_order) {
                        nav.NavigateTo($"sale/customer/{model.id}");
                    }
                    else
                    {
                        nav.NavigateTo($"customer/{model.id}");
                    }
                }
            }
            else
            {

                is_saving = false;
                //check response code status and 
                if(res.status_code >= 400 && res.status_code <= 499)
                {
                    is_customer_exist = true;
                    existing_customer_info = JsonSerializer.Deserialize<ApiResponseModel>(res.Content.ToString());

                    toast.Add(existing_customer_info.message, MatToastType.Warning);

                }
                else
                {
                    toast.Add(res.Content.ToString(), MatToastType.Warning);
                }

            }
            //testing
            is_saving = false;
        }
    }

    async Task SaveNewRecord()
    {
        is_customer_exist = false;
        await Save_Click(true);

    }

    void OnCancel()
    {
        if (id > 0)
        {
            nav.NavigateTo($"customer/{id}");
        }
        else
        {
            nav.NavigateTo("customer");
        }
    }
}
