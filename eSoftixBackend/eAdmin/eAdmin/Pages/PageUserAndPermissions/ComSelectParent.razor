@typeparam TItem

<div class="uk-margin-small">
    <label class="uk-form-label" for="@id">@label</label>
    <div class="uk-form-controls">
        <select id="@id" value="@selected_value"  @onchange="@((ui) => SelectedValueChange((string)ui.Value))" class="uk-select uk-width-medium uk-form-small">
            @if (show_empty_select)
            {
                <option value="" selected>@empty_text</option>
            }

            @foreach (var item in Items)
            {
                @ItemTemplate(item)
            }
        </select>

        @ValidationTemplate
    </div>
</div>

@code{

    [Parameter] public string selected_value { get; set; } 
    [Parameter] public string label { get; set; } = "";
    [Parameter] public bool show_empty_select { get; set; } = false;
    [Parameter] public string empty_text { get; set; } = "Please Select";


    [Parameter] public EventCallback<String> selected_valueChanged { get; set; }

    Guid id = Guid.NewGuid();

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem> ValidationTemplate { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }


        private async Task SelectedValueChange(string n)
    {
        selected_value = n;
        await selected_valueChanged.InvokeAsync(selected_value);
    }
}


