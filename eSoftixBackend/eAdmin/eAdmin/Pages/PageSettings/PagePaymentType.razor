@page "/paymenttype"
@inherits PageCore;


<Loading is_loading="@(is_loading || is_loading_data)" />
@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}
@if (!is_loading)   
{
    <Title Value="@state.page_title"></Title>
    <PageContainer roles="@gv.GetRole("payment_type_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle>
                    <HeaderTemplate>
                        @state.page_title
                    </HeaderTemplate>
                    <FilterTemplate>
                        <PageFilter title="Status">
                            <ModuleView module_views="@gv.GetModuleView("page_payment_type")" OnClick="@ViewClick" />
                        </PageFilter>
                    </FilterTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <AddButton roles="@gv.GetRole("payment_type_add")" OnClick="@AddNew">New</AddButton>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="false" />
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <Com is_visible="@(payment_types != null)">
                <Table PerPage="@state.pager.per_page"
                       TotalItem="@TotalRecord"
                       ShowCounter="true"
                       CurrentPage="@state.pager.current_page"
                       OnPagerChange="@SelectChange"
                       OnPageChange="@ChangePager"
                       isLoading="@is_loading_data"
                       Items="@payment_types"
                       ShowPager="true"
                       ShowPagination="true"
                       EmptyText="There's no record in the system">
                    <TableHeader>
                        <ThCenter>Image</ThCenter>
                        <Th OnClick="@(async () => await OrderBy("payment_type_name"))" OrderBy="@(state.pager.order_by == "payment_type_name")" OrderByType="@state.pager.order_by_type" ClassName="cp col-auto">Payment Type</Th>
                        @HeaderTemplate("status", "Status")
                        <th></th>
                    </TableHeader>
                    <RowTemplate Context="p">
                        <TdCenter>
                            <Image ImageUrl="@(http.ImageUrl(p.photo))" IsBackgroundImage="true" Width="50px" Height="50px" />
                        </TdCenter>
                        <td>
                            @if (p.is_build_in == false)
                                {
                                @if (!p.is_deleted)
                                    {
                                    <ComAuthorize roles="@gv.GetRole("payment_type_edit")" OnClick="@(()=>OnEdit(p.id))">
                                        @p.payment_type_name_en
                                    </ComAuthorize>
                                    }
                                    else
                                    {
                                    @p.payment_type_name_en
                                    }
                                }
                                else
                                {
                                @p.payment_type_name_en
                                }
                        </td> 
                        <TdCenter>
                            @if (p.is_build_in)
                                {
                                <LabelDeleted is_visible="@p.is_deleted" />
                                <LabelActive is_visible="@(!p.is_deleted && p.status)" is_loading="@p.is_change_status" />
                                <LabelInActive is_visible="@(!p.is_deleted && !p.status)" is_loading="@p.is_change_status" />
                                }
                                else
                                {
                                <LabelDeleted is_visible="@p.is_deleted" />
                                <LabelActive is_visible="@(!p.is_deleted && p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("payment_type_edit")" is_loading="@p.is_change_status" />
                                <LabelInActive is_visible="@(!p.is_deleted && !p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("payment_type_edit")" is_loading="@p.is_change_status" />
                                }
                        </TdCenter>
                        @if (p.is_build_in)
                            {
                            <TdActions is_loading="@p.is_loading">
                                <TableActionItem roles="@gv.GetRole("payment_type_add")" icon="file_copy" OnClick="@(()=>Clone_Click(p.id))">Clone</TableActionItem>
                            </TdActions>
                            }
                            else
                            {
                            <TdActions is_loading="@p.is_loading">
                                <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="edit" is_visible="@(!p.is_deleted)" OnClick="@(()=>OnEdit(p.id))">Edit</TableActionItem>
                                <TableActionItem roles="@gv.GetRole("payment_type_add")" icon="file_copy" OnClick="@(()=>Clone_Click(p.id))">Clone</TableActionItem>
                                <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="highlight_off" is_visible="@(p.status && !p.is_deleted)" OnClick="@(()=>OnToogleStatus(p))">Inactive</TableActionItem>
                                <TableActionItem roles="@gv.GetRole("payment_type_edit")" icon="check" is_visible="@(!p.status && !p.is_deleted)" OnClick="@(() => OnToogleStatus(p))">Active</TableActionItem>
                                <TableActionItem roles="@gv.GetRole("payment_type_delete")" icon="delete" is_visible="@(!p.is_deleted && !p.is_build_in)" OnClick="@(() => OnDelete(p))">Delete</TableActionItem>
                                <TableActionItem roles="@gv.GetRole("payment_type_restore")" icon="refresh" is_visible="@(p.is_deleted)" OnClick="@(()=>OnRestore(p))">Restore</TableActionItem>
                            </TdActions>
                            }
                    </RowTemplate>
                </Table>
            </Com>
        </PageBody>
        @if (ShowModal)
        {
            <ComAddPaymentType is_dialog_open="@ShowModal" model="@model" Cancel_click="@(()=> { ShowModal = false; model = new PaymentTypeModel();  })" Save_Click="@OnSave" modal_title="@ModalTitle" />
        }
    </PageContainer>
}
@code{
    List<PaymentTypeModel> payment_types = new List<PaymentTypeModel>();
    PaymentTypeModel model = new PaymentTypeModel();

    string StateKey = "278484567GstwnZ254kjuylinrbB3PCz2Ts"; //Storage and Session Key

    int TotalRecord = 0;
    bool ShowModal = false;
    string ModalTitle = "";

    string controller_api = "PaymentType";
    DateTime date = DateTime.Now;

    public string ControllerApi
    {
        get
        {
            if (state.pager.order_by == "")
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);

        }
    }


    protected override async Task OnInitializedAsync()
    {
        is_loading = true;

        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "Payment Type";
            var default_view = gv.GetDefaultModuleView("page_payment_type");
            if (default_view != null)
            {
                state.page_title = default_view.title;
                state.filters = default_view.filters;
            }

        }
        if (state.filters.Count == 0)
        {

            state.filters.Add(new FilterModel()
            {
                key = "is_deleted",
                value1 = "false"
            });

        }
        await LoadData(state.api_url);

    }

    void AddNew()
    {
        ShowModal = true;
        ModalTitle = "Payment Type";
    }

    async Task Clone_Click(int id)
    {
        is_loading_data = true;
        var resp = await http.ApiPost(controller_api + "/clone/" + id);
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PaymentTypeModel>(resp.Content.ToString());
        }
        ModalTitle = "Clone:" + model.payment_type_name_en;
        ShowModal = true;
        is_loading_data = false;
    }

    async Task ViewClick(ModuleViewModel m)
    {
        state.filters.Clear();
        state.filters = m.filters;
        state.page_title = m.title;
        state.pager.current_page = 1;
        await LoadData();
    }

    async Task LoadData(string api_url = "")
    {

        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
            await SetState(StateKey, state);

        }
        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            payment_types = JsonSerializer.Deserialize<List<PaymentTypeModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }
        is_loading = false;
    }

    async Task OrderBy(string col_name = "")
    {
        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");
        await LoadData();
    }

    async Task OnSave()
    {
        await LoadData();
        ShowModal = false;
        model = new PaymentTypeModel();
    }


    async Task OnEdit(int id)
    {
        is_loading_data = true;
        var resp = await http.ApiGet(controller_api + $"({id})");
        if (resp.IsSuccess)
        {
            model = JsonSerializer.Deserialize<PaymentTypeModel>(resp.Content.ToString());
        }
        ModalTitle = "Edit:" + model.payment_type_name_en;
        ShowModal = true;
        is_loading_data = false;
    }


    async Task OnToogleStatus(PaymentTypeModel p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }

    async Task OnToogleStatusLabel(PaymentTypeModel p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }

    async Task SaveStatus(PaymentTypeModel p)
    {
        var paymentType = new PaymentTypeModel();
        paymentType = p;
        paymentType.status = !paymentType.status;
        var resp = await http.ApiPost(controller_api + "/save", paymentType);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            if (payment_types.Count() == 1 && state.pager.current_page > 1)
            {
                state.pager.current_page = state.pager.current_page - 1;
            }

            await LoadData();
        }
    }

    async Task OnDelete(PaymentTypeModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Delete Payment Type", "Are you sure you want to delete this record?"))
        {

            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);


            if (resp.IsSuccess)
            {

                if (payment_types.Count() == 1 && state.pager.current_page > 0)
                {
                    state.pager.current_page = state.pager.current_page - 1;
                }

                await LoadData();
            }
            toast.Add("Delete Payment Type successfully", MatToastType.Success);

        }

        p.is_loading = false;

    }
    async Task OnRestore(PaymentTypeModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Restore Payment Type", "Are you sure you want to restore this record?"))
        {

            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                if (payment_types.Count() == 1 && state.pager.current_page > 1)
                {
                    state.pager.current_page = state.pager.current_page - 1;
                }
                await LoadData();
            }
            toast.Add("Restore Payment Type successfully", MatToastType.Success);

        }
        p.is_loading = false;

    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }
    public async Task ChangePager(int _page)
    {
        state.pager.current_page = _page;
        await LoadData();
    }
    async Task OnSearch(string keyword)
    {
        state.pager = new PagerModel();
        SetFilterValue2(state.filters, "keyword", keyword);
        await LoadData();
    }
}




