@inject IJSRuntime js
@inherits PageCore;
<Loading is_loading="@is_loading" />
@if (!is_loading)
{
    <EditForm Model="@model" OnValidSubmit="@Save_Click">
        <DataAnnotationsValidator />
        <PageBody>
            <UIGridCenter>
                <UIContainerBox Title="Outlet Infor" OnAddClick="@(()=>Add_station())" is_show_add_button="true">
                    <TextInput @bind-text="@model.outlet_name_en" label="Outlet Name En">
                        <ValidationMessage For="@(() => model.outlet_name_en )" />
                    </TextInput>
                    <TextInput @bind-text="@model.outlet_name_kh" label="Outlet Name kh" />
                    <SelectGUID Items="business_branh" @bind-SelectedValue="@model.business_branch_id" InputLabel="Business Branch" EmptyText="Select Business Branch" ShowEmptyText="true">
                        <SelectOptions Context="b">
                            <option value="@b.id">@b.business_branch_name_en</option>
                        </SelectOptions>
                        <ValidationTemplate>
                            <ValidationMessage For="@(() => model.business_branch_id )" />
                        </ValidationTemplate>
                    </SelectGUID>
                    <ComInputCheckBox @bind-value="@model.status" label="Status" label_inline="true" />
                    <UIContainerBox Title="Station Info" is_show_add_button="true" OnAddClick="@(()=>Add_station())">
                        <table class="uk-table  view_table set-verticle-middle uk-table-small uk-table-striped uk-table-hover">
                            <tr>
                                <Th>Station Name En</Th>
                                <Th>Station Name Kh</Th>
                                <ThCenter></ThCenter>
                            </tr>

                            @foreach (var s in model.stations.Where(r => r.is_deleted == false).ToList())
                            {
                                <tr>
                                    <td>
                                        <TextInput @bind-text="@s.station_name_en" />
                                    </td>
                                    <td>
                                        <TextInput @bind-text="@s.station_name_kh" />
                                    </td>
                                    <TdCenter>
                                        <Icon icon="delete" OnClick="@(()=>Delete_station(s))" />
                                    </TdCenter>
                                </tr>

                            }
                        </table>
                    </UIContainerBox>
                </UIContainerBox>
            </UIGridCenter>
        </PageBody>
        <PageFooter>
            <FooterCenter>
                <ComSavingFormButton is_loading="@is_saving" cancel_url="outletstation" />
            </FooterCenter>
        </PageFooter>

    </EditForm>

}

@code{
    public string id { get; set; }
    OutletModel model = new OutletModel();
    List<StationModel> stations = new List<StationModel>();
    List<BusinessBranchModel> business_branh = new List<BusinessBranchModel>();
    string ControllerApi = "Outlet";
    bool ShowModel = false;
    public string api_url
    {
        get
        {
            string query = ControllerApi;
            query = query + $"({id})?";
            query = query + "$expand=Station($select=id,station_name_en,station_name_kh),";
            query = query + "$expand=business_branch($select=id,business_branch_name_en,business_branch_name_kh)";

            return query;

        }
    }



    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        await LoadData("");
        is_loading = false;
    }



    async Task Activebutton(OutletModel b)
    {

        b.is_change_status = true;
        await Task.Delay(1000);
        b.status = !b.status;

        var resp = await http.ApiPost($"{ControllerApi}/Save", b);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
        }

        b.is_change_status = false;

    }

    async Task LoadStation(string api_url = "")
    {

        is_loading_data = true;

        if (string.IsNullOrEmpty(api_url))
        {

            api_url = "Station";
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {

            stations = JsonSerializer.Deserialize<List<StationModel>>(resp.Content.ToString());

        }
        is_loading_data = false;

    }



    async Task LoadData(string api_url = "")
    {

        is_loading_data = true;

        if (string.IsNullOrEmpty(api_url))
        {
            api_url = ControllerApi;
            api_url = api_url + $"({id})?";
            api_url = api_url + "$expand=Stations($select=id,station_name_en,station_name_kh;$filter= is_deleted eq false),";
            api_url = api_url + "business_branch($select=id,business_branch_name_en,business_branch_name_kh)";




        }

        var resp = await http.ApiGet(api_url);
        if (resp.IsSuccess)
        {

            model = JsonSerializer.Deserialize<OutletModel>(resp.Content.ToString());

        }
        is_loading_data = false;

    }


    async Task Save_Click(EditContext editContext)
    {
        OutletModel d = model;
        if (!is_saving)
        {
            is_saving = true;

            Object obj = new Object();
            OutletModel save_outlet = JsonSerializer.Deserialize<OutletModel>(JsonSerializer.Serialize(d));

            var res = await http.ApiPost($"{ControllerApi}/save", save_outlet);
            if (res.IsSuccess)
            {
                obj = JsonSerializer.Deserialize<OutletModel>(res.Content.ToString());

                toast.Add("Saving successfully", MatToastType.Success);
                nav.NavigateTo($"outletstation");
            }
            else
            {
                is_saving = false;
                toast.Add(res.Content.ToString(), MatToastType.Warning);
            }
        }
    }

    void Add_station()
    {
        model.stations.Add(new StationModel()
        {
            station_name_en = "Station " + (model.stations.Count() + 1),
            station_name_kh = "Station " + (model.stations.Count() + 1),

        });



    }

    void Delete_station(StationModel s)
    {
        if (s.id == Guid.Empty)
        {
            model.stations.Remove(s);
        }
        else
        {
            s.is_deleted = true;
        }
    }


}
