@*@page "/customergroup"
@inherits PageCore 
<Loading is_loading="@(is_loading || is_loading_data)" />

@{
    RenderFragment HeaderTemplate(string field_name, string display_name, string ClassName = "") =>
    @<Th OnClick="@(async () => await OrderBy(field_name))" OrderBy="@(state.pager.order_by == field_name)" OrderByType="@state.pager.order_by_type" ClassName="@($"cp {ClassName}")"> @display_name</Th>;
}

@if (!is_loading)
{

    <Title Value="Customer"></Title>
    <PageContainer roles="@gv.GetRole("customer_group_management")">
        <PageHeader>
            <HeaderLeft>
                <PageTitle>
                    <HeaderTemplate>
                        @state.page_title
                    </HeaderTemplate>
                    <FilterTemplate>
                        <PageFilter title="Status">
                            <ModuleView module_views="@gv.GetModuleView("page_customer_group")" OnClick="@ViewClick" />
                        </PageFilter>
                    </FilterTemplate>
                </PageTitle>
            </HeaderLeft>
            <HeaderRight>
                <AddButton roles="@gv.GetRole("customer_group_add")" OnClick="(() => { onShowModal = true; })">New</AddButton>
                <RefreshButton OnClick="@(async()=>await LoadData())" />
                <ComSearch place_holder="@GetFilterValue2(state.filters, "keyword","")" KeywordChanged="@OnSearch" show_advance_filter="true" OnFillterClick="@FilterClick">
                    <SelectOutlet @bind-outlet="@state.outlet" show_empty="true" empty_text="All Outlet" />
                    <SelectCustomerGroup @bind-customer_group="@state.customer_group" show_empty="true" empty_text="All Customer Group" />
                </ComSearch>
            </HeaderRight>
        </PageHeader>
        <PageBody>
            <FilterInfo filters="@state.filters" OnRemoveFilterClick="@RemoveFilter" OnRemoveAllFilterClick="@RemoveAllFilter" />
            <Com is_visible="@(customer_groups != null)">
                <Table Items="@customer_groups"
                       PerPage="@state.pager.per_page"
                       TotalItem="@TotalRecord"
                       CurrentPage="@state.pager.current_page"
                       OnPagerChange="@SelectChange"
                       OnPageChange="@ChangePager"
                       isLoading="@is_loading_data"
                       ShowPager="true"
                       ShowCounter="true"
                       ClassName="uk-table-small uk-table-striped uk-table-hover"
                       ScrollClass="uk-overflow-auto"
                       EmptyText="There is no record.">
                    <TableHeader>
                        @HeaderTemplate("customer_group_name_en", "Name (En)", "col-auto")
                        @HeaderTemplate("customer_group_name_kh", "Name (Kh)", "col-auto")
                        @HeaderTemplate("status", "Status", "uk-width-auto uk-text-center")
                        <th class="uk-width-auto"></th>
                    </TableHeader>
                    <RowTemplate Context="p">
                        <TdCenter>
                            <ComAuthorize roles="@gv.GetRole("customer_group_edit")">
                                @p.customer_group_name_en / @p.customer_group_name_kh
                            </ComAuthorize>
                        </TdCenter>
                        <td>
                            <TextOverflow Text="@p.note"/>
                        </td>
                        <TdCenter>
                            <LabelDeleted is_visible="@p.is_deleted" />
                            <LabelActive is_visible="@(!p.is_deleted && p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("customer_edit")" is_loading="@p.is_change_status" />
                            <LabelInActive is_visible="@(!p.is_deleted && !p.status)" OnClick="(()=>OnToogleStatusLabel(p))" roles="@gv.GetRole("customer_edit")" is_loading="@p.is_change_status" />
                        </TdCenter>
                        <TdActions is_loading="@p.is_loading">
                            <TableActionItem roles="@gv.GetRole("customer_group_edit")" icon="edit" is_visible="@(!p.is_deleted)" OnClick="@(()=>OnEdit(p.id))">Edit</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("customer_group_add")" icon="file_copy" OnClick="@(()=>Clone_Click(p.id))">Clone</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("customer_group_edit")" icon="highlight_off" is_visible="@(p.status && !p.is_deleted)" OnClick="@(()=>OnToogleStatus(p))">Inactive</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("customer_group_edit")" icon="check" is_visible="@(!p.status && !p.is_deleted)" OnClick="@(() => OnToogleStatus(p))">Active</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("customer_group_delete")" icon="delete" is_visible="@(!p.is_deleted)" OnClick="@(() => OnDelete(p))">Delete</TableActionItem>
                            <TableActionItem roles="@gv.GetRole("customer_group_restore")" icon="refresh" is_visible="@(p.is_deleted)" OnClick="@(()=>OnRestore(p))">Restore</TableActionItem>
                        </TdActions>
                    </RowTemplate>
                </Table>
            </Com>
        </PageBody>
    </PageContainer>
    if (onShowModal)
    {
        <ComCustomerGroupModal @bind-is_open="@onShowModal" model="@model" CancelClick="@(()=> { onShowModal = false; })" SaveClick="OnSave"/>
    }
}


@code {
    public List<CustomerGroupModel> customer_groups = new List<CustomerGroupModel>();
    public CustomerGroupModel model = new CustomerGroupModel();

    public string StateKey = "278484567Gs252485GytkjhTonB3PCz2Ts"; //Storage and Session Key
    bool onShowModal=false;
    public int TotalRecord = 0;
    public bool ShowModal = false;
    public string ModalTitle = "";

    string controller_api = "Customergroup";

    DateTime date = DateTime.Now;

    public string ControllerApi
    {
        get
        {
            if (string.IsNullOrEmpty(state.pager.order_by))
            {
                state.pager.order_by = "id";
                state.pager.order_by_type = "desc";
            }
            string url = $"{controller_api}?$expand=created_outlet&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
            return url + GetFilter(state.filters);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        is_loading = true;
        state = await GetState(StateKey);
        if (state.page_title == "")
        {
            state.page_title = "Customer Group";
            var default_view = gv.GetDefaultModuleView("page_customer_group");
            if (default_view != null)
            {
                state.page_title = default_view.title;
                state.filters = default_view.filters;
            }
        }
        if (state.filters.Count == 0)
        {
            state.filters.Add(new FilterModel()
            {
                key = "is_deleted",
                value1 = "false"
            });
        }
        await LoadData(state.api_url);
        is_loading = false;
    }

    public void OnEdit(int id)
    {
        is_loading_data = true;
        onShowModal = true;

        is_loading_data = false;
    }

    public async Task Clone_Click(int id)
    {
        is_loading_data = true;
        var res = await http.ApiGet($"customergroup({id})");
        if (res.IsSuccess)
        {
            model = JsonSerializer.Deserialize<CustomerGroupModel>(res.Content.ToString());
        }
        is_loading_data = false;
    }

    public async Task ViewClick(ModuleViewModel m)
    {
        state.filters.Clear();
        state.filters = m.filters;
        state.pager.order_by = m.default_order_by;
        state.pager.order_by_type = m.default_order_by_type;
        state.page_title = m.title;
        state.pager.current_page = 1;
        await LoadData();
    }

    public async Task LoadData(string api_url = "")
    {
        is_loading = true;
        if (string.IsNullOrEmpty(api_url))
        {
            api_url = $"{ControllerApi}";
            state.api_url = api_url;
            await SetState(StateKey, state);
        }

        var resp = await http.ApiGetOData(api_url);
        if (resp.IsSuccess)
        {
            customer_groups = JsonSerializer.Deserialize<List<CustomerGroupModel>>(resp.Content.ToString());
            TotalRecord = resp.Count;
        }
        is_loading = false;
    }

    public async Task OrderBy(string col_name = "")
    {

        state.pager.order_by = col_name;
        state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");

        await LoadData();
    }

    public async Task OnToogleStatus(CustomerGroupModel p)
    {
        p.is_loading = true;
        await SaveStatus(p);
        p.is_loading = false;
    }
    public async Task OnToogleStatusLabel(CustomerGroupModel p)
    {
        p.is_change_status = true;
        await SaveStatus(p);
        p.is_change_status = false;
    }
    public async Task SaveStatus(CustomerGroupModel p)
    {
        var resp = await http.ApiPost(controller_api + "/status", p.id);
        if (resp.IsSuccess)
        {
            toast.Add("Change status successfully", MatToastType.Success);
            if (customer_groups.Count() == 1 && state.pager.current_page > 1)
            {
                state.pager.current_page = state.pager.current_page - 1;
            }

            await LoadData();
        }
    }

    public async Task OnDelete(CustomerGroupModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Delete Customer Group", "Are you sure you want to delete this record?"))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);
            if (resp.IsSuccess)
            {
                toast.Add("Delete customer group successfully", MatToastType.Success);
                if (customer_groups.Count() == 1 && state.pager.current_page > 0)
                {
                    state.pager.current_page = state.pager.current_page - 1;
                }
                await LoadData();
            }
        }
        p.is_loading = false;
    }

    public async Task OnRestore(CustomerGroupModel p)
    {
        p.is_loading = true;
        if (await js.Confirm("Restore Customer Group", "Are you sure you want to restore this record?"))
        {
            var resp = await http.ApiPost(controller_api + "/delete/" + p.id);

            if (resp.IsSuccess)
            {
                if (customer_groups.Count() == 1 && state.pager.current_page > 1)
                {
                    state.pager.current_page = state.pager.current_page - 1;
                }
                await LoadData();
            }
            toast.Add("Restore customer group successfully", MatBlazor.MatToastType.Success);
        }
        p.is_loading = false;
    }

    async Task OnSave(CustomerGroupModel group)
    {
        var res = await http.ApiPost(controller_api+"/save", group);
        if (res.IsSuccess)
        {
            await LoadData();
        }
    }

    public async Task SelectChange(int perpage)
    {
        state.pager.per_page = perpage;
        state.pager.current_page = 1;
        await LoadData();
    }

    public async Task FilterClick()
    {


        state.pager.current_page = 1;
        await LoadData();
    }

    public async Task RemoveFilter(FilterModel f)
    {
        is_loading = true;
        string[] remove_key = f.remove_key.Split(',');
        foreach (var k in remove_key)
        {
            state.filters.RemoveAll(r => r.key == k);
        }

        state.pager.current_page = 1;
        //gv.RemoveFilter
        RemoveFilter(state, f.state_property_name);
        await LoadData();
        is_loading = false;
    }

    public async Task RemoveAllFilter()
    {
        is_loading = true;
        foreach (var f in state.filters.Where(r => r.is_clear_all == true))
        {
            RemoveFilter(state, f.state_property_name);
        }

        state.filters.RemoveAll(r => r.is_clear_all == true);
        state.pager.current_page = 1;
        await LoadData();
        is_loading = false;
    }

    public async Task ChangePager(int _page)
    {
        state.pager.current_page = _page;
        await LoadData();
    }

    public async Task OnSearch(string keyword)
    {
        state.pager = new PagerModel();
        SetFilterValue2(state.filters, "keyword", keyword);
        await LoadData();
    }
}*@
