@page "/image"
@inherits PageCore
<Loading is_loading="@is_loading"/>
@if (!is_loading)
{
 <PageContainer>
     <PageHeader title="Image">
         <Right>
             <AddButton OnClick="@OnAddNew_Click"/>
         </Right>
     </PageHeader>
     <PageBody>
               <Table Items="@images"
                PerPage="@state.pager.per_page"
                TotalItem="@TotalRecord"
                CurrentPage="@state.pager.current_page"
                OnPagerChange="@SelectChange"
                OnPageChange="@ChangePager"
                isLoading="@is_loading_data"
                ShowPager="true"
                ShowCounter="true"
                EmptyText="There is no customer record.">
            <TableHeader>
                <Th Width="188px">
                    Title
                </Th>
                 <ThCenter width="150px">
                   Image
                </ThCenter>
                <ThAuto>
                    Description
                </ThAuto>
            </TableHeader>
            <RowTemplate Context="p">
             <td>
            @p.title
             </td>
             <TdCenter>
                <MudAvatar Image="@http.ImageUrl(p.image)" Size="Size.Large" Square="true"/>
             </TdCenter>
             <td>
                @p.description
             </td>
            </RowTemplate>
        </Table>
     </PageBody>
</PageContainer>  
}

@code {
        public List<ImageModel> images = new List<ImageModel>();
        public ImageModel model = new ImageModel();

        public string StateKey = "2Iamgessss84567Gs25245KJHGytkjhTonB3PCz2Ts"; //Storage and Session Key

        public int TotalRecord = 0;
        public bool ShowModal = false;
        public string ModalTitle = "";

        string controller_api = "Image";

         public string ControllerApi
        {
            get
            {
                if (string.IsNullOrEmpty(state.pager.order_by))
                {
                    state.pager.order_by = "id";
                    state.pager.order_by_type = "desc";
                }
                string url = $"{controller_api}?&keyword={GetFilterValue2(state.filters, "keyword", "").ToString()}&$count=true&$top={state.pager.per_page}&$skip={state.pager.per_page * (state.pager.current_page - 1)}&$orderby={state.pager.order_by} {state.pager.order_by_type}";
                return url + GetFilter(state.filters);
            }
        }
         protected override async Task OnInitializedAsync()
        {
            is_loading = true;
            await LoadData();
            is_loading = false;
        }


           public async Task LoadData(string api_url = "")
        {
            is_loading = true;
            if (string.IsNullOrEmpty(api_url))
            {
                api_url = $"{ControllerApi}";
                state.api_url = api_url;
                await SetState(StateKey, state);
            }

            var resp = await http.ApiGetOData(api_url);
            if (resp.IsSuccess)
            {
                images = JsonSerializer.Deserialize<List<ImageModel>>(resp.Content.ToString());
                TotalRecord = resp.Count;
            }
            is_loading = false;
        }

          public async Task OrderBy(string col_name = "")
        {

            state.pager.order_by = col_name;
            state.pager.order_by_type = (state.pager.order_by_type == "asc" ? "desc" : "asc");

            await LoadData();
        }

        public async Task SelectChange(int perpage)
        {
            state.pager.per_page = perpage;
            state.pager.current_page = 1;
            await LoadData();
        }

        public async Task ChangePager(int _page)
        {
            state.pager.current_page = _page;
            await LoadData();
        }

        public async Task OnSearch(string keyword)
        {
            state.pager = new PagerModel();
            SetFilterValue2(state.filters, "keyword", keyword);
            await LoadData();
        }

    async Task OnAddNew_Click()
    {
        var dialog = alert.Show<ComAddImage>("New Image", new DialogOptions() {  CloseButton = true });
        var result = await dialog.Result;
        var group = (ImageModel)result.Data;
        if (!result.Cancelled)
        {
            is_loading_data=true;
            StateHasChanged();
            await Task.Delay(100);
            is_loading_data=false;
        }

    }


}
