@inject IHttpService http;
@inject ISnackbar toast;
<Loading is_loading="is_saving"/>
<UIPanel Title="System Features">
    <UIPanelHeaderRight>
        <MenuButton>
            <MenuButtonItem icon="@Icons.Material.Filled.Edit" OnClick="@OnEdit" disabled="@business_branch.is_deleted">Edit System Feature</MenuButtonItem>
        </MenuButton>
    </UIPanelHeaderRight>
    <UIPanelBody>
        @if(is_loading){
            <Spinner/>
        }else
        {
            <MudList Clickable="true">
            @foreach(var d in models.OrderBy(r=>r.system_feature.sort_order))
            {
                <MudListItem>
                    <div class="d-flex justify-space-between">
                        <div>
                              <MudText Typo="@Typo.subtitle2">@d.system_feature.feature_name</MudText>
                              <MudText Typo="@Typo.body1">@d.system_feature.feature_description</MudText>
                        </div>
                        <div>
                            @if (is_edited)
                            {
                                <MudSwitch @bind-Checked="@d.status"  Color="MudBlazor.Color.Success"  />
                            }else {
                                <MudSwitch Checked="@d.status"  Color="MudBlazor.Color.Success" Disabled="true" />
                            } 
                        </div>
                    </div>
                  </MudListItem>
                  <MudDivider/>
            }
            </MudList>
            @if (is_edited)
            {
            if (!is_saving)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="@OnSave" Class="mr-2" Variant="Variant.Filled">Save</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="@OnEdit" Class="mx-2" Color="@MudBlazor.Color.Error" Variant="Variant.Filled">Cancel</MudButton>
            }else
            {
                <MudButton StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Class="mr-2" >Save <Spinner/></MudButton>    
            }
                
            }
        
        }
    </UIPanelBody>
</UIPanel>


@code {
    [Parameter] public string business_branch_id { get; set; }
    [Parameter] public BusinessBranchModel business_branch { get; set; }
    bool is_loading;
    bool is_edited,is_saving;


    List<BusinessBranchSystemFeatureModel> models;
    List<BusinessBranchSystemFeatureModel> save_models;
    protected override async Task OnParametersSetAsync()
    {
        is_loading = true;
        await LoadSystemFeature();
        is_loading = false;
    }

    public async Task LoadSystemFeature()
    {
        var res = await http.ApiGetOData($"BusinessBranchSystemFeature?$expand=system_feature&$filter=business_branch_id eq {business_branch_id}");
        if (res.IsSuccess)
        {
            models = JsonSerializer.Deserialize<List<BusinessBranchSystemFeatureModel>>(res.Content.ToString());
        }
    }

    async Task OnSave()
    {
        is_saving = true;
      save_models = JsonSerializer.Deserialize<List<BusinessBranchSystemFeatureModel>>(JsonSerializer.Serialize(models));
        save_models.ForEach(r => r.system_feature = null);
        var res = await http.ApiPost($"BusinessBranchSystemFeature/save/multiple",save_models);
        if (res.IsSuccess)
        {
           toast.Add("Save System Feature Successfull.", Severity.Success);
        }else
        {
            toast.Add("Save System Feature Fail.", Severity.Warning);
        }

        is_edited = false;
        is_saving = false;
    }

    void OnEdit()
    {
        if (is_edited)
        {
            models = JsonSerializer.Deserialize<List<BusinessBranchSystemFeatureModel>>(JsonSerializer.Serialize(save_models));
        }else
        {
            save_models = JsonSerializer.Deserialize<List<BusinessBranchSystemFeatureModel>>(JsonSerializer.Serialize(models));
        }
        
        is_edited = !is_edited;
        
    }

}
