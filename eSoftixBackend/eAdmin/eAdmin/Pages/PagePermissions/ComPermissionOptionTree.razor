@if (PermissionOptions.Count() > 0)
{
    @if(SelectedValues != null){
        @foreach (var a in SelectedValues)
        {
            @a
        }
    }
    
    <MudTreeView CanSelect="true" @bind-SelectedValues="SelectedValues">
        @if(PermissionOptions.Where(r=>r.parent_id == parent_id).Any()){
            foreach(var p in PermissionOptions.Where(r=>r.parent_id == parent_id)){
                <MudTreeViewItem Value="@(p.id)" Text="@(p.note)">
                    @if(PermissionOptions.Where(r=>r.parent_id == p.id).Any()){
                        @foreach(var s1 in PermissionOptions.Where(r=>r.parent_id == p.id)){
                            if(PermissionOptions.Where(r=>r.parent_id == s1.id).Any()){
                                <MudTreeViewItem Value="@(s1.id)" Text="@(s1.note)">
                                    @foreach(var s2 in PermissionOptions.Where(r=>r.parent_id == s1.id)){
                                        <MudTreeViewItem Value="@s2.id" Text="@(s2.note)"/>
                                    }
                                </MudTreeViewItem>
                            }else{
                                 <MudTreeViewItem Value="@s1.id" Text="@(s1.note)"/>
                            }
                            
                        }
                    }else{
                        <MudTreeViewItem Value="@p.id" Text="@(p.note)"/>
                    }
                
              
                </MudTreeViewItem>
            }
        }
   
    </MudTreeView>
}
@code{

    [CascadingParameter] public List<PermissionOptionModel> PermissionOptions { get; set; }

    public List<PermissionOptionModel> ChildPermissionOption(int? id)
    {
        return PermissionOptions.Where(r => r.id == id).ToList();
    }
    HashSet<int> SelectedValues { get; set; }
    [Parameter] public bool show_delete { get; set; } = false;

    [Parameter] public bool is_parent { get; set; } = false;

    [Parameter] public int role_id { get; set; }
    [Parameter] public EventCallback<PermissionOptionModel> OnSelect { get; set; }
    [Parameter] public int? parent_id { get; set; }
    async Task SelectPermission_Click(PermissionOptionModel permission)
    {
        await OnSelect.InvokeAsync(permission);
    }
}